{
  "entityType" : "WIDGETS_BUNDLE",
  "entity" : {
    "alias" : "kustia_widgets",
    "description" : null,
    "externalId" : null,
    "id" : {
      "entityType" : "WIDGETS_BUNDLE",
      "id" : "3a7417b0-ff99-11ee-a56d-9d6138fe9e87"
    },
    "image" : null,
    "name" : "Kustia Widgets",
    "title" : "Kustia Widgets"
  },
  "widgets" : [ {
    "alias" : "kustia_scada_design",
    "name" : "Kustia SCADA Design",
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ {
        "url" : "https://resources.jointjs.com/demos/rappid/build/package/rappid.css"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.4.0/backbone-min.js"
      }, {
        "url" : "https://resources.jointjs.com/demos/rappid/build/package/rappid.js"
      } ],
      "templateHtml" : "<div id=\"paper-container\"></div>",
      "templateCss" : "/*------------- JOINT JS STSRT------------*/\r\n:root {\r\n  --accent-color: #0075f2;\r\n  --text-color: #131e29;\r\n  --liquid-color: #f6f740;\r\n}\r\n\r\n/* Switch */\r\n\r\n.jj-switch {\r\n  font-family: sans-serif;\r\n  font-size: 14px;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: white;\r\n  border: 1px solid #cad8e3;\r\n  position: static;\r\n  padding: 3px;\r\n  box-sizing: border-box;\r\n  border-radius: 4px;\r\n  color: var(--text-color);\r\n}\r\n\r\n.jj-switch-label {\r\n  width: 100%;\r\n  text-align: center;\r\n  margin: 0 0 2px 0;\r\n}\r\n\r\n.jj-switch-on {\r\n  background: var(--accent-color);\r\n  color: #dde6ed;\r\n  border-radius: 4px 0 0 4px;\r\n  border: 1px solid var(--accent-color);\r\n  width: 50%;\r\n  height: 22px;\r\n}\r\n\r\n.jj-switch-off {\r\n  background: #131e29;\r\n  color: #dde6ed;\r\n  border-radius: 0 4px 4px 0;\r\n  border: 1px solid #131e29;\r\n  width: 50%;\r\n  height: 22px;\r\n}\r\n.jj-switch-on:disabled,\r\n.jj-switch-off:disabled {\r\n  background: #f2f5f8;\r\n  color: #cad8e3;\r\n  border: 1px solid #cad8e3;\r\n}\r\n\r\n/* Checkbox */\r\n\r\n.jj-checkbox {\r\n  width: 100%;\r\n  height: 100%;\r\n  background: white;\r\n  border: 1px solid #cad8e3;\r\n  position: static;\r\n  box-sizing: border-box;\r\n  border-radius: 4px;\r\n}\r\n\r\n.jj-checkbox-input {\r\n  accent-color: var(--accent-color);\r\n}\r\n\r\n/* Slider */\r\n\r\n.jj-slider {\r\n  font-family: sans-serif;\r\n  font-size: 14px;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: white;\r\n  border: 1px solid #cad8e3;\r\n  position: static;\r\n  box-sizing: border-box;\r\n  border-radius: 4px;\r\n  padding: 3px;\r\n  color: var(--text-color);\r\n}\r\n\r\n.jj-slider-input {\r\n  accent-color: var(--accent-color);\r\n}\r\n\r\n.jj-slider-label {\r\n  width: 100%;\r\n  text-align: center;\r\n  white-space: pre;\r\n}\r\n\r\n.jj-slider-output {\r\n  width: 100%;\r\n  text-align: center;\r\n  white-space: pre;\r\n  display: block;\r\n  font-size: 11px;\r\n  color: #40668c;\r\n}\r\n\r\n/* Application */\r\n\r\n#paper-container {\r\n  position: absolute;\r\n  inset: 0 0 0 0;\r\n}\r\n\r\n#logo {\r\n  position: absolute;\r\n  top: 20px;\r\n  right: 0;\r\n}\r\n\r\n#toolbar-container {\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 10px;\r\n  font-family: sans-serif;\r\n  color: var(--text-color);\r\n  accent-color: var(--accent-color);\r\n}\r\n\r\n#toolbar-container [data-name=\"title\"] {\r\n  font-weight: 900;\r\n}\r\n\r\n/*----------- JOINT JS END-------------*/",
      "controllerScript" : "self.onInit = function() {\r\n    \r\n    const $scope = self.ctx.$scope;\r\n\tconsole.log(\"$scope\",$scope.ctx.data)\r\n\t\r\n    // let data = \"{\\\"value\\\":100}\"\r\n    // let data1 = JSON.parse(data);\r\n    // console.log(data1)\r\n    const { dia, shapes, util, ui } = joint;\r\n\r\n    const paperContainerEl = document.getElementById(\"paper-container\");\r\n    const toolbarContainerEl = document.getElementById\r\n    // Custom view flags(\"toolbar-container\");\r\n\r\n    const POWER_FLAG = \"POWER\";\r\n    const LIGHT_FLAG = \"LIGHT\";\r\n    const FLOW_FLAG = \"FLOW\";\r\n    const OPEN_FLAG = \"OPEN\";\r\n\r\n    // Constants\r\n    const LIQUID_COLOR = \"#37c3e6\";\r\n    const IMPURE_WATER_COLOR = \"#b6a59e\";\r\n    const MAX_LIQUID_COLOR = \"#ED2637\";\r\n    const MIN_LIQUID_COLOR = \"#FFD23F\";\r\n    const START_LIQUID = 70;\r\n    const PRESSURE_COLOR = \"#1446A0\";\r\n    const MAX_PRESSURE_COLOR = \"#ED2637\";\r\n\r\n    document.documentElement.style.setProperty(\"--liquid-color\", LIQUID_COLOR);\r\n\r\n    // Pump metrics\r\n    const r = 30;\r\n    const d = 10;\r\n    const l = (3 * r) / 4;\r\n    const step = 20;\r\n\r\n    $scope.dataObject = {\r\n        station1: {\r\n            power: 1,\r\n            fault: 0\r\n        },\r\n        station2: {\r\n            power: 1,\r\n            fault: 0\r\n        },\r\n        pump1: {\r\n            power: 1,\r\n            fault: 0\r\n        },\r\n        pump2: {\r\n            power: 1,\r\n            fault: 0\r\n        },\r\n        pump3: {\r\n            power: 1,\r\n            fault: 0\r\n        },\r\n        handValve1: {\r\n            open: 1\r\n        },\r\n        handValve2: {\r\n            open: 1\r\n        },\r\n        handValve3: {\r\n            open: 1\r\n        },\r\n        handValve4: {\r\n            open: 1\r\n        },\r\n        handValve5: {\r\n            open: 1\r\n        },\r\n        handValve6: {\r\n            open: 0\r\n        },\r\n        handValve7: {\r\n            open: 1\r\n        },\r\n        handValve8: {\r\n            open: 1\r\n        },\r\n        handValve9: {\r\n            open: 0\r\n        },\r\n        handValve10: {\r\n            open: 1\r\n        },\r\n        handValve11: {\r\n            open: 1\r\n        },\r\n        levelSensor1: {\r\n            value: 0\r\n        },\r\n        levelSensor2: {\r\n            value: 0\r\n        },\r\n        levelSensor3: {\r\n            value: 0\r\n        },\r\n        levelSensor4: {\r\n            value: 0\r\n        },\r\n        levelSensor5: {\r\n            value: 0\r\n        },\r\n        levelSensor6: {\r\n            value: 0\r\n        },\r\n        pressureSensor1: {\r\n            value: 11\r\n        },\r\n        pressureSensor2: {\r\n            value: 22\r\n        },\r\n        pressureSensor3: {\r\n            value: 33\r\n        },\r\n        flowSensor1: {\r\n            value: 100\r\n        },\r\n        flowSensor2: {\r\n            value: 200\r\n        },\r\n        flowSensor3: {\r\n            value: 300\r\n        },\r\n    };\r\n    \r\n    $scope.ctx.data.forEach((item, index)=>{\r\n    // \tconsole.log(index, item);\r\n    \tlet itemKey= item.dataKey.name;\r\n    \tconsole.log(\"itemKey\", itemKey);\r\n    \t\t\r\n    \t\r\n    // \tif(item.data.length){\r\n    // \t    let itemValue= item.data[0][1];\r\n    // \t   // console.log(itemValue); \r\n    // \t   // console.log(JSON.parse(itemValue)); \r\n    // \t    let data = JSON.parse(itemValue);\r\n    \t    \r\n    // \t    let key = Object.keys(data);\r\n    // \t    let value = Object.values(data);\r\n    // \t    console.log( key+\" \" + value)\r\n    // \t   // data store in object\r\n    // \t    $scope.dataObject[itemKey][key]= value;\r\n    // \t   //console.log($scope.dataObject[itemKey])\r\n    // \t} \r\n    });\r\n    \r\n    // console.log(\"$scope.dataObj\",$scope.dataObj)\r\n\r\n    class ReservoirTank extends joint.dia.Element {\r\n        defaults() {\r\n            return {\r\n                ...super.defaults,\r\n                type: 'ReservoirTank',\r\n                position: { x: 10, y: 10 },\r\n                size: {\r\n                    width: 160,\r\n                    height: 100\r\n                },\r\n                attrs: {\r\n                    body: {\r\n                        stroke: \"gray\",\r\n                        strokeWidth: 4,\r\n                        x: 0,\r\n                        y: 0,\r\n                        width: \"calc(w)\",\r\n                        height: \"calc(h)\",\r\n                        rx: 120,\r\n                        ry: 10,\r\n                        fill: {\r\n                            type: \"linearGradient\",\r\n                            stops: [\r\n                                { offset: \"0%\", color: \"gray\" },\r\n                                { offset: \"30%\", color: \"white\" },\r\n                                { offset: \"70%\", color: \"white\" },\r\n                                { offset: \"100%\", color: \"gray\" }\r\n                            ]\r\n                        }\r\n                    },\r\n                    label: {\r\n                        text: \"Tank 2\",\r\n                        textAnchor: \"middle\",\r\n                        textVerticalAnchor: \"middle\",\r\n                        x: \"calc(w / 2)\",\r\n                        y: \"calc(h /2)\",\r\n                        fontSize: 14,\r\n                        fontFamily: \"sans-serif\",\r\n                        fill: \"#350100\"\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        preinitialize() {\r\n            this.markup = joint.util.svg/* xml */ `\r\n        <rect @selector=\"body\" />\r\n        <text @selector=\"label\" />\r\n    `;\r\n        }\r\n    }\r\n\r\n    class Pump extends dia.Element {\r\n        defaults() {\r\n            return {\r\n                ...super.defaults,\r\n                type: \"Pump\",\r\n                size: {\r\n                    width: 100,\r\n                    height: 100\r\n                },\r\n                power: 0,\r\n                attrs: {\r\n                    root: {\r\n                        magnetSelector: \"body\"\r\n                    },\r\n                    body: {\r\n                        rx: \"calc(w / 2)\",\r\n                        ry: \"calc(h / 2)\",\r\n                        cx: \"calc(w / 2)\",\r\n                        cy: \"calc(h / 2)\",\r\n                        stroke: \"gray\",\r\n                        strokeWidth: 2,\r\n                        fill: \"lightgray\"\r\n                    },\r\n                    label: {\r\n                        text: \"Pump\",\r\n                        textAnchor: \"middle\",\r\n                        textVerticalAnchor: \"top\",\r\n                        x: \"calc(0.5*w)\",\r\n                        y: \"calc(h+10)\",\r\n                        fontSize: 16,\r\n                        fontFamily: \"sans-serif\",\r\n                        fill: \"red\"\r\n                    },\r\n                    rotorGroup: {\r\n                        transform: \"translate(calc(w/2),calc(h/2))\",\r\n                        event: \"element:power:click\",\r\n                        cursor: \"pointer\"\r\n                    },\r\n                    rotorFrame: {\r\n                        r: 40,\r\n                        fill: \"#eee\",\r\n                        stroke: \"#666\",\r\n                        strokeWidth: 2\r\n                    },\r\n                    rotorBackground: {\r\n                        r: 34,\r\n                        fill: \"#777\",\r\n                        stroke: \"#222\",\r\n                        strokeWidth: 1,\r\n                        style: {\r\n                            transition: \"fill 0.5s ease-in-out\"\r\n                        }\r\n                    },\r\n                    rotor: {\r\n                        // d: `M ${a} ${a} ${b} ${r} -${b} ${r} -${a} ${a} -${r} ${b} -${r} -${b} -${a} -${a} -${b} -${r} ${b} -${r} ${a} -${a} ${r} -${b} ${r} ${b} Z`,\r\n                        d: `M 0 0 V ${r} l ${-d} ${-l} Z M 0 0 V ${-r} l ${d} ${l} Z M 0 0 H ${r} l ${-l} ${d} Z M 0 0 H ${-r} l ${l} ${-d} Z`,\r\n                        stroke: \"#222\",\r\n                        strokeWidth: 3,\r\n                        fill: \"#bbb\"\r\n                    }\r\n                },\r\n                ports: {\r\n                    groups: {\r\n                        pipes: {\r\n                            position: {\r\n                                name: \"line\",\r\n                                args: {\r\n                                    start: { x: \"calc(w / 2)\", y: \"calc(h)\" },\r\n                                    end: { x: \"calc(w / 2)\", y: 0 }\r\n                                }\r\n                            },\r\n                            markup: util.svg`\r\n                        <rect @selector=\"pipeBody\" />\r\n                        <rect @selector=\"pipeEnd\" />\r\n                    `,\r\n                            size: { width: 80, height: 30 },\r\n                            attrs: {\r\n                                portRoot: {\r\n                                    magnetSelector: \"pipeEnd\"\r\n                                },\r\n                                pipeBody: {\r\n                                    width: \"calc(w)\",\r\n                                    height: \"calc(h)\",\r\n                                    y: \"calc(h / -2)\",\r\n                                    fill: {\r\n                                        type: \"linearGradient\",\r\n                                        stops: [\r\n                                            { offset: \"0%\", color: \"gray\" },\r\n                                            { offset: \"30%\", color: \"white\" },\r\n                                            { offset: \"70%\", color: \"white\" },\r\n                                            { offset: \"100%\", color: \"gray\" }\r\n                                        ],\r\n                                        attrs: {\r\n                                            x1: \"0%\",\r\n                                            y1: \"0%\",\r\n                                            x2: \"0%\",\r\n                                            y2: \"100%\"\r\n                                        }\r\n                                    }\r\n                                },\r\n                                pipeEnd: {\r\n                                    width: 10,\r\n                                    height: \"calc(h+6)\",\r\n                                    y: \"calc(h / -2 - 3)\",\r\n                                    stroke: \"gray\",\r\n                                    strokeWidth: 3,\r\n                                    fill: \"white\"\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    items: [\r\n                        {\r\n                            id: \"left\",\r\n                            group: \"pipes\",\r\n                            z: 1,\r\n                            attrs: {\r\n                                pipeBody: {\r\n                                    x: \"calc(-1 * w)\"\r\n                                },\r\n                                pipeEnd: {\r\n                                    x: \"calc(-1 * w)\"\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            id: \"right\",\r\n                            group: \"pipes\",\r\n                            z: 0,\r\n                            attrs: {\r\n                                pipeEnd: {\r\n                                    x: \"calc(w - 10)\"\r\n                                }\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            };\r\n        }\r\n\r\n        preinitialize() {\r\n            this.markup = util.svg/* xml */ `\r\n        <ellipse @selector=\"body\" />\r\n        <g @selector=\"rotorGroup\">\r\n            <circle @selector=\"rotorFrame\" />\r\n            <circle @selector=\"rotorBackground\" />\r\n            <path @selector=\"rotor\" />\r\n        </g>\r\n        <text @selector=\"label\" />\r\n    `;\r\n        }\r\n\r\n        get power() {\r\n            return this.get(\"power\") || 0;\r\n        }\r\n\r\n        set power(value) {\r\n            this.set(\"power\", value);\r\n        }\r\n    }\r\n\r\n    const PumpView = dia.ElementView.extend({\r\n        presentationAttributes: dia.ElementView.addPresentationAttributes({\r\n            power: [POWER_FLAG]\r\n        }),\r\n\r\n        initFlag: [dia.ElementView.Flags.RENDER, POWER_FLAG],\r\n\r\n        powerAnimation: null,\r\n\r\n        confirmUpdate(...args) {\r\n            let flags = dia.ElementView.prototype.confirmUpdate.call(this, ...args);\r\n            if (this.hasFlag(flags, POWER_FLAG)) {\r\n                this.togglePower();\r\n                flags = this.removeFlag(flags, POWER_FLAG);\r\n            }\r\n            return flags;\r\n        },\r\n\r\n        getSpinAnimation() {\r\n            let { spinAnimation } = this;\r\n            if (spinAnimation) return spinAnimation;\r\n            const [rotorEl] = this.findBySelector(\"rotor\");\r\n            // It's important to use start and end frames to make it work in Safari.\r\n            const keyframes = { transform: [\"rotate(0deg)\", \"rotate(360deg)\"] };\r\n            spinAnimation = rotorEl.animate(keyframes, {\r\n                fill: \"forwards\",\r\n                duration: 1000,\r\n                iterations: Infinity\r\n            });\r\n            this.spinAnimation = spinAnimation;\r\n            return spinAnimation;\r\n        },\r\n\r\n        togglePower() {\r\n            const { model } = this;\r\n            this.getSpinAnimation().playbackRate = model.power;\r\n        }\r\n    });\r\n\r\n    class ControlValve extends dia.Element {\r\n        defaults() {\r\n            return {\r\n                ...super.defaults,\r\n                type: \"ControlValve\",\r\n                size: {\r\n                    width: 60,\r\n                    height: 60\r\n                },\r\n                open: 1,\r\n                attrs: {\r\n                    root: {\r\n                        magnetSelector: \"body\"\r\n                    },\r\n                    body: {\r\n                        rx: \"calc(w / 2)\",\r\n                        ry: \"calc(h / 2)\",\r\n                        cx: \"calc(w / 2)\",\r\n                        cy: \"calc(h / 2)\",\r\n                        stroke: \"gray\",\r\n                        strokeWidth: 2,\r\n                        fill: {\r\n                            type: \"radialGradient\",\r\n                            stops: [\r\n                                { offset: \"80%\", color: \"white\" },\r\n                                { offset: \"100%\", color: \"gray\" }\r\n                            ]\r\n                        }\r\n                    },\r\n                    liquid: {\r\n                        // We use path instead of rect to make it possible to animate\r\n                        // the stroke-dasharray to show the liquid flow.\r\n                        d: \"M calc(w / 2 + 12) calc(h / 2) h -24\",\r\n                        stroke: LIQUID_COLOR,\r\n                        strokeWidth: 24,\r\n                        strokeDasharray: \"3,1\"\r\n                    },\r\n                    cover: {\r\n                        x: \"calc(w / 2 - 12)\",\r\n                        y: \"calc(h / 2 - 12)\",\r\n                        width: 24,\r\n                        height: 24,\r\n                        stroke: \"#333\",\r\n                        strokeWidth: 2,\r\n                        fill: \"#fff\"\r\n                    },\r\n                    coverFrame: {\r\n                        x: \"calc(w / 2 - 15)\",\r\n                        y: \"calc(h / 2 - 15)\",\r\n                        width: 30,\r\n                        height: 30,\r\n                        stroke: \"#777\",\r\n                        strokeWidth: 2,\r\n                        fill: \"none\",\r\n                        rx: 1,\r\n                        ry: 1\r\n                    },\r\n                    stem: {\r\n                        width: 10,\r\n                        height: 30,\r\n                        x: \"calc(w / 2 - 5)\",\r\n                        y: -30,\r\n                        stroke: \"#333\",\r\n                        strokeWidth: 2,\r\n                        fill: \"#555\"\r\n                    },\r\n                    control: {\r\n                        d: \"M 0 0 C 0 -30 60 -30 60 0 Z\",\r\n                        transform: \"translate(calc(w / 2 - 30), -20)\",\r\n                        stroke: \"#333\",\r\n                        strokeWidth: 2,\r\n                        rx: 5,\r\n                        ry: 5,\r\n                        fill: \"#666\"\r\n                    },\r\n                    label: {\r\n                        text: \"Valve\",\r\n                        textAnchor: \"middle\",\r\n                        textVerticalAnchor: \"top\",\r\n                        x: \"calc(0.5*w)\",\r\n                        y: \"calc(h+10)\",\r\n                        fontSize: 14,\r\n                        fontFamily: \"sans-serif\",\r\n                        fill: \"#350100\"\r\n                    }\r\n                },\r\n                ports: {\r\n                    groups: {\r\n                        pipes: {\r\n                            position: {\r\n                                name: \"absolute\",\r\n                                args: {\r\n                                    x: \"calc(w / 2)\",\r\n                                    y: \"calc(h / 2)\"\r\n                                }\r\n                            },\r\n                            markup: util.svg`\r\n                      <rect @selector=\"pipeBody\" />\r\n                      <rect @selector=\"pipeEnd\" />\r\n                  `,\r\n                            size: { width: 50, height: 30 },\r\n                            attrs: {\r\n                                portRoot: {\r\n                                    magnetSelector: \"pipeEnd\"\r\n                                },\r\n                                pipeBody: {\r\n                                    width: \"calc(w)\",\r\n                                    height: \"calc(h)\",\r\n                                    y: \"calc(h / -2)\",\r\n                                    fill: {\r\n                                        type: \"linearGradient\",\r\n                                        stops: [\r\n                                            { offset: \"0%\", color: \"gray\" },\r\n                                            { offset: \"30%\", color: \"white\" },\r\n                                            { offset: \"70%\", color: \"white\" },\r\n                                            { offset: \"100%\", color: \"gray\" }\r\n                                        ],\r\n                                        attrs: {\r\n                                            x1: \"0%\",\r\n                                            y1: \"0%\",\r\n                                            x2: \"0%\",\r\n                                            y2: \"100%\"\r\n                                        }\r\n                                    }\r\n                                },\r\n                                pipeEnd: {\r\n                                    width: 10,\r\n                                    height: \"calc(h+6)\",\r\n                                    y: \"calc(h / -2 - 3)\",\r\n                                    stroke: \"gray\",\r\n                                    strokeWidth: 3,\r\n                                    fill: \"white\"\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    items: [\r\n                        {\r\n                            id: \"left\",\r\n                            group: \"pipes\",\r\n                            z: 0,\r\n                            attrs: {\r\n                                pipeBody: {\r\n                                    x: \"calc(-1 * w)\"\r\n                                },\r\n                                pipeEnd: {\r\n                                    x: \"calc(-1 * w)\"\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            id: \"right\",\r\n                            group: \"pipes\",\r\n                            z: 0,\r\n                            attrs: {\r\n                                pipeEnd: {\r\n                                    x: \"calc(w - 10)\"\r\n                                }\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            };\r\n        }\r\n\r\n        preinitialize() {\r\n            this.markup = util.svg/* xml */ `\r\n      <rect @selector=\"stem\" />\r\n      <path @selector=\"control\" />\r\n      <ellipse @selector=\"body\" />\r\n      <rect @selector=\"coverFrame\" />\r\n      <path @selector=\"liquid\" />\r\n      <rect @selector=\"cover\" />\r\n      <text @selector=\"label\" />\r\n  `;\r\n        }\r\n    }\r\n\r\n    const ControlValveView = dia.ElementView.extend({\r\n        presentationAttributes: dia.ElementView.addPresentationAttributes({\r\n            open: [OPEN_FLAG]\r\n        }),\r\n\r\n        initFlag: [dia.ElementView.Flags.RENDER, OPEN_FLAG],\r\n\r\n        framePadding: 6,\r\n\r\n        liquidAnimation: null,\r\n\r\n        confirmUpdate(...args) {\r\n            let flags = dia.ElementView.prototype.confirmUpdate.call(this, ...args);\r\n            this.animateLiquid();\r\n            if (this.hasFlag(flags, OPEN_FLAG)) {\r\n                this.updateCover();\r\n                flags = this.removeFlag(flags, OPEN_FLAG);\r\n            }\r\n            return flags;\r\n        },\r\n\r\n        updateCover() {\r\n            const { model } = this;\r\n            const opening = Math.max(0, Math.min(1, model.get(\"open\") || 0));\r\n            const [coverEl] = this.findBySelector(\"cover\");\r\n            const [coverFrameEl] = this.findBySelector(\"coverFrame\");\r\n            const frameWidth =\r\n                Number(coverFrameEl.getAttribute(\"width\")) - this.framePadding;\r\n            const width = Math.round(frameWidth * (1 - opening));\r\n            coverEl.animate(\r\n                {\r\n                    width: [`${width}px`]\r\n                },\r\n                {\r\n                    fill: \"forwards\",\r\n                    duration: 200\r\n                }\r\n            );\r\n        },\r\n\r\n        animateLiquid() {\r\n            if (this.liquidAnimation) return;\r\n            const [liquidEl] = this.findBySelector(\"liquid\");\r\n            this.liquidAnimation = liquidEl.animate(\r\n                {\r\n                    // 24 matches the length of the liquid path\r\n                    strokeDashoffset: [0, 24]\r\n                },\r\n                {\r\n                    fill: \"forwards\",\r\n                    iterations: Infinity,\r\n                    duration: 3000\r\n                }\r\n            );\r\n        }\r\n    });\r\n\r\n    class HandValve extends dia.Element {\r\n        defaults() {\r\n            return {\r\n                ...super.defaults,\r\n                type: \"HandValve\",\r\n                size: {\r\n                    width: 50,\r\n                    height: 50\r\n                },\r\n                power: 0,\r\n                attrs: {\r\n                    root: {\r\n                        magnetSelector: \"body\"\r\n                    },\r\n                    body: {\r\n                        rx: \"calc(w / 2)\",\r\n                        ry: \"calc(h / 2)\",\r\n                        cx: \"calc(w / 2)\",\r\n                        cy: \"calc(h / 2)\",\r\n                        stroke: \"gray\",\r\n                        strokeWidth: 2,\r\n                        fill: {\r\n                            type: \"radialGradient\",\r\n                            stops: [\r\n                                { offset: \"70%\", color: \"white\" },\r\n                                { offset: \"100%\", color: \"gray\" }\r\n                            ]\r\n                        }\r\n                    },\r\n                    status: {\r\n                        height: \"calc(h /2)\",\r\n                        width: \"calc(w / 2)\",\r\n                        rx: \"calc(w / 2)\",\r\n                        x: \"calc(w / 4)\",\r\n                        y: \"calc(h / 4)\",\r\n                        fill: \"white\"\r\n                    },\r\n                    stem: {\r\n                        width: 10,\r\n                        height: 30,\r\n                        x: \"calc(w / 2 - 5)\",\r\n                        y: -30,\r\n                        stroke: \"#333\",\r\n                        strokeWidth: 2,\r\n                        fill: \"#555\"\r\n                    },\r\n                    handwheel: {\r\n                        width: 60,\r\n                        height: 10,\r\n                        x: \"calc(w / 2 - 30)\",\r\n                        y: -30,\r\n                        stroke: \"#333\",\r\n                        strokeWidth: 2,\r\n                        rx: 5,\r\n                        ry: 5,\r\n                        fill: \"#666\"\r\n                    },\r\n                    label: {\r\n                        text: \"Valve\",\r\n                        textAnchor: \"middle\",\r\n                        textVerticalAnchor: \"top\",\r\n                        x: \"calc(0.5*w)\",\r\n                        y: \"calc(h+10)\",\r\n                        fontSize: \"16\",\r\n                        fontFamily: \"sans-serif\",\r\n                        fill: \"#350100\",\r\n                    }\r\n                },\r\n                ports: {\r\n                    groups: {\r\n                        pipes: {\r\n                            position: {\r\n                                name: \"absolute\",\r\n                                args: {\r\n                                    x: \"calc(w / 2)\",\r\n                                    y: \"calc(h / 2)\"\r\n                                }\r\n                            },\r\n                            markup: util.svg`\r\n                      <rect @selector=\"pipeBody\" />\r\n                      <rect @selector=\"pipeEnd\" />\r\n                  `,\r\n                            size: { width: 50, height: 30 },\r\n                            attrs: {\r\n                                portRoot: {\r\n                                    magnetSelector: \"pipeEnd\"\r\n                                },\r\n                                pipeBody: {\r\n                                    width: \"calc(w)\",\r\n                                    height: \"calc(h)\",\r\n                                    y: \"calc(h / -2)\",\r\n                                    fill: {\r\n                                        type: \"linearGradient\",\r\n                                        stops: [\r\n                                            { offset: \"0%\", color: \"gray\" },\r\n                                            { offset: \"30%\", color: \"white\" },\r\n                                            { offset: \"70%\", color: \"white\" },\r\n                                            { offset: \"100%\", color: \"gray\" }\r\n                                        ],\r\n                                        attrs: {\r\n                                            x1: \"0%\",\r\n                                            y1: \"0%\",\r\n                                            x2: \"0%\",\r\n                                            y2: \"100%\"\r\n                                        }\r\n                                    }\r\n                                },\r\n                                pipeEnd: {\r\n                                    width: 10,\r\n                                    height: \"calc(h+6)\",\r\n                                    y: \"calc(h / -2 - 3)\",\r\n                                    stroke: \"gray\",\r\n                                    strokeWidth: 3,\r\n                                    fill: \"white\"\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    items: [\r\n                        {\r\n                            id: \"left\",\r\n                            group: \"pipes\",\r\n                            z: 0,\r\n                            attrs: {\r\n                                pipeBody: {\r\n                                    x: \"calc(-1 * w)\"\r\n                                },\r\n                                pipeEnd: {\r\n                                    x: \"calc(-1 * w)\"\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            id: \"right\",\r\n                            group: \"pipes\",\r\n                            z: 0,\r\n                            attrs: {\r\n                                pipeEnd: {\r\n                                    x: \"calc(w - 10)\"\r\n                                }\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            };\r\n        }\r\n\r\n        preinitialize() {\r\n            this.markup = util.svg/* xml */ `\r\n      <rect @selector=\"stem\" />\r\n      <rect @selector=\"handwheel\" />\r\n      <ellipse @selector=\"body\" />\r\n      <text @selector=\"label\" />\r\n      <rect @selector=\"status\" />\r\n  `;\r\n        }\r\n    }\r\n    class LiquidTank extends dia.Element {\r\n        defaults() {\r\n            return {\r\n                ...super.defaults,\r\n                type: \"LiquidTank\",\r\n                size: {\r\n                    width: 160,\r\n                    height: 300\r\n                },\r\n                attrs: {\r\n                    root: {\r\n                        magnetSelector: \"body\"\r\n                    },\r\n                    legs: {\r\n                        fill: \"none\",\r\n                        stroke: \"#350100\",\r\n                        strokeWidth: 8,\r\n                        strokeLinecap: \"round\",\r\n                        d: \"M 20 calc(h) l -5 10 M calc(w - 20) calc(h) l 5 10\"\r\n                    },\r\n                    body: {\r\n                        stroke: \"gray\",\r\n                        strokeWidth: 4,\r\n                        x: 0,\r\n                        y: 0,\r\n                        width: \"calc(w)\",\r\n                        height: \"calc(h)\",\r\n                        rx: 120,\r\n                        ry: 10,\r\n                        fill: {\r\n                            type: \"linearGradient\",\r\n                            stops: [\r\n                                { offset: \"0%\", color: \"gray\" },\r\n                                { offset: \"30%\", color: \"white\" },\r\n                                { offset: \"70%\", color: \"white\" },\r\n                                { offset: \"100%\", color: \"gray\" }\r\n                            ]\r\n                        }\r\n                    },\r\n                    top: {\r\n                        x: 0,\r\n                        y: 20,\r\n                        width: \"calc(w)\",\r\n                        height: 20,\r\n                        fill: \"none\",\r\n                        stroke: \"gray\",\r\n                        strokeWidth: 2\r\n                    },\r\n                    label: {\r\n                        text: \"Tank 1\",\r\n                        textAnchor: \"middle\",\r\n                        textVerticalAnchor: \"top\",\r\n                        x: \"calc(w / 2)\",\r\n                        y: \"calc(h + 10)\",\r\n                        fontSize: 14,\r\n                        fontFamily: \"sans-serif\",\r\n                        fill: \"#350100\"\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        preinitialize() {\r\n            this.markup = util.svg/* xml */ `\r\n        <path @selector=\"legs\"/>\r\n        <rect @selector=\"body\"/>\r\n        <rect @selector=\"top\"/>\r\n        <text @selector=\"label\" />\r\n    `;\r\n        }\r\n\r\n        get level() {\r\n            return this.get(\"level\") || 0;\r\n        }\r\n\r\n        set level(level) {\r\n            const newLevel = Math.max(0, Math.min(100, level));\r\n            this.set(\"level\", newLevel);\r\n        }\r\n    }\r\n\r\n    const LEVEL_FLAG = \"LEVEl\";\r\n\r\n    const PanelView = dia.ElementView.extend({\r\n        presentationAttributes: dia.ElementView.addPresentationAttributes({\r\n            level: [LEVEL_FLAG],\r\n            color: [LEVEL_FLAG]\r\n        }),\r\n\r\n        initFlag: [dia.ElementView.Flags.RENDER, LEVEL_FLAG],\r\n\r\n        confirmUpdate(...args) {\r\n            let flags = dia.ElementView.prototype.confirmUpdate.call(this, ...args);\r\n            if (this.hasFlag(flags, LEVEL_FLAG)) {\r\n                this.updateLevel();\r\n                flags = this.removeFlag(flags, LEVEL_FLAG);\r\n            }\r\n            return flags;\r\n        },\r\n\r\n        updateLevel() {\r\n            const { model } = this;\r\n            const level = Math.max(0, Math.min(100, model.get(\"level\") || 0));\r\n            const color = model.get(\"color\") || \"red\";\r\n            const [liquidEl] = this.findBySelector(\"liquid\");\r\n            const [windowEl] = this.findBySelector(\"frame\");\r\n            const windowHeight = Number(windowEl.getAttribute(\"height\"));\r\n            const height = Math.round((windowHeight * level) / 100);\r\n            liquidEl.animate(\r\n                {\r\n                    height: [`${height}px`],\r\n                    fill: [color]\r\n                },\r\n                {\r\n                    fill: \"forwards\",\r\n                    duration: 1000\r\n                }\r\n            );\r\n        }\r\n    });\r\n\r\n    class ConicTank extends dia.Element {\r\n        defaults() {\r\n            return {\r\n                ...super.defaults,\r\n                type: \"ConicTank\",\r\n                size: {\r\n                    width: 160,\r\n                    height: 100\r\n                },\r\n                attrs: {\r\n                    root: {\r\n                        magnetSelector: \"body\"\r\n                    },\r\n                    body: {\r\n                        stroke: \"gray\",\r\n                        strokeWidth: 4,\r\n                        x: 0,\r\n                        y: 0,\r\n                        width: \"calc(w)\",\r\n                        height: \"calc(h)\",\r\n                        rx: 120,\r\n                        ry: 10,\r\n                        fill: {\r\n                            type: \"linearGradient\",\r\n                            stops: [\r\n                                { offset: \"0%\", color: \"gray\" },\r\n                                { offset: \"30%\", color: \"white\" },\r\n                                { offset: \"70%\", color: \"white\" },\r\n                                { offset: \"100%\", color: \"gray\" }\r\n                            ]\r\n                        }\r\n                    },\r\n                    top: {\r\n                        x: 0,\r\n                        y: 20,\r\n                        width: \"calc(w)\",\r\n                        height: 20,\r\n                        fill: \"none\",\r\n                        stroke: \"gray\",\r\n                        strokeWidth: 2\r\n                    },\r\n                    bottom: {\r\n                        d: \"M 0 0 L calc(w) 0 L calc(w / 2 + 10) 70 h -20 Z\",\r\n                        transform: \"translate(0, calc(h - 10))\",\r\n                        stroke: \"gray\",\r\n                        strokeLinejoin: \"round\",\r\n                        strokeWidth: 2,\r\n                        fill: {\r\n                            type: \"linearGradient\",\r\n                            stops: [\r\n                                { offset: \"10%\", color: \"#aaa\" },\r\n                                { offset: \"30%\", color: \"#fff\" },\r\n                                { offset: \"90%\", color: \"#aaa\" }\r\n                            ],\r\n                            attrs: {\r\n                                gradientTransform: \"rotate(-10)\"\r\n                            }\r\n                        }\r\n                    },\r\n                    label: {\r\n                        text: \"Tank 2\",\r\n                        textAnchor: \"middle\",\r\n                        textVerticalAnchor: \"bottom\",\r\n                        x: \"calc(w / 2)\",\r\n                        y: -10,\r\n                        fontSize: 14,\r\n                        fontFamily: \"sans-serif\",\r\n                        fill: \"#350100\"\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        preinitialize() {\r\n            this.markup = util.svg/* xml */ `\r\n      <path @selector=\"bottom\"/>\r\n      <rect @selector=\"body\"/>\r\n      <rect @selector=\"top\"/>\r\n      <text @selector=\"label\" />\r\n  `;\r\n        }\r\n    }\r\n\r\n    class Panel extends dia.Element {\r\n        defaults() {\r\n            return {\r\n                ...super.defaults,\r\n                type: \"Panel\",\r\n                size: {\r\n                    width: 100,\r\n                    height: 230\r\n                },\r\n                level: 0,\r\n                attrs: {\r\n                    root: {\r\n                        magnetSelector: \"panelBody\"\r\n                    },\r\n                    panelBody: {\r\n                        x: 0,\r\n                        y: 0,\r\n                        width: \"calc(w)\",\r\n                        height: \"calc(h)\",\r\n                        rx: 1,\r\n                        ry: 1,\r\n                        fill: \"lightgray\",\r\n                        stroke: \"gray\",\r\n                        strokeWidth: 1\r\n                    },\r\n                    panelWindow: {\r\n                        // turn the panel over so that we can grow the liquid from the bottom\r\n                        // by increasing the height of the bar.\r\n                        transform: \"translate(10, 10) rotate(180) translate(-40,-205)\"\r\n                    },\r\n                    panelTicks: {\r\n                        transform: \"translate(55, 15)\",\r\n                        d: `M 0 0 h 8 M 0 ${step} h 8 M 0 ${step * 2} h 8 M 0 ${step * 3\r\n                            } h 8 M 0 ${step * 4} h 8 M 0 ${step * 5} h 8 M 0 ${step * 6\r\n                            } h 8 M 0 ${step * 7} h 8 M 0 ${step * 8} h 8 M 0 ${step * 9\r\n                            } h 8 M 0 ${step * 10} h 8`,\r\n                        fill: \"none\",\r\n                        stroke: \"black\",\r\n                        strokeWidth: 2,\r\n                        strokeLinecap: \"round\"\r\n                    },\r\n                    panelValues: {\r\n                        text: \"100\\n90\\n80\\n70\\n60\\n50\\n40\\n30\\n20\\n10\\n0\",\r\n                        textAnchor: \"middle\",\r\n                        textVerticalAnchor: \"top\",\r\n                        x: 80,\r\n                        y: 10,\r\n                        lineHeight: step,\r\n                        fontSize: 14,\r\n                        fontFamily: \"sans-serif\"\r\n                    },\r\n                    frame: {\r\n                        width: 40,\r\n                        height: 200,\r\n                        rx: 1,\r\n                        ry: 1,\r\n                        fill: \"none\",\r\n                        stroke: \"black\",\r\n                        strokeWidth: 3\r\n                    },\r\n                    liquid: {\r\n                        x: 0,\r\n                        y: 0,\r\n                        width: 40,\r\n                        height: 0,\r\n                        stroke: \"black\",\r\n                        strokeWidth: 2,\r\n                        strokeOpacity: 0.2,\r\n                        fill: MIN_LIQUID_COLOR\r\n                    },\r\n                    glass: {\r\n                        x: 0,\r\n                        y: 0,\r\n                        width: 40,\r\n                        height: 200,\r\n                        fill: \"blue\",\r\n                        stroke: \"none\",\r\n                        fillOpacity: 0.1\r\n                    },\r\n                    label: {\r\n                        text: \"Tank 1\",\r\n                        textAnchor: \"middle\",\r\n                        textVerticalAnchor: \"top\",\r\n                        x: \"calc(w / 2)\",\r\n                        y: \"calc(h + 10)\",\r\n                        fontSize: 20,\r\n                        fontFamily: \"sans-serif\",\r\n                        fill: \"#350100\"\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        preinitialize() {\r\n            this.markup = util.svg/* xml */ `\r\n        <rect @selector=\"panelBody\"/>\r\n        <path @selector=\"panelTicks\"/>\r\n        <text @selector=\"panelValues\" />\r\n        <g @selector=\"panelWindow\">\r\n            <rect @selector=\"glass\"/>\r\n            <rect @selector=\"liquid\"/>\r\n            <rect @selector=\"frame\"/>\r\n        </g>\r\n  `;\r\n        }\r\n    }\r\n\r\n    class Pipe extends dia.Link {\r\n        defaults() {\r\n            return {\r\n                ...super.defaults,\r\n                type: \"Pipe\",\r\n                z: -1,\r\n                router: { name: \"rightAngle\" },\r\n                flow: 0,\r\n                attrs: {\r\n                    liquid: {\r\n                        connection: true,\r\n                        stroke: LIQUID_COLOR,\r\n                        strokeWidth: 10,\r\n                        strokeLinejoin: \"round\",\r\n                        strokeLinecap: \"square\",\r\n                        strokeDasharray: \"10,20\"\r\n                    },\r\n                    line: {\r\n                        connection: true,\r\n                        stroke: \"#eee\",\r\n                        strokeWidth: 10,\r\n                        strokeLinejoin: \"round\",\r\n                        strokeLinecap: \"round\"\r\n                    },\r\n                    outline: {\r\n                        connection: true,\r\n                        stroke: \"#444\",\r\n                        strokeWidth: 16,\r\n                        strokeLinejoin: \"round\",\r\n                        strokeLinecap: \"round\"\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        preinitialize() {\r\n            this.markup = util.svg/* xml */ `\r\n        <path @selector=\"outline\" fill=\"none\"/>\r\n        <path @selector=\"line\" fill=\"none\"/>\r\n        <path @selector=\"liquid\" fill=\"none\"/>\r\n    `;\r\n        }\r\n    }\r\n\r\n    const PipeView = dia.LinkView.extend({\r\n        presentationAttributes: dia.LinkView.addPresentationAttributes({\r\n            flow: [FLOW_FLAG]\r\n        }),\r\n\r\n        initFlag: [...dia.LinkView.prototype.initFlag, FLOW_FLAG],\r\n\r\n        flowAnimation: null,\r\n\r\n        confirmUpdate(...args) {\r\n            let flags = dia.LinkView.prototype.confirmUpdate.call(this, ...args);\r\n            if (this.hasFlag(flags, FLOW_FLAG)) {\r\n                this.updateFlow();\r\n                flags = this.removeFlag(flags, FLOW_FLAG);\r\n            }\r\n            return flags;\r\n        },\r\n\r\n        getFlowAnimation() {\r\n            let { flowAnimation } = this;\r\n            if (flowAnimation) return flowAnimation;\r\n            const [liquidEl] = this.findBySelector(\"liquid\");\r\n            // stroke-dashoffset = sum(stroke-dasharray) * n;\r\n            // 90 = 10 + 20 + 10 + 20 + 10 + 20\r\n            const keyframes = { strokeDashoffset: [90, 0] };\r\n            flowAnimation = liquidEl.animate(keyframes, {\r\n                fill: \"forwards\",\r\n                duration: 1000,\r\n                iterations: Infinity\r\n            });\r\n            this.flowAnimation = flowAnimation;\r\n            return flowAnimation;\r\n        },\r\n\r\n        updateFlow() {\r\n            const { model } = this;\r\n            const flowRate = model.get(\"flow\") || 0;\r\n            this.getFlowAnimation().playbackRate = flowRate;\r\n            const [liquidEl] = this.findBySelector(\"liquid\");\r\n            liquidEl.style.stroke = flowRate === 0 ? \"#ccc\" : \"\";\r\n        }\r\n    });\r\n\r\n    class Zone extends joint.dia.Element {\r\n        defaults() {\r\n            return {\r\n                ...super.defaults,\r\n                type: \"Zone\",\r\n                size: {\r\n                    width: 120,\r\n                    height: 40\r\n                },\r\n                attrs: {\r\n                    body: {\r\n                        fill: \"#ffffff\",\r\n                        stroke: \"#cad8e3\",\r\n                        strokeWidth: 1,\r\n                        d: \"M 0 calc(0.5*h) calc(0.5*h) 0 H calc(w) V calc(h) H calc(0.5*h) Z\"\r\n                    },\r\n                    label: {\r\n                        fontSize: 14,\r\n                        fontFamily: \"sans-serif\",\r\n                        fontWeight: \"bold\",\r\n                        fill: LIQUID_COLOR,\r\n                        textVerticalAnchor: \"middle\",\r\n                        textAnchor: \"middle\",\r\n                        x: \"calc(w / 2 + 10)\",\r\n                        y: \"calc(h / 2)\"\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        preinitialize() {\r\n            this.markup = util.svg/* xml */ `\r\n        <path @selector=\"body\"/>\r\n        <text @selector=\"label\"/>\r\n    `;\r\n        }\r\n    }\r\n\r\n    class Join extends dia.Element {\r\n        defaults() {\r\n            return {\r\n                ...super.defaults,\r\n                type: \"Join\",\r\n                size: {\r\n                    width: 30,\r\n                    height: 30\r\n                },\r\n                attrs: {\r\n                    body: {\r\n                        fill: \"#eee\",\r\n                        stroke: \"#666\",\r\n                        strokeWidth: 2,\r\n                        d:\r\n                            \"M 10 0 H calc(w - 10) l 10 10 V calc(h - 10) l -10 10 H 10 l -10 -10 V 10 Z\"\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        preinitialize() {\r\n            this.markup = util.svg/* xml */ `\r\n        <path @selector=\"body\"/>\r\n    `;\r\n        }\r\n    }\r\n\r\n    class WaterStation extends joint.dia.Element {\r\n        defaults() {\r\n            return {\r\n                ...super.defaults,\r\n                type: 'WaterStation',\r\n                position: { x: 10, y: 10 },\r\n                size: { width: 150, height: 60 },\r\n                power: 0,\r\n                attrs: {\r\n                    body: {\r\n                        width: \"calc(w)\",\r\n                        height: \"calc(h)\",\r\n                        fill: \"white\",\r\n                        stroke: \"black\",\r\n                        strokeWidth: 1\r\n                    },\r\n                    label: {\r\n                        text: \"Water Station\",\r\n                        textAnchor: \"middle\",\r\n                        textVerticalAnchor: \"middle\",\r\n                        x: \"calc(w / 2)\",\r\n                        y: \"calc(h / 2)\",\r\n                        fontSize: 20,\r\n                        fontFamily: \"sans-serif\",\r\n                        fill: \"black\",\r\n                        fontWeight: \"bold\",\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        preinitialize() {\r\n            this.markup = joint.util.svg/* xml */ `\r\n        <rect @selector=\"body\" />\r\n        <text @selector=\"label\" />\r\n    `;\r\n        }\r\n    }\r\n\r\n    class LevelSensor extends joint.dia.Element {\r\n        defaults() {\r\n            return {\r\n                ...super.defaults,\r\n                type: 'LevelSensor',\r\n                position: { x: 10, y: 10 },\r\n                size: { width: 80, height: 80 },\r\n                attrs: {\r\n                    body: {\r\n                        width: \"calc(w)\",\r\n                        height: \"calc(h)\",\r\n                        fill: \"#1C00ff00\",\r\n                        // stroke: \"black\",\r\n                        // strokeWidth: 1\r\n                    },\r\n                    label: {\r\n                        text: \"LT\",\r\n                        textAnchor: \"middle\",\r\n                        textVerticalAnchor: \"middle\",\r\n                        x: \"calc(w + 5)\",\r\n                        y: \"calc(h / 2)\",\r\n                        fontSize: 20,\r\n                        fontFamily: \"sans-serif\",\r\n                        fill: \"#350100\"\r\n                    },\r\n                    ima: {\r\n                        x: 0,\r\n                        y: 0,\r\n                        width: \"calc(w)\",\r\n                        height: \"calc(h)\",\r\n                        \"xlink:href\": \"sensor/LT.png\",\r\n                    },\r\n                    bgbox: {\r\n                        height: \"calc(w / 3)\",\r\n                        width: \"calc(w)\",\r\n                        x: \"calc(w/4)\",\r\n                        y: \"-calc(h/3)\",\r\n                        fontSize: 20,\r\n                        fontFamily: \"sans-serif\",\r\n                        fill: \"#cfffdb\",\r\n                        stroke: \"#41e4da\",\r\n                        strokeWidth: 2\r\n                    },\r\n                    value: {\r\n                        text: \"00 ft\",\r\n                        textAnchor: \"middle\",\r\n                        textVerticalAnchor: \"middle\",\r\n                        x: \"calc(w / 1.3)\",\r\n                        y: \"-calc(h/7)\",\r\n                        fontSize: 20,\r\n                        fontFamily: \"sans-serif\",\r\n                        fill: \"#350100\"\r\n\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        preinitialize() {\r\n            this.markup = joint.util.svg/* xml */ `\r\n        <rect @selector=\"body\" />\r\n        <image @selector=\"ima\" />\r\n        <text @selector=\"label\" />\r\n        <rect @selector=\"bgbox\" />\r\n        <text @selector=\"value\" />\r\n    `;\r\n        }\r\n    }\r\n\r\n    class FlowSensor extends joint.dia.Element {\r\n        defaults() {\r\n            return {\r\n                ...super.defaults,\r\n                type: 'FlowSensor',\r\n                position: { x: 10, y: 10 },\r\n                size: { width: 80, height: 80 },\r\n                attrs: {\r\n                    body: {\r\n                        width: \"calc(w)\",\r\n                        height: \"calc(h)\",\r\n                        fill: \"#1C00ff00\",\r\n                        // stroke: \"black\",\r\n                        // strokeWidth: 1\r\n                    },\r\n                    label: {\r\n                        text: \"FT\",\r\n                        textAnchor: \"middle\",\r\n                        textVerticalAnchor: \"middle\",\r\n                        x: \"calc(w + 7)\",\r\n                        y: \"calc(h / 2)\",\r\n                        fontSize: 20,\r\n                        fontFamily: \"sans-serif\",\r\n                        fill: \"#350100\"\r\n                    },\r\n                    ima: {\r\n                        x: 0,\r\n                        y: 0,\r\n                        width: \"calc(w)\",\r\n                        height: \"calc(h)\",\r\n                        \"xlink:href\": \"sensor/FT.png\",\r\n                    },\r\n                    bgbox: {\r\n                        height: \"calc(w / 3)\",\r\n                        width: \"calc(w)\",\r\n                        x: \"calc(w/4)\",\r\n                        y: \"-calc(h/3)\",\r\n                        fontSize: 20,\r\n                        fontFamily: \"sans-serif\",\r\n                        fill: \"#cfffdb\",\r\n                        stroke: \"#41e4da\",\r\n                        strokeWidth: 2\r\n                    },\r\n                    value: {\r\n                        text: \"000 m3\",\r\n                        textAnchor: \"middle\",\r\n                        textVerticalAnchor: \"middle\",\r\n                        x: \"calc(w / 1.3)\",\r\n                        y: \"-calc(h/7)\",\r\n                        fontSize: 20,\r\n                        fontFamily: \"sans-serif\",\r\n                        fill: \"#350100\"\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        preinitialize() {\r\n            this.markup = joint.util.svg/* xml */ `\r\n        <rect @selector=\"body\" />\r\n        <image @selector=\"ima\" />\r\n        <rect @selector=\"bgbox\" />\r\n        <text @selector=\"value\" />\r\n        <text @selector=\"label\" />\r\n    `;\r\n        }\r\n    }\r\n\r\n    class PressureSensor extends joint.dia.Element {\r\n        defaults() {\r\n            return {\r\n                ...super.defaults,\r\n                type: 'PressureSensor',\r\n                position: { x: 10, y: 10 },\r\n                size: { width: 80, height: 80 },\r\n                attrs: {\r\n                    body: {\r\n                        width: \"calc(w)\",\r\n                        height: \"calc(h)\",\r\n                        fill: \"#1C00ff00\",\r\n                        // stroke: \"black\",\r\n                        // strokeWidth: 1\r\n                    },\r\n                    label: {\r\n                        text: \"FT\",\r\n                        textAnchor: \"middle\",\r\n                        textVerticalAnchor: \"middle\",\r\n                        x: \"calc(w + 14)\",\r\n                        y: \"calc(h / 2)\",\r\n                        fontSize: 20,\r\n                        fontFamily: \"sans-serif\",\r\n                        fill: \"#350100\"\r\n                    },\r\n                    ima: {\r\n                        x: 0,\r\n                        y: 0,\r\n                        width: \"calc(w)\",\r\n                        height: \"calc(h)\",\r\n                        \"xlink:href\": \"sensor/PT.png\",\r\n                    },\r\n                    bgbox: {\r\n                        height: \"calc(w / 3)\",\r\n                        width: \"calc(w)\",\r\n                        x: \"calc(w/4)\",\r\n                        y: \"-calc(h/3)\",\r\n                        fontSize: 20,\r\n                        fontFamily: \"sans-serif\",\r\n                        fill: \"#cfffdb\",\r\n                        stroke: \"#41e4da\",\r\n                        strokeWidth: 2\r\n                    },\r\n                    value: {\r\n                        text: \"000 bar\",\r\n                        textAnchor: \"middle\",\r\n                        textVerticalAnchor: \"middle\",\r\n                        x: \"calc(w / 1.3)\",\r\n                        y: \"-calc(h/7)\",\r\n                        fontSize: 20,\r\n                        fontFamily: \"sans-serif\",\r\n                        fill: \"#350100\"\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        preinitialize() {\r\n            this.markup = joint.util.svg/* xml */ `\r\n        <rect @selector=\"body\" />\r\n        <image @selector=\"ima\" />\r\n        <text @selector=\"label\" />\r\n        <rect @selector=\"bgbox\" />\r\n        <text @selector=\"value\" />\r\n    `;\r\n        }\r\n    }\r\n\r\n    class Rectangle extends joint.dia.Element {\r\n        defaults() {\r\n            return {\r\n                ...super.defaults,\r\n                type: 'Rectangle',\r\n                position: { x: 10, y: 10 },\r\n                size: {\r\n                    height: 250,\r\n                    width: 300\r\n                },\r\n                attrs: {\r\n                    body: {\r\n                        width: \"calc(w)\",\r\n                        height: \"calc(h)\",\r\n                        fill: \"#1C00ff00\", // transparent color code\r\n                        // fill: \"red\",\r\n                        stroke: \"black\",\r\n                        strokeWidth: 3,\r\n\r\n                    },\r\n                    ima1: {\r\n                        x: 0,\r\n                        y: 0,\r\n                        width: \"calc(w)\",\r\n                        \"xlink:href\": \"waterFilter/11.png\",\r\n                    },\r\n                    ima2: {\r\n                        x: 0,\r\n                        y: \"calc(.11*h)\",\r\n                        width: \"calc(w)\",\r\n                        \"xlink:href\": \"waterFilter/22.png\",\r\n                    },\r\n                    ima3: {\r\n                        x: 0,\r\n                        y: \"calc(.23*h)\",\r\n                        width: \"calc(w)\",\r\n                        \"xlink:href\": \"waterFilter/33.png\",\r\n                    },\r\n                    ima4: {\r\n                        x: 0,\r\n                        y: \"calc(.5*h)\",\r\n                        width: \"calc(w)\",\r\n                        \"xlink:href\": \"waterFilter/44.png\",\r\n                    },\r\n                    // ima5: {\r\n                    //     x: 0,\r\n                    //     y: \"calc(.5*h)\",\r\n                    //     width: \"calc(w)\",\r\n                    //     \"xlink:href\": \"waterFilter/55.png\",\r\n                    // },\r\n                    ima6: {\r\n                        x: 0,\r\n                        y: \"calc(.55*h)\",\r\n                        width: \"calc(w)\",\r\n                        \"xlink:href\": \"waterFilter/66.png\",\r\n                    },\r\n                    ima7: {\r\n                        x: 0,\r\n                        y: \"calc(.4*h)\",\r\n                        width: \"calc(w)\",\r\n                        \"xlink:href\": \"waterFilter/77.png\",\r\n                    },\r\n                    ima8: {\r\n                        x: 0,\r\n                        y: \"calc(.715*h)\",\r\n                        width: \"calc(w)\",\r\n                        \"xlink:href\": \"waterFilter/77.png\",\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        preinitialize() {\r\n            this.markup = joint.util.svg/* xml */ `\r\n        <rect @selector=\"body\" />\r\n        <image @selector=\"ima8\" />\r\n        <image @selector=\"ima7\" />\r\n        <image @selector=\"ima5\" />\r\n        <image @selector=\"ima6\" />\r\n        <image @selector=\"ima4\" />\r\n        <image @selector=\"ima3\" />\r\n        <image @selector=\"ima2\" />\r\n        <image @selector=\"ima1\" />\r\n        \r\n    `;\r\n        }\r\n    }\r\n\r\n    const namespace = {\r\n        ...shapes,\r\n        Zone,\r\n        Pipe,\r\n        PipeView,\r\n        LiquidTank,\r\n        ConicTank,\r\n        Panel,\r\n        PanelView,\r\n        Pump,\r\n        PumpView,\r\n        ControlValve,\r\n        ControlValveView,\r\n        HandValve,\r\n        Join\r\n    };\r\n\r\n    const graph = new dia.Graph(\r\n        {},\r\n        {\r\n            cellNamespace: namespace\r\n        }\r\n    );\r\n\r\n    const paper = new dia.Paper({\r\n        model: graph,\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        async: true,\r\n        frozen: true,\r\n        sorting: dia.Paper.sorting.APPROX,\r\n        background: { color: \"#F3F7F6\" },\r\n        interactive: {\r\n            linkMove: false,\r\n            stopDelegation: false,\r\n            elementMove: false // Disable interactions\r\n\r\n        },\r\n        cellViewNamespace: namespace,\r\n        defaultAnchor: {\r\n            name: \"perpendicular\"\r\n        }\r\n    });\r\n\r\n    paperContainerEl.appendChild(paper.el);\r\n\r\n    // sensors\r\n    const levelSensor1 = new LevelSensor({\r\n        position: { x: 170, y: 115 },\r\n        attrs: {\r\n            label: {\r\n                text: \"LT-1\"\r\n            }\r\n        }\r\n    });\r\n    levelSensor1.addTo(graph);\r\n\r\n    const levelSensor2 = new LevelSensor({\r\n        position: { x: 620, y: 115 },\r\n        attrs: {\r\n            label: {\r\n                text: \"LT-2\"\r\n            }\r\n        }\r\n    });\r\n    levelSensor2.addTo(graph);\r\n\r\n    const levelSensor3 = new LevelSensor({\r\n        position: { x: 790, y: 115 },\r\n        attrs: {\r\n            label: {\r\n                text: \"LT-3\"\r\n            }\r\n        }\r\n    });\r\n    levelSensor3.addTo(graph);\r\n\r\n    const levelSensor4 = new LevelSensor({\r\n        position: { x: 1240, y: 115 },\r\n        attrs: {\r\n            label: {\r\n                text: \"LT-4\"\r\n            }\r\n        }\r\n    });\r\n    levelSensor4.addTo(graph);\r\n\r\n    const levelSensor5 = new LevelSensor({\r\n        position: { x: 1730, y: 50 },\r\n        attrs: {\r\n            label: {\r\n                text: \"LT-5\"\r\n            }\r\n        }\r\n    });\r\n    levelSensor5.addTo(graph);\r\n\r\n    const levelSensor6 = new LevelSensor({\r\n        position: { x: 230, y: 820 },\r\n        attrs: {\r\n            label: {\r\n                text: \"LT-6\"\r\n            }\r\n        }\r\n    });\r\n    levelSensor6.addTo(graph);\r\n\r\n    const flowSensor1 = new FlowSensor({\r\n        position: { x: 1340, y: 595 },\r\n        attrs: {\r\n            label: {\r\n                text: \"FT-1\"\r\n            },\r\n            // value: {\r\n            //     text: \"samir\"\r\n            // }\r\n        }\r\n    });\r\n    flowSensor1.addTo(graph);\r\n    // flowSensor1.attr('value/text', \"gogle\")\r\n\r\n    const flowSensor2 = new FlowSensor({\r\n        position: { x: 1440, y: 895 },\r\n        attrs: {\r\n            label: {\r\n                text: \"FT-2\"\r\n            }\r\n        }\r\n    });\r\n    flowSensor2.addTo(graph);\r\n\r\n    const flowSensor3 = new FlowSensor({\r\n        position: { x: 1780, y: 540 },\r\n        attrs: {\r\n            label: {\r\n                text: \"FT-3\"\r\n            }\r\n        }\r\n    });\r\n    flowSensor3.addTo(graph);\r\n\r\n    const pressureSensor1 = new PressureSensor({\r\n        position: { x: 930, y: 740 },\r\n        attrs: {\r\n            label: {\r\n                text: \"PT-1\"\r\n            }\r\n        }\r\n    });\r\n    pressureSensor1.addTo(graph);\r\n\r\n    const pressureSensor2 = new PressureSensor({\r\n        position: { x: 930, y: 890 },\r\n        attrs: {\r\n            label: {\r\n                text: \"PT-2\"\r\n            }\r\n        }\r\n    });\r\n    pressureSensor2.addTo(graph);\r\n\r\n    const pressureSensor3 = new PressureSensor({\r\n        position: { x: 930, y: 1040 },\r\n        attrs: {\r\n            label: {\r\n                text: \"PT-3\"\r\n            }\r\n        }\r\n    });\r\n    pressureSensor3.addTo(graph);\r\n\r\n    // water stations \r\n    const station1 = new WaterStation({\r\n        position: { x: 380, y: 50 },\r\n        // power: 1,\r\n        attrs: {\r\n            label: {\r\n                text: \"From Pump\\nStation-1\"\r\n            }\r\n        }\r\n    });\r\n    station1.addTo(graph);\r\n\r\n    const station2 = new WaterStation({\r\n        position: { x: 1000, y: 50 },\r\n        // power: 0,\r\n        attrs: {\r\n            label: {\r\n                text: \"From Pump\\nStation-2\"\r\n            }\r\n        }\r\n    });\r\n    station2.addTo(graph);\r\n\r\n    // filters\r\n    const filter1 = new Rectangle({\r\n        position: { x: 150, y: 200 },\r\n    });\r\n    filter1.addTo(graph);\r\n\r\n    const filter2 = new Rectangle({\r\n        position: { x: 460, y: 200 },\r\n    });\r\n    filter2.addTo(graph);\r\n\r\n    const filter3 = new Rectangle({\r\n        position: { x: 770, y: 200 },\r\n    });\r\n    filter3.addTo(graph);\r\n\r\n    const filter4 = new Rectangle({\r\n        position: { x: 1080, y: 200 },\r\n    });\r\n    filter4.addTo(graph);\r\n\r\n    // Tanks\r\n\r\n    const tank1 = new LiquidTank({\r\n        position: { x: 50, y: 250 }\r\n    });\r\n    const panel1 = new Panel({\r\n        position: { x: 70, y: 300 }\r\n    });\r\n\r\n    const reservoir = new ReservoirTank({\r\n        position: { x: 50, y: 900 },\r\n        size: { width: 500, height: 300 },\r\n        attrs: {\r\n            label: {\r\n                text: \"Clean Water\\nReservoir\",\r\n                fontSize: 20\r\n            }\r\n        }\r\n    });\r\n    reservoir.addTo(graph);\r\n\r\n    const overhead_tank = new ConicTank({\r\n        position: { x: 1600, y: 130 },\r\n        size: { width: 350, height: 200 },\r\n        attrs: {\r\n            label: {\r\n                text: \"Overhead Tank\",\r\n                y: \"calc(h/2+20)\",\r\n                fontSize: 20\r\n            }\r\n        }\r\n    });\r\n    overhead_tank.addTo(graph);\r\n    // When the tank level changes, update the panel level and color.\r\n    panel1.listenTo(tank1, \"change:level\", (_, level) => {\r\n        const color =\r\n            level > 80\r\n                ? MAX_LIQUID_COLOR\r\n                : level < 20\r\n                    ? MIN_LIQUID_COLOR\r\n                    : LIQUID_COLOR;\r\n        panel1.set({ level, color });\r\n    });\r\n\r\n    // tank1.addTo(graph);\r\n    // panel1.addTo(graph);\r\n    tank1.embed(panel1);\r\n\r\n    // Tank 2\r\n\r\n    const tank2 = new ConicTank({\r\n        position: { x: 820, y: 200 }\r\n    });\r\n\r\n    // tank2.addTo(graph);\r\n\r\n    // Pumps\r\n\r\n    const pump1 = new Pump({\r\n        position: { x: 750, y: 800 },\r\n        attrs: {\r\n            label: {\r\n                text: \"Pump 1\",\r\n                y: -20,\r\n            }\r\n        }\r\n    });\r\n\r\n    pump1.addTo(graph);\r\n    pump1.power = 0;\r\n\r\n    const pump2 = new Pump({\r\n        position: { x: 750, y: 950 },\r\n        attrs: {\r\n            label: {\r\n                text: \"Pump 2\",\r\n                y: -20,\r\n            }\r\n        }\r\n    });\r\n\r\n    pump2.addTo(graph);\r\n    pump2.power = 0;\r\n\r\n    const pump3 = new Pump({\r\n        position: { x: 750, y: 1100 },\r\n        attrs: {\r\n            label: {\r\n                text: \"Pump 3\",\r\n                y: -20,\r\n            }\r\n        }\r\n    });\r\n\r\n    pump3.addTo(graph);\r\n    pump3.power = 0;\r\n\r\n\r\n\r\n    // CTRL Valves\r\n\r\n    const controlValve1 = new ControlValve({\r\n        position: { x: 300, y: 295 },\r\n        open: 1,\r\n        attrs: {\r\n            label: {\r\n                text: \"CTRL Valve 1\"\r\n            }\r\n        }\r\n    });\r\n\r\n    // controlValve1.addTo(graph);\r\n\r\n    const controlValve2 = new ControlValve({\r\n        position: { x: 300, y: 495 },\r\n        open: 0.25,\r\n        attrs: {\r\n            label: {\r\n                text: \"CTRL Valve 2\"\r\n            }\r\n        }\r\n    });\r\n\r\n    // controlValve2.addTo(graph);\r\n\r\n    // Zones\r\n\r\n    const zone1 = new Zone({\r\n        position: { x: 50, y: 800 },\r\n        // angle: 270,\r\n        attrs: {\r\n            label: {\r\n                text: \"Zone 1\"\r\n            },\r\n            body: {\r\n                transform: \"translate(140, 40) rotate(180)\"\r\n            }\r\n        }\r\n    });\r\n\r\n    const zone2 = new Zone({\r\n        position: { x: 1830, y: 600 },\r\n        attrs: {\r\n            label: {\r\n                text: \"To Consumer\"\r\n            }\r\n        }\r\n    });\r\n\r\n    const zone3 = new Zone({\r\n        position: { x: 50, y: 740 },\r\n        attrs: {\r\n            label: {\r\n                text: \"To Drain\"\r\n            },\r\n            body: {\r\n                transform: \"translate(140, 40) rotate(180)\"\r\n            }\r\n        }\r\n    });\r\n\r\n    graph.addCells([zone2, zone3]);\r\n\r\n    // Hand Valves\r\n\r\n    const handValve1 = new HandValve({\r\n        position: { x: 1100, y: 800 },\r\n        open: 1,\r\n        angle: 0,\r\n        attrs: {\r\n            label: {\r\n                text: \"Valve 1\"\r\n            }\r\n        }\r\n    });\r\n\r\n    handValve1.addTo(graph);\r\n\r\n    const handValve2 = new HandValve({\r\n        position: { x: 1100, y: 950 },\r\n        open: 0,\r\n        angle: 0,\r\n        attrs: {\r\n            label: {\r\n                text: \"Valve 2\"\r\n            }\r\n        }\r\n    });\r\n\r\n    handValve2.addTo(graph);\r\n\r\n    const handValve3 = new HandValve({\r\n        position: { x: 1100, y: 1100 },\r\n        open: 0,\r\n        angle: 0,\r\n        attrs: {\r\n            label: {\r\n                text: \"Valve 3\"\r\n            }\r\n        }\r\n    });\r\n    handValve3.addTo(graph);\r\n\r\n    const handValve4 = new HandValve({\r\n        position: { x: 1370, y: 950 },\r\n        open: 1,\r\n        angle: 0,\r\n        attrs: {\r\n            label: {\r\n                text: \"Valve4\"\r\n            }\r\n        }\r\n    });\r\n    handValve4.addTo(graph);\r\n\r\n    const handValve5 = new HandValve({\r\n        position: { x: 1440, y: 650 },\r\n        open: 0,\r\n        angle: 0,\r\n        attrs: {\r\n            label: {\r\n                text: \"Valve 5\"\r\n            }\r\n        }\r\n    });\r\n    handValve5.addTo(graph);\r\n\r\n    const handValve6 = new HandValve({\r\n        position: { x: 1205, y: 520 },\r\n        open: 1,\r\n        angle: 270,\r\n        attrs: {\r\n            label: {\r\n                text: \"Valve 6\"\r\n            }\r\n        }\r\n    });\r\n    handValve6.addTo(graph);\r\n\r\n    const handValve7 = new HandValve({\r\n        position: { x: 895, y: 520 },\r\n        open: 1,\r\n        angle: 270,\r\n        attrs: {\r\n            label: {\r\n                text: \"Valve 7\"\r\n            }\r\n        }\r\n    });\r\n    handValve7.addTo(graph);\r\n\r\n    const handValve8 = new HandValve({\r\n        position: { x: 585, y: 520 },\r\n        open: 0,\r\n        angle: 270,\r\n        attrs: {\r\n            label: {\r\n                text: \"Valve 8\"\r\n            }\r\n        }\r\n    });\r\n    handValve8.addTo(graph);\r\n\r\n    const handValve9 = new HandValve({\r\n        position: { x: 275, y: 520 },\r\n        open: 0,\r\n        angle: 270,\r\n        attrs: {\r\n            label: {\r\n                text: \"Valve 9\"\r\n            }\r\n        }\r\n    });\r\n    handValve9.addTo(graph);\r\n\r\n    const handValve10 = new HandValve({\r\n        position: { x: 185, y: 620 },\r\n        open: 1,\r\n        angle: 270,\r\n        attrs: {\r\n            label: {\r\n                text: \"Valve 10\"\r\n            }\r\n        }\r\n    });\r\n    handValve10.addTo(graph);\r\n\r\n    const handValve11 = new HandValve({\r\n        position: { x: 390, y: 760 },\r\n        open: 1,\r\n        angle: 270,\r\n        attrs: {\r\n            label: {\r\n                text: \"Valve 11\"\r\n            }\r\n        }\r\n    });\r\n    handValve11.addTo(graph);\r\n\r\n    // Joins\r\n\r\n    const join1 = new Join({\r\n        position: { x: 640, y: 860 }\r\n    });\r\n\r\n    join1.addTo(graph);\r\n\r\n    const join2 = new Join({\r\n        position: { x: 640, y: 1010 }\r\n    });\r\n\r\n    join2.addTo(graph);\r\n\r\n    const join3 = new Join({\r\n        position: { x: 640, y: 1160 }\r\n    });\r\n\r\n    join3.addTo(graph);\r\n\r\n    const join4 = new Join({\r\n        position: { x: 1260, y: 960 }\r\n    });\r\n\r\n    join4.addTo(graph);\r\n\r\n    const join5 = new Join({\r\n        position: { x: 1215, y: 660 }\r\n    });\r\n    join5.addTo(graph);\r\n\r\n    const join6 = new Join({\r\n        position: { x: 905, y: 660 }\r\n    });\r\n    join6.addTo(graph);\r\n\r\n    const join7 = new Join({\r\n        position: { x: 595, y: 660 }\r\n    });\r\n    join7.addTo(graph);\r\n\r\n    const join8 = new Join({\r\n        position: { x: 285, y: 660 }\r\n    });\r\n    join8.addTo(graph);\r\n\r\n    const join9 = new Join({\r\n        position: { x: 400, y: 620 }\r\n    });\r\n    join9.addTo(graph);\r\n\r\n    const join10 = new Join({\r\n        position: { x: 700, y: 620 }\r\n    });\r\n    join10.addTo(graph);\r\n\r\n    const join11 = new Join({\r\n        position: { x: 1000, y: 620 }\r\n    });\r\n    join11.addTo(graph);\r\n\r\n    const join12 = new Join({\r\n        position: { x: 1300, y: 620 }\r\n    });\r\n    join12.addTo(graph);\r\n\r\n    const join13 = new Join({\r\n        position: { x: 440, y: 620 }\r\n    });\r\n    // join13.addTo(graph);\r\n\r\n    const join14 = new Join({\r\n        position: { x: 440, y: 140 }\r\n    });\r\n    join14.addTo(graph);\r\n\r\n    const join15 = new Join({\r\n        position: { x: 1060, y: 140 }\r\n    });\r\n    join15.addTo(graph);\r\n\r\n    // Pipes\r\n\r\n    const tank1Pipe1 = new Pipe({\r\n        source: {\r\n            id: tank1.id,\r\n            anchor: { name: \"right\", args: { dy: -25 } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: controlValve1.id,\r\n            port: \"left\",\r\n            anchor: { name: \"left\" }\r\n        }\r\n    });\r\n\r\n    // tank1Pipe1.addTo(graph);\r\n\r\n    const reservoirToJoin3 = new Pipe({\r\n        source: {\r\n            id: reservoir.id,\r\n            anchor: { name: \"bottomRight\", args: { dy: -25 } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: join3.id,\r\n            port: \"left\",\r\n            anchor: { name: \"left\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n\r\n    reservoirToJoin3.addTo(graph);\r\n\r\n    const tank2Pipe1 = new Pipe({\r\n        source: {\r\n            id: tank2.id,\r\n            selector: \"bottom\",\r\n            anchor: { name: \"bottom\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: handValve1.id,\r\n            port: \"right\",\r\n            anchor: { name: \"right\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n\r\n    // tank2Pipe1.addTo(graph);\r\n\r\n    const ctrlValve1Pipe1 = new Pipe({\r\n        source: { id: controlValve1.id, port: \"right\", anchor: { name: \"right\" } },\r\n        target: { id: pump1.id, port: \"left\", anchor: { name: \"left\" } }\r\n    });\r\n\r\n    // ctrlValve1Pipe1.addTo(graph);\r\n\r\n    const valve2Pipe1 = new Pipe({\r\n        source: {\r\n            id: handValve2.id,\r\n            port: \"right\",\r\n            anchor: { name: \"right\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: join1.id,\r\n            anchor: { name: \"top\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n\r\n    // valve2Pipe1.addTo(graph);\r\n\r\n    const valve1Pipe1 = new Pipe({\r\n        source: {\r\n            id: handValve1.id,\r\n            port: \"left\",\r\n            anchor: { name: \"left\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: join2.id,\r\n            anchor: { name: \"top\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n\r\n    // valve1Pipe1.addTo(graph);\r\n\r\n    const join1toPump1 = new Pipe({\r\n        source: {\r\n            id: join1.id,\r\n            port: \"right\",\r\n            anchor: { name: \"right\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: pump1.id,\r\n            port: \"left\",\r\n            anchor: { name: \"left\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    join1toPump1.addTo(graph);\r\n\r\n    const pump1Valve1 = new Pipe({\r\n        source: {\r\n            id: pump1.id,\r\n            port: \"right\",\r\n            anchor: { name: \"right\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: handValve1.id,\r\n            port: \"left\",\r\n            anchor: { name: \"left\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    pump1Valve1.addTo(graph);\r\n\r\n    const valve1Join4 = new Pipe({\r\n        source: {\r\n            id: handValve1.id,\r\n            port: \"right\",\r\n            anchor: { name: \"right\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: join4.id,\r\n            port: \"top\",\r\n            anchor: { name: \"top\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    valve1Join4.addTo(graph);\r\n\r\n\r\n    const valve3Pipe1 = new Pipe({\r\n        source: {\r\n            id: handValve3.id,\r\n            port: \"right\",\r\n            anchor: { name: \"right\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: join1.id,\r\n            anchor: { name: \"left\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n\r\n    // valve3Pipe1.addTo(graph);\r\n\r\n    const join2ToPump2 = new Pipe({\r\n        source: {\r\n            id: join2.id,\r\n            port: \"right\",\r\n            anchor: { name: \"right\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: pump2.id,\r\n            port: \"left\",\r\n            anchor: { name: \"left\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    join2ToPump2.addTo(graph);\r\n\r\n    const pump2Valve2 = new Pipe({\r\n        source: {\r\n            id: pump2.id,\r\n            port: \"right\",\r\n            anchor: { name: \"right\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: handValve2.id,\r\n            port: \"left\",\r\n            anchor: { name: \"left\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    pump2Valve2.addTo(graph);\r\n\r\n    const valve2Join4 = new Pipe({\r\n        source: {\r\n            id: handValve2.id,\r\n            port: \"right\",\r\n            anchor: { name: \"right\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: join4.id,\r\n            port: \"left\",\r\n            anchor: { name: \"left\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    valve2Join4.addTo(graph);\r\n\r\n    const join3ToPump3 = new Pipe({\r\n        source: {\r\n            id: join3.id,\r\n            port: \"right\",\r\n            anchor: { name: \"right\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: pump3.id,\r\n            port: \"left\",\r\n            anchor: { name: \"left\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    join3ToPump3.addTo(graph);\r\n\r\n    const pump3Valve3 = new Pipe({\r\n        source: {\r\n            id: pump3.id,\r\n            port: \"right\",\r\n            anchor: { name: \"right\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: handValve3.id,\r\n            port: \"left\",\r\n            anchor: { name: \"left\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    pump3Valve3.addTo(graph);\r\n\r\n    const valve3join4 = new Pipe({\r\n        source: {\r\n            id: handValve3.id,\r\n            port: \"right\",\r\n            anchor: { name: \"right\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: join4.id,\r\n            port: \"bottom\",\r\n            anchor: { name: \"bottom\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    valve3join4.addTo(graph);\r\n\r\n    const join4Valve4 = new Pipe({\r\n        source: {\r\n            id: join4.id,\r\n            port: \"right\",\r\n            anchor: { name: \"right\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: handValve4.id,\r\n            port: \"left\",\r\n            anchor: { name: \"left\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    join4Valve4.addTo(graph);\r\n\r\n    const valve4OverheadTank = new Pipe({\r\n        source: {\r\n            id: handValve4.id,\r\n            port: \"right\",\r\n            anchor: { name: \"right\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: overhead_tank.id,\r\n            port: \"top\",\r\n            anchor: { name: \"top\", args: { rotate: true, dx: -90 } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    valve4OverheadTank.addTo(graph);\r\n    valve4OverheadTank.router('orthogonal');\r\n    valve4OverheadTank.connector('rounded');\r\n    valve4OverheadTank.vertices([\r\n        new g.Point(1580, 950),\r\n        new g.Point(1600, 50),\r\n        // new g.Point(1800, 200)\r\n    ]);\r\n\r\n    const ctrlValve2Pipe1 = new Pipe({\r\n        source: { id: controlValve2.id, port: \"right\", anchor: { name: \"right\" } },\r\n        target: {\r\n            id: pump2.id,\r\n            port: \"left\",\r\n            anchor: { name: \"left\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n\r\n    // ctrlValve2Pipe1.addTo(graph);\r\n\r\n    const zone1Pipe1 = new Pipe({\r\n        source: {\r\n            id: zone1.id,\r\n            port: \"left\",\r\n            anchor: { name: \"left\", args: { rotate: true, dx: 10 } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: tank1.id,\r\n            anchor: { name: \"bottomLeft\", args: { dy: -30 } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n\r\n    // zone1Pipe1.addTo(graph);\r\n\r\n    const join1Pipe1 = new Pipe({\r\n        source: {\r\n            id: join1.id,\r\n            anchor: { name: \"bottom\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: join2.id,\r\n            anchor: { name: \"left\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n\r\n    // join1Pipe1.addTo(graph);\r\n\r\n    const join2Pipe1 = new Pipe({\r\n        source: {\r\n            id: join2.id,\r\n            anchor: { name: \"right\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: zone2.id,\r\n            anchor: { name: \"left\", args: { dx: 10 } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n\r\n    // join2Pipe1.addTo(graph);\r\n\r\n    const join2ToJoin1 = new Pipe({\r\n        source: {\r\n            id: join2.id,\r\n            anchor: { name: \"top\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: join1.id,\r\n            anchor: { name: \"bottom\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    join2ToJoin1.addTo(graph);\r\n\r\n    const join3ToJoin2 = new Pipe({\r\n        source: {\r\n            id: join3.id,\r\n            anchor: { name: \"top\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: join2.id,\r\n            anchor: { name: \"bottom\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    join3ToJoin2.addTo(graph);\r\n\r\n    const overhead_tankZone2 = new Pipe({\r\n        source: {\r\n            id: overhead_tank.id,\r\n            anchor: { name: \"bottom\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: zone2.id,\r\n            anchor: { name: \"left\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    overhead_tankZone2.addTo(graph);\r\n\r\n    const overheadToValve5 = new Pipe({\r\n        source: {\r\n            id: overhead_tank.id,\r\n            anchor: { name: \"bottom\", args: { dx: -80 } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: handValve5.id,\r\n            anchor: { name: \"right\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    overheadToValve5.connector('jumpover', { size: 20 });\r\n    overheadToValve5.addTo(graph);\r\n\r\n    const valve5ToJoin5 = new Pipe({\r\n        source: {\r\n            id: handValve5.id,\r\n            anchor: { name: \"left\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: join5.id,\r\n            anchor: { name: \"right\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    valve5ToJoin5.addTo(graph);\r\n\r\n    const join5ToValve6 = new Pipe({\r\n        source: {\r\n            id: join5.id,\r\n            anchor: { name: \"top\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: handValve6.id,\r\n            anchor: { name: \"left\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    join5ToValve6.addTo(graph);\r\n\r\n    const join5ToJoin6 = new Pipe({\r\n        source: {\r\n            id: join5.id,\r\n            anchor: { name: \"left\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: join6.id,\r\n            anchor: { name: \"right\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    join5ToJoin6.addTo(graph);\r\n\r\n    const join6ToValve7 = new Pipe({\r\n        source: {\r\n            id: join6.id,\r\n            anchor: { name: \"top\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: handValve7.id,\r\n            anchor: { name: \"left\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    join6ToValve7.addTo(graph);\r\n\r\n    const join6ToJoin7 = new Pipe({\r\n        source: {\r\n            id: join6.id,\r\n            anchor: { name: \"left\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: join7.id,\r\n            anchor: { name: \"right\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    join6ToJoin7.addTo(graph);\r\n\r\n    const join7ToValve8 = new Pipe({\r\n        source: {\r\n            id: join7.id,\r\n            anchor: { name: \"top\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: handValve8.id,\r\n            anchor: { name: \"left\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    join7ToValve8.addTo(graph);\r\n\r\n    const join7ToJoin8 = new Pipe({\r\n        source: {\r\n            id: join7.id,\r\n            anchor: { name: \"left\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: join8.id,\r\n            anchor: { name: \"right\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    join7ToJoin8.addTo(graph);\r\n\r\n    const join8ToValve9 = new Pipe({\r\n        source: {\r\n            id: join8.id,\r\n            anchor: { name: \"top\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: handValve9.id,\r\n            anchor: { name: \"left\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    join8ToValve9.addTo(graph);\r\n\r\n    const valve9ToFilter1 = new Pipe({\r\n        source: {\r\n            id: handValve9.id,\r\n            anchor: { name: \"top\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: filter1.id,\r\n            anchor: { name: \"bottom\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    valve9ToFilter1.addTo(graph);\r\n\r\n    const valve8ToFilter2 = new Pipe({\r\n        source: {\r\n            id: handValve8.id,\r\n            anchor: { name: \"top\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: filter2.id,\r\n            anchor: { name: \"bottom\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    valve8ToFilter2.addTo(graph);\r\n\r\n    const valve7ToFilter3 = new Pipe({\r\n        source: {\r\n            id: handValve7.id,\r\n            anchor: { name: \"top\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: filter3.id,\r\n            anchor: { name: \"bottom\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    valve7ToFilter3.addTo(graph);\r\n\r\n    const valve6ToFilter4 = new Pipe({\r\n        source: {\r\n            id: handValve6.id,\r\n            anchor: { name: \"top\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: filter4.id,\r\n            anchor: { name: \"bottom\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    valve6ToFilter4.addTo(graph);\r\n\r\n    const filter1ToJoin9 = new Pipe({\r\n        source: {\r\n            id: filter1.id,\r\n            anchor: { name: \"bottom\", args: { dx: 115 } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: join9.id,\r\n            anchor: { name: \"top\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    filter1ToJoin9.addTo(graph);\r\n\r\n    const filter2ToJoin10 = new Pipe({\r\n        source: {\r\n            id: filter2.id,\r\n            anchor: { name: \"bottom\", args: { dx: 105 } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: join10.id,\r\n            anchor: { name: \"top\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    filter2ToJoin10.addTo(graph)\r\n\r\n    const filter3ToJoin11 = new Pipe({\r\n        source: {\r\n            id: filter3.id,\r\n            anchor: { name: \"bottom\", args: { dx: 95 } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: join11.id,\r\n            anchor: { name: \"top\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    filter3ToJoin11.addTo(graph);\r\n\r\n    const filter4ToJoin12 = new Pipe({\r\n        source: {\r\n            id: filter4.id,\r\n            anchor: { name: \"bottom\", args: { dx: 85 } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: join12.id,\r\n            anchor: { name: \"top\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    filter4ToJoin12.addTo(graph);\r\n\r\n    const join12ToJoin11 = new Pipe({\r\n        source: {\r\n            id: join12.id,\r\n            anchor: { name: \"left\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: join11.id,\r\n            anchor: { name: \"right\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    join12ToJoin11.connector('jumpover', { size: 20 });\r\n    join12ToJoin11.addTo(graph);\r\n\r\n    const join11ToJoin10 = new Pipe({\r\n        source: {\r\n            id: join11.id,\r\n            anchor: { name: \"left\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: join10.id,\r\n            anchor: { name: \"right\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    join11ToJoin10.addTo(graph);\r\n    join11ToJoin10.connector('jumpover', { size: 20 });\r\n\r\n    const join10ToJoin9 = new Pipe({\r\n        source: {\r\n            id: join10.id,\r\n            anchor: { name: \"left\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: join9.id,\r\n            anchor: { name: \"right\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    join10ToJoin9.connector('jumpover', { size: 20 });\r\n    join10ToJoin9.addTo(graph);\r\n\r\n\r\n    const join9ToJoin13 = new Pipe({\r\n        source: {\r\n            id: join9.id,\r\n            anchor: { name: \"right\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: join13.id,\r\n            anchor: { name: \"left\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    // join9ToJoin13.addTo(graph);\r\n\r\n    const join9ToValve11 = new Pipe({\r\n        source: {\r\n            id: join9.id,\r\n            anchor: { name: \"bottom\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: handValve11.id,\r\n            anchor: { name: \"right\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    join9ToValve11.connector('jumpover', { size: 10 });\r\n    join9ToValve11.addTo(graph);\r\n\r\n    const valve11ToReservoirTank = new Pipe({\r\n        source: {\r\n            id: handValve11.id,\r\n            anchor: { name: \"bottom\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: reservoir.id,\r\n            anchor: { name: \"top\", args: { rotate: true, dx: 115 } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    valve11ToReservoirTank.addTo(graph);\r\n\r\n    const filter1ToValve10 = new Pipe({\r\n        attrs: {\r\n            liquid: {\r\n                stroke: \"#a97a4f\"\r\n            }\r\n        },\r\n        source: {\r\n            id: filter1.id,\r\n            anchor: { name: \"bottom\", args: { dx: -90 } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: handValve10.id,\r\n            anchor: { name: \"right\", args: { rotate: true } },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    filter1ToValve10.addTo(graph);\r\n\r\n    const valve10ToZone3 = new Pipe({\r\n        attrs: {\r\n            liquid: {\r\n                stroke: \"#a97a4f\"\r\n            }\r\n        },\r\n        source: {\r\n            id: handValve10.id,\r\n            anchor: { name: \"bottom\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: zone3.id,\r\n            anchor: { name: \"right\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    valve10ToZone3.addTo(graph);\r\n\r\n    const join14ToFilter1 = new Pipe({\r\n        attrs: {\r\n            liquid: {\r\n                stroke: IMPURE_WATER_COLOR\r\n            }\r\n        },\r\n        source: {\r\n            id: join14.id,\r\n            anchor: { name: \"left\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: filter1.id,\r\n            anchor: { name: \"top\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    join14ToFilter1.addTo(graph);\r\n\r\n    const join14ToFilter2 = new Pipe({\r\n        attrs: {\r\n            liquid: {\r\n                stroke: IMPURE_WATER_COLOR\r\n            }\r\n        },\r\n        source: {\r\n            id: join14.id,\r\n            anchor: { name: \"right\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: filter2.id,\r\n            anchor: { name: \"top\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    join14ToFilter2.addTo(graph);\r\n\r\n    const join15ToFilter3 = new Pipe({\r\n        attrs: {\r\n            liquid: {\r\n                stroke: IMPURE_WATER_COLOR\r\n            }\r\n        },\r\n        source: {\r\n            id: join15.id,\r\n            anchor: { name: \"left\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: filter3.id,\r\n            anchor: { name: \"top\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    join15ToFilter3.addTo(graph);\r\n\r\n    const join15ToFilter4 = new Pipe({\r\n        attrs: {\r\n            liquid: {\r\n                stroke: IMPURE_WATER_COLOR\r\n            }\r\n        },\r\n        source: {\r\n            id: join15.id,\r\n            anchor: { name: \"right\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: filter4.id,\r\n            anchor: { name: \"top\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    join15ToFilter4.addTo(graph);\r\n\r\n    const station1Tojoin14 = new Pipe({\r\n        attrs: {\r\n            liquid: {\r\n                stroke: IMPURE_WATER_COLOR\r\n            }\r\n        },\r\n        source: {\r\n            id: station1.id,\r\n            anchor: { name: \"bottom\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: join14.id,\r\n            anchor: { name: \"top\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    station1Tojoin14.addTo(graph);\r\n\r\n    const station2Tojoin15 = new Pipe({\r\n        attrs: {\r\n            liquid: {\r\n                stroke: IMPURE_WATER_COLOR\r\n            }\r\n        },\r\n        source: {\r\n            id: station2.id,\r\n            anchor: { name: \"bottom\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        },\r\n        target: {\r\n            id: join15.id,\r\n            anchor: { name: \"top\" },\r\n            connectionPoint: { name: \"anchor\" }\r\n        }\r\n    });\r\n    station2Tojoin15.addTo(graph);\r\n\r\n    // Charts\r\n\r\n    const maxPoints = 10;\r\n    const tankChart = new shapes.chart.Plot({\r\n        position: { x: 50, y: 50 },\r\n        size: { width: 400, height: 200 },\r\n        series: [\r\n            {\r\n                name: \"level\",\r\n                interpolate: \"linear\",\r\n                showLegend: false,\r\n                fillPadding: { top: 10 },\r\n                data: Array.from({ length: maxPoints }).map((_, i) => ({\r\n                    x: i,\r\n                    y: START_LIQUID\r\n                }))\r\n            },\r\n        ],\r\n        axis: {\r\n            \"y-axis\": {\r\n                min: 0,\r\n                max: 100,\r\n                ticks: 10\r\n            },\r\n            \"x-axis\": {\r\n                tickFormat: function (t) {\r\n                    const d = new Date(t * 1000);\r\n                    return (\r\n                        d.getMinutes().toString().padStart(2, \"0\") +\r\n                        \":\" +\r\n                        d.getSeconds().toString().padStart(2, \"0\")\r\n                    );\r\n                }\r\n            }\r\n        },\r\n        padding: 0,\r\n        markings: [\r\n            {\r\n                name: \"max\",\r\n                start: { y: 80 }\r\n            },\r\n            {\r\n                name: \"min\",\r\n                end: { y: 20 }\r\n            }\r\n        ],\r\n        // Historically, the chart shapes are defined without camel-cased attributes\r\n        attrs: {\r\n            \".\": {\r\n                \"font-family\": \"sans-serif\"\r\n            },\r\n            \".level path\": {\r\n                stroke: \"#0075f2\",\r\n                \"stroke-width\": 1,\r\n                \"stroke-opacity\": \"0.8\",\r\n                fill: \"#0075f2\",\r\n                \"fill-opacity\": \"0.3\"\r\n            },\r\n            \".marking.max rect\": {\r\n                fill: MAX_LIQUID_COLOR,\r\n                height: 3\r\n            },\r\n            \".marking.min rect\": {\r\n                fill: MIN_LIQUID_COLOR,\r\n                height: 3\r\n            },\r\n            \".point circle\": {\r\n                fill: \"#0075f2\",\r\n                stroke: \"none\",\r\n                opacity: 1\r\n            },\r\n            \".y-axis > path, .x-axis > path\": {\r\n                stroke: \"#131e29\",\r\n                \"stroke-width\": 2\r\n            },\r\n            \".background rect\": {\r\n                fill: \"#999\",\r\n                \"fill-opacity\": \"0.1\"\r\n            }\r\n        }\r\n    });\r\n    // tankChart.addTo(graph);\r\n\r\n    const tankChartLink = new shapes.standard.Link({\r\n        source: { id: tankChart.id },\r\n        target: { id: tank1.id },\r\n        attrs: {\r\n            line: {\r\n                strokeDasharray: \"5 5\",\r\n                targetMarker: null,\r\n                stroke: \"#aaa\"\r\n            }\r\n        }\r\n    });\r\n\r\n    // tankChartLink.addTo(graph);\r\n\r\n    const gauge1 = new shapes.chart.Knob({\r\n        position: { x: 380, y: 100 },\r\n        size: { width: 120, height: 120 },\r\n        min: 0,\r\n        max: 10,\r\n        step: 0.1,\r\n        value: 1,\r\n        fill: PRESSURE_COLOR,\r\n        // Historically, the chart shapes are defined without camel-cased attributes\r\n        attrs: {\r\n            root: {\r\n                \"font-family\": \"sans-serif\"\r\n            }\r\n        },\r\n        serieDefaults: {\r\n            startAngle: 90,\r\n            label: \"Ⓟ bar\"\r\n        },\r\n        sliceDefaults: {\r\n            legendLabel: \"{value:.1f}\",\r\n            onClickEffect: { type: \"none\" }\r\n        }\r\n    });\r\n\r\n    // gauge1.addTo(graph);\r\n\r\n    const gauge1Link = new shapes.standard.Link({\r\n        source: { id: gauge1.id, anchor: { name: \"bottom\" } },\r\n        target: { id: ctrlValve1Pipe1.id },\r\n        z: -1,\r\n        attrs: {\r\n            line: {\r\n                strokeDasharray: \"5 5\",\r\n                targetMarker: {\r\n                    type: \"circle\",\r\n                    r: 12,\r\n                    fill: \"#eee\",\r\n                    stroke: \"#666\",\r\n                    \"stroke-width\": 2\r\n                },\r\n                stroke: \"#aaa\"\r\n            }\r\n        }\r\n    });\r\n\r\n    // gauge1Link.addTo(graph);\r\n\r\n    const gauge2 = gauge1.clone();\r\n    const gauge2Link = gauge1Link.clone();\r\n\r\n    gauge2.position(380, 600);\r\n\r\n    gauge2Link.source({ id: gauge2.id, anchor: { name: \"bottom\" } });\r\n    gauge2Link.target({ id: ctrlValve2Pipe1.id });\r\n\r\n    // gauge2.addTo(graph);\r\n    // gauge2Link.addTo(graph);\r\n\r\n    // Controls\r\n    // A custom highlighters using the foreignObject element to embed HTML form controls\r\n    // The styling is done in CSS\r\n\r\n    const PumpControl = dia.HighlighterView.extend({\r\n        UPDATE_ATTRIBUTES: [\"power\"],\r\n        tagName: \"g\",\r\n        children: util.svg/* xml */ `\r\n            <foreignObject width=\"20\" height=\"20\">\r\n                <div class=\"jj-checkbox\" xmlns=\"http://www.w3.org/1999/xhtml\">\r\n                    <input @selector=\"input\" class=\"jj-checkbox-input\" type=\"checkbox\" style=\"width: 14px; height: 14px; box-sizing: border-box; margin: 2px;\"/>\r\n                </div>\r\n            </foreignObject>\r\n        `,\r\n        events: {\r\n            \"change input\": \"onChange\"\r\n        },\r\n        attributes: {\r\n            transform: \"translate(5, 5)\"\r\n        },\r\n        highlight: function (cellView) {\r\n            this.renderChildren();\r\n            this.childNodes.input.checked = Boolean(cellView.model.power);\r\n        },\r\n        onChange: function (evt) {\r\n            this.cellView.model.power = evt.target.checked ? 1 : 0;\r\n        }\r\n    });\r\n\r\n    const ToggleValveControl = dia.HighlighterView.extend({\r\n        UPDATE_ATTRIBUTES: [\"open\"],\r\n        children: util.svg/* xml */ `\r\n        <foreignObject width=\"100\" height=\"50\">\r\n            <div class=\"jj-switch\" xmlns=\"http://www.w3.org/1999/xhtml\">\r\n                <div @selector=\"label\" class=\"jj-switch-label\" style=\"\"></div>\r\n                <button @selector=\"buttonOn\" class=\"jj-switch-on\">open</button>\r\n                <button @selector=\"buttonOff\" class=\"jj-switch-off\">close</button>\r\n            </div>\r\n        </foreignObject>\r\n    `,\r\n        events: {\r\n            \"click button\": \"onButtonClick\"\r\n        },\r\n        highlight: function (cellView) {\r\n            this.renderChildren();\r\n            const { model } = cellView;\r\n            const { el, childNodes } = this;\r\n            const size = model.size();\r\n            const isOpen = model.get(\"open\");\r\n            el.setAttribute(\r\n                \"transform\",\r\n                `translate(${size.width / 2 - 50}, ${size.height + 10})`\r\n            );\r\n            childNodes.buttonOn.disabled = !isOpen;\r\n            childNodes.buttonOff.disabled = isOpen;\r\n            childNodes.label.textContent = model.attr(\"label/text\");\r\n        },\r\n        onButtonClick: function (evt) {\r\n            const { model } = this.cellView;\r\n            const isOpen = model.get(\"open\");\r\n            model.set(\"open\", !isOpen);\r\n        }\r\n    });\r\n\r\n    const SliderValveControl = dia.HighlighterView.extend({\r\n        UPDATE_ATTRIBUTES: [\"open\"],\r\n        children: util.svg/* xml */ `\r\n    <foreignObject width=\"100\" height=\"60\">\r\n        <div class=\"jj-slider\" xmlns=\"http://www.w3.org/1999/xhtml\">\r\n            <div @selector=\"label\" class=\"jj-slider-label\" style=\"\">Valve 4</div>\r\n            <input @selector=\"slider\" class=\"jj-slider-input\" type=\"range\" min=\"0\" max=\"100\" step=\"25\" style=\"width:100%;\"/>\r\n            <output @selector=\"value\" class=\"jj-slider-output\"></output>\r\n        </div>\r\n    </foreignObject>\r\n`,\r\n        events: {\r\n            \"input input\": \"onInput\"\r\n        },\r\n        highlight: function (cellView) {\r\n            const { name = \"\" } = this.options;\r\n            const { model } = cellView;\r\n            const size = model.size();\r\n            if (!this.childNodes) {\r\n                // Render the slider only once to allow the user to drag it.\r\n                this.renderChildren();\r\n                this.childNodes.slider.value = model.get(\"open\") * 100;\r\n            }\r\n            this.el.setAttribute(\r\n                \"transform\",\r\n                `translate(${size.width / 2 - 50}, ${size.height + 10})`\r\n            );\r\n            this.childNodes.label.textContent = name;\r\n            this.childNodes.value.textContent = this.getSliderTextValue(\r\n                model.get(\"open\")\r\n            );\r\n        },\r\n        getSliderTextValue: function (value = 0) {\r\n            if (value === 0) {\r\n                return \"Closed\";\r\n            }\r\n            if (value === 1) {\r\n                return \"Open\";\r\n            }\r\n            return `${value * 100}% open`;\r\n        },\r\n        onInput: function (evt) {\r\n            this.cellView.model.set(\"open\", Number(evt.target.value) / 100);\r\n        }\r\n    });\r\n\r\n    // Create all controls and add them to the graph\r\n    // addControls(paper);\r\n\r\n    // Transform the paper so that the content fits the viewport\r\n    paper.transformToFitContent({\r\n        useModelGeometry: true,\r\n        padding: { top: 80, bottom: 10, horizontal: 50 },\r\n        horizontalAlign: \"middle\",\r\n        verticalAlign: \"top\"\r\n    });\r\n\r\n    // Start rendering the content and highlighters\r\n    paper.unfreeze();\r\n\r\n    // Toolbar\r\n\r\n    const toolbar = new ui.Toolbar({\r\n        tools: [\r\n            {\r\n                type: \"label\",\r\n                name: \"title\",\r\n                text: \"SCADA: Piping & Instrumentation Diagram\"\r\n            },\r\n            {\r\n                type: \"separator\"\r\n            },\r\n            {\r\n                type: \"checkbox\",\r\n                name: \"controls\",\r\n                label: \"Controls\",\r\n                value: true\r\n            },\r\n            {\r\n                type: \"checkbox\",\r\n                name: \"instrumentation\",\r\n                label: \"Instrumentation\",\r\n                value: true\r\n            },\r\n            {\r\n                type: \"separator\"\r\n            },\r\n            {\r\n                type: \"label\",\r\n                text: \"Color\"\r\n            },\r\n            {\r\n                type: \"color-picker\",\r\n                name: \"color\",\r\n                value: getComputedStyle(document.documentElement).getPropertyValue(\r\n                    \"--accent-color\"\r\n                )\r\n            }\r\n        ]\r\n    });\r\n\r\n    // toolbarContainerEl.appendChild(toolbar.el);\r\n\r\n    toolbar.render();\r\n    toolbar.on({\r\n        \"controls:change\": (value) => {\r\n            if (value) {\r\n                addControls(paper);\r\n            } else {\r\n                removeControls(paper);\r\n            }\r\n        },\r\n        \"instrumentation:change\": (value) => {\r\n            if (value) {\r\n                addCharts(paper);\r\n            } else {\r\n                removeCharts(paper);\r\n            }\r\n        },\r\n        \"color:input\": (value) => {\r\n            document.documentElement.style.setProperty(\"--accent-color\", value);\r\n        }\r\n    });\r\n\r\n    function addControls(paper) {\r\n        const graph = paper.model;\r\n        graph.getElements().forEach((cell) => {\r\n            switch (cell.get(\"type\")) {\r\n                case \"ControlValve\":\r\n                    SliderValveControl.add(cell.findView(paper), \"root\", \"slider\", {\r\n                        name: cell.attr(\"label/text\")\r\n                    });\r\n                    break;\r\n                case \"HandValve\":\r\n                    ToggleValveControl.add(cell.findView(paper), \"root\", \"button\");\r\n                    break;\r\n                case \"Pump\":\r\n                    PumpControl.add(cell.findView(paper), \"root\", \"selection\");\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    function removeControls(paper) {\r\n        SliderValveControl.removeAll(paper);\r\n        ToggleValveControl.removeAll(paper);\r\n        PumpControl.removeAll(paper);\r\n    }\r\n\r\n    function addCharts(paper) {\r\n        paper.options.viewport = null;\r\n    }\r\n\r\n    function removeCharts(paper) {\r\n        const chartTypes = [\"chart.Knob\", \"chart.Plot\", \"standard.Link\"];\r\n        paper.options.viewport = (view) => {\r\n            return !chartTypes.includes(view.model.get(\"type\"));\r\n        };\r\n    }\r\n\r\n    // Simulation\r\n    // A dummy system for the purpose of this demo\r\n\r\n    tank1.level = START_LIQUID;\r\n\r\n    let extraLiquid = 0;\r\n\r\n    setInterval(function () {\r\n        const tank1Level = tank1.level;\r\n        const liquidIn = g.random(0, 15);\r\n\r\n        let newLevel = tank1Level + liquidIn;\r\n        if (newLevel >= 100) {\r\n            extraLiquid += newLevel - 100;\r\n        } else {\r\n            extraLiquid = 0;\r\n        }\r\n\r\n        // Tank 1 Instrumentation\r\n        tankChart.addPoint(\r\n            { x: tankChart.lastPoint(\"level\").x + 1, y: tank1Level },\r\n            \"level\",\r\n            { maxLen: maxPoints }\r\n        );\r\n\r\n        // Tank 1 Pipes\r\n        const tank1Pipe1Flow = tank1Level > 70 ? 1 : 0;\r\n        const tank1Pipe2Flow = tank1Level > 0 ? 1 : 0;\r\n        tank1Pipe1.set(\"flow\", tank1Pipe1Flow);\r\n        // tank1Pipe2.set(\"flow\", tank1Pipe2Flow);\r\n\r\n        // Pump Station 1\r\n        // const station1Power = station1.get(\"power\");\r\n        station1.attr(\"label/fill\", $scope.dataObject.station1.power ? \"green\" : \"red\");\r\n        station1.attr(\"label/text\", $scope.dataObject.station1.power ? \"From Pump\\nStation-1 ON\" : \"From Pump\\nStation-1 OFF\")\r\n        station1Tojoin14.set(\"flow\", $scope.dataObject.station1.power);\r\n        join14ToFilter1.set(\"flow\", $scope.dataObject.station1.power);\r\n        join14ToFilter2.set(\"flow\", $scope.dataObject.station1.power);\r\n\r\n\r\n        // Pump Station 2\r\n        // const station2Power = station2.get(\"power\");\r\n        station2.attr(\"label/fill\", $scope.dataObject.station2.power ? \"green\" : \"red\")\r\n        station2.attr(\"label/text\", $scope.dataObject.station2.power ? \"From Pump\\nStation-2 ON\" : \"From Pump\\nStation-2 OFF\")\r\n        station2Tojoin15.set(\"flow\", $scope.dataObject.station2.power);\r\n        join15ToFilter3.set(\"flow\", $scope.dataObject.station2.power);\r\n        join15ToFilter4.set(\"flow\", $scope.dataObject.station2.power);\r\n        // CTRL Valve 1\r\n        const ctrlValve1Open = controlValve1.get(\"open\");\r\n        const ctrlValve1Pipe1Flow = tank1Pipe1Flow * ctrlValve1Open;\r\n        ctrlValve1Pipe1.set(\"flow\", ctrlValve1Pipe1Flow);\r\n        // CTRL Valve 2\r\n        const ctrlValve2Open = controlValve2.get(\"open\");\r\n        const ctrlValve2Pipe1Flow = tank1Pipe2Flow * ctrlValve2Open;\r\n        ctrlValve2Pipe1.set(\"flow\", ctrlValve2Pipe1Flow);\r\n\r\n        // Pump 1\r\n        // const pump1Power = pump1.power;\r\n\r\n        // const pump1Pipe1Flow = ctrlValve1Pipe1Flow * (1 + 2 * pump1Power);\r\n        const pump1Pipe1Flow = $scope.dataObject.pump1.power;\r\n        pump1.power = pump1Pipe1Flow;\r\n        if (pump1Pipe1Flow) {\r\n            pump1.attr(\"label/text\", \"Pump 1 ON\");\r\n            pump1.attr(\"label/fill\", \"green\");\r\n            pump1.attr(\"rotorBackground/fill\", \"green\");\r\n        } else {\r\n            pump1.attr(\"label/text\", \"Pump 1 OFF\");\r\n            pump1.attr(\"label/fill\", \"red\");\r\n            pump1.attr(\"rotorBackground/fill\", \"#777\");\r\n        }\r\n        join1toPump1.set(\"flow\", pump1Pipe1Flow == 0 ? 0.01 : pump1Pipe1Flow);\r\n        join2ToJoin1.set(\"flow\", pump1Pipe1Flow == 0 ? 0.01 : pump1Pipe1Flow);\r\n\r\n        // Hand Valve 1\r\n        // const handValve1Open = Number(handValve1.get(\"open\"));\r\n        const handValve1Open = $scope.dataObject.handValve1.open;\r\n        const handValve1Pipe1Flow = pump1Pipe1Flow * handValve1Open;\r\n        valve1Join4.set(\"flow\", handValve1Pipe1Flow);\r\n\r\n        if (handValve1Open) {\r\n            handValve1.attr(\"status/fill\", \"green\");\r\n            handValve1.attr(\"label/fill\", \"green\");\r\n            handValve1.attr(\"label/text\", \"Valve 1 ON\");\r\n            if (pump1Pipe1Flow) {\r\n                pump1Valve1.set(\"flow\", pump1Pipe1Flow);\r\n            } else {\r\n                pump1Valve1.set(\"flow\", 0);\r\n            }\r\n\r\n        } else {\r\n            handValve1.attr(\"status/fill\", \"white\");\r\n            handValve1.attr(\"label/fill\", \"red\");\r\n            handValve1.attr(\"label/text\", \"Valve 1 OFF\");\r\n            if (pump1Pipe1Flow) {\r\n                pump1Valve1.set(\"flow\", 0.01);\r\n            } else {\r\n                pump1Valve1.set(\"flow\", 0);\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n        // Pump 2\r\n        // const pump2Power = pump2.power;\r\n        // const pump2Pipe1Flow = ctrlValve2Pipe1Flow * (1 + 2 * pump2Power);\r\n        const pump2Pipe1Flow = $scope.dataObject.pump2.power;\r\n        pump2.power = pump2Pipe1Flow;\r\n        join2ToPump2.set(\"flow\", pump2Pipe1Flow == 0 ? 0.01 : pump2Pipe1Flow);\r\n        join3ToJoin2.set(\"flow\", pump1Pipe1Flow == 0 && pump2Pipe1Flow == 0 ? 0.01 : 1);\r\n        if (pump2Pipe1Flow) {\r\n            pump2.attr(\"label/text\", \"Pump 2 ON\");\r\n            pump2.attr(\"label/fill\", \"green\");\r\n            pump2.attr(\"rotorBackground/fill\", \"green\");\r\n        } else {\r\n            pump2.attr(\"label/text\", \"Pump 2 OFF\");\r\n            pump2.attr(\"label/fill\", \"red\");\r\n            pump2.attr(\"rotorBackground/fill\", \"#777\");\r\n        }\r\n\r\n        // Hand Valve 2\r\n        // const handValve2Open = Number(handValve2.get(\"open\"));\r\n        const handValve2Open = $scope.dataObject.handValve2.open;\r\n        const handValve2Pipe1Flow = pump2Pipe1Flow * handValve2Open;\r\n        valve2Join4.set(\"flow\", handValve2Pipe1Flow);\r\n        // pump2Valve2.set(\"flow\", pump2Pipe1Flow);\r\n        if (handValve2Open) {\r\n            handValve2.attr(\"status/fill\", \"green\");\r\n            handValve2.attr(\"label/fill\", \"green\");\r\n            handValve2.attr(\"label/text\", \"Valve 2 ON\");\r\n            if (pump2Pipe1Flow) {\r\n                pump2Valve2.set(\"flow\", pump2Pipe1Flow);\r\n            } else {\r\n                pump2Valve2.set(\"flow\", 0);\r\n            }\r\n        } else {\r\n            handValve2.attr(\"status/fill\", \"white\");\r\n            handValve2.attr(\"label/fill\", \"red\");\r\n            handValve2.attr(\"label/text\", \"Valve 2 OFF\");\r\n            if (pump2Pipe1Flow) {\r\n                pump2Valve2.set(\"flow\", 0.01);\r\n            } else {\r\n                pump2Valve2.set(\"flow\", 0);\r\n            }\r\n        }\r\n\r\n        // Pump 3\r\n        // const pump3Power = pump3.power;\r\n        // const pump3Pipe1Flow = pump1Pipe1Flow * (1 + 2 * pump3Power);\r\n        const pump3Pipe1Flow = $scope.dataObject.pump3.power;\r\n        pump3.power = pump3Pipe1Flow;\r\n        // pump3Valve3.set(\"flow\", pump3Pipe1Flow);\r\n        join3ToPump3.set(\"flow\", pump3Pipe1Flow == 0 ? 0.01 : pump3Pipe1Flow);\r\n        if (pump3Pipe1Flow) {\r\n            pump3.attr(\"label/text\", \"Pump 3 ON\");\r\n            pump3.attr(\"label/fill\", \"green\");\r\n            pump3.attr(\"rotorBackground/fill\", \"green\");\r\n        } else {\r\n            pump3.attr(\"label/text\", \"Pump 3 OFF\");\r\n            pump3.attr(\"label/fill\", \"red\");\r\n            pump3.attr(\"rotorBackground/fill\", \"#777\");\r\n        }\r\n\r\n        reservoirToJoin3.set(\"flow\", $scope.dataObject.pump1.power || $scope.dataObject.pump2.power || $scope.dataObject.pump3.power ? 1 : 0.01);\r\n\r\n        // Hand Valve 3\r\n        // const handValve3Open = Number(handValve3.get(\"open\"));\r\n        const handValve3Open = $scope.dataObject.handValve3.open;\r\n        const handValve3Pipe1Flow = pump3Pipe1Flow * handValve3Open;\r\n        valve3join4.set(\"flow\", handValve3Pipe1Flow);\r\n        if (handValve3Open) {\r\n            handValve3.attr(\"status/fill\", \"green\");\r\n            handValve3.attr(\"label/fill\", \"green\");\r\n            handValve3.attr(\"label/text\", \"Valve 3 ON\");\r\n            if (pump3Pipe1Flow) {\r\n                pump3Valve3.set(\"flow\", pump3Pipe1Flow);\r\n            } else {\r\n                pump3Valve3.set(\"flow\", 0);\r\n            }\r\n        } else {\r\n            handValve3.attr(\"status/fill\", \"white\");\r\n            handValve3.attr(\"label/fill\", \"red\");\r\n            handValve3.attr(\"label/text\", \"Valve 3 OFF\");\r\n            if (pump3Pipe1Flow) {\r\n                pump3Valve3.set(\"flow\", 0.01);\r\n            } else {\r\n                pump3Valve3.set(\"flow\", 0);\r\n            }\r\n        }\r\n\r\n        // join 4 \r\n        const totalFlow = handValve1Pipe1Flow + handValve2Pipe1Flow + handValve3Pipe1Flow;\r\n\r\n\r\n        // Hand Valve 4\r\n        // const valve4Open = handValve4.get(\"open\");\r\n        const valve4Open = $scope.dataObject.handValve4.open;\r\n        const valve4Pipe1Flow = totalFlow * valve4Open;\r\n        valve4OverheadTank.set(\"flow\", valve4Pipe1Flow);\r\n        if (valve4Pipe1Flow) {\r\n            handValve4.attr(\"status/fill\", \"green\");\r\n            handValve4.attr(\"label/fill\", \"green\");\r\n            handValve4.attr(\"label/text\", \"Valve 4 ON\");\r\n            join4Valve4.set(\"flow\", totalFlow);\r\n        } else {\r\n            handValve4.attr(\"status/fill\", \"white\");\r\n            handValve4.attr(\"label/fill\", \"red\");\r\n            handValve4.attr(\"label/text\", \"Valve 4 OFF\");\r\n            join4Valve4.set(\"flow\", 0.01);\r\n        }\r\n\r\n        // Hand Valve 5\r\n        // const valve5Open = handValve5.get(\"open\");\r\n        const valve5Open = $scope.dataObject.handValve5.open;\r\nconsole.log(\"handValve5\", valve5Open)\r\n\r\n        const valve5Pipe1Flow = valve5Open;\r\n        valve5ToJoin5.set(\"flow\", valve5Pipe1Flow);\r\n        if (valve5Pipe1Flow) {\r\n            handValve5.attr(\"status/fill\", \"green\");\r\n            handValve5.attr(\"label/fill\", \"green\");\r\n            handValve5.attr(\"label/text\", \"Valve 5 ON\");\r\n            // join4Valve4.set(\"flow\", totalFlow);\r\n        } else {\r\n            handValve5.attr(\"status/fill\", \"white\");\r\n            handValve5.attr(\"label/fill\", \"red\");\r\n            handValve5.attr(\"label/text\", \"Valve 5 OFF\");\r\n            // join4Valve4.set(\"flow\", 0.01);\r\n        }\r\n\r\n        join5ToJoin6.set(\"flow\", valve5Pipe1Flow);\r\n        join5ToValve6.set(\"flow\", valve5Pipe1Flow);\r\n        join6ToJoin7.set(\"flow\", valve5Pipe1Flow);\r\n        join6ToValve7.set(\"flow\", valve5Pipe1Flow);\r\n        join7ToJoin8.set(\"flow\", valve5Pipe1Flow);\r\n        join7ToValve8.set(\"flow\", valve5Pipe1Flow);\r\n        join8ToValve9.set(\"flow\", valve5Pipe1Flow);\r\n\r\n        overheadToValve5.set(\"flow\", valve5Pipe1Flow == 0 ? 0.01 : 1);\r\n\r\n\r\n\r\n        // Hand Valve 9\r\n        // const valve9Open = handValve9.get(\"open\");\r\n        const valve9Open = $scope.dataObject.handValve9.open;\r\n        const valve9Pipe1Flow = valve9Open * valve5Pipe1Flow;\r\n        valve9ToFilter1.set(\"flow\", valve9Pipe1Flow);\r\n        join8ToValve9.set(\"flow\", valve5Open == 1 && valve9Open == 0 ? 0.01 : valve5Open == 0 ? 0 : 1);\r\n        join7ToJoin8.set(\"flow\", valve5Open == 1 && valve9Open == 0 ? 0.01 : valve5Open == 0 ? 0 : 1);\r\n        if (valve9Open) {\r\n            handValve9.attr(\"status/fill\", \"green\");\r\n            handValve9.attr(\"label/fill\", \"green\");\r\n            handValve9.attr(\"label/text\", \"Valve 9 ON\");\r\n        } else {\r\n            handValve9.attr(\"status/fill\", \"white\");\r\n            handValve9.attr(\"label/fill\", \"red\");\r\n            handValve9.attr(\"label/text\", \"Valve 9 OFF\");\r\n        }\r\n\r\n        // Hand Valve 8\r\n        // const valve8Open = handValve8.get(\"open\");\r\n        const valve8Open = $scope.dataObject.handValve8.open;\r\n        const valve8Pipe1Flow = valve8Open * valve5Pipe1Flow;\r\n        valve8ToFilter2.set(\"flow\", valve8Pipe1Flow);\r\n        join7ToValve8.set(\"flow\", valve5Open == 1 && valve8Open == 0 ? 0.01 : valve5Open == 0 ? 0 : 1);\r\n        if (valve5Open) {\r\n            if (valve8Open || valve9Open) {\r\n                join6ToJoin7.set(\"flow\", 1);\r\n            } else {\r\n                join6ToJoin7.set(\"flow\", 0.01);\r\n            }\r\n        } else {\r\n            join6ToJoin7.set(\"flow\", 0);\r\n        }\r\n        if (valve8Open) {\r\n            handValve8.attr(\"status/fill\", \"green\");\r\n            handValve8.attr(\"label/fill\", \"green\");\r\n            handValve8.attr(\"label/text\", \"Valve 8 ON\");\r\n        } else {\r\n            handValve8.attr(\"status/fill\", \"white\");\r\n            handValve8.attr(\"label/fill\", \"red\");\r\n            handValve8.attr(\"label/text\", \"Valve 8 OFF\");\r\n        }\r\n\r\n\r\n        // Hand Valve 7\r\n        // const valve7Open = handValve7.get(\"open\");\r\n        const valve7Open = $scope.dataObject.handValve7.open;\r\n        const valve7Pipe1Flow = valve7Open * valve5Pipe1Flow;\r\n        valve7ToFilter3.set(\"flow\", valve7Pipe1Flow);\r\n        join6ToValve7.set(\"flow\", valve5Open == 1 && valve7Open == 0 ? 0.01 : valve5Open == 0 ? 0 : 1);\r\n        if (valve5Open) {\r\n            if (valve7Open || valve8Open || valve9Open) {\r\n                join5ToJoin6.set(\"flow\", 1);\r\n            } else {\r\n                join5ToJoin6.set(\"flow\", 0.01);\r\n            }\r\n        } else {\r\n            join5ToJoin6.set(\"flow\", 0);\r\n        }\r\n        if (valve7Open) {\r\n            handValve7.attr(\"status/fill\", \"green\");\r\n            handValve7.attr(\"label/fill\", \"green\");\r\n            handValve7.attr(\"label/text\", \"Valve 7 ON\");\r\n        } else {\r\n            handValve7.attr(\"status/fill\", \"white\");\r\n            handValve7.attr(\"label/fill\", \"red\");\r\n            handValve7.attr(\"label/text\", \"Valve 7 OFF\");\r\n        }\r\n\r\n\r\n\r\n\r\n        // Hand Valve 6\r\n        // const valve6Open = handValve6.get(\"open\");\r\n        const valve6Open = $scope.dataObject.handValve6.open;\r\n        const valve6Pipe1Flow = valve6Open * valve5Pipe1Flow;\r\n        valve6ToFilter4.set(\"flow\", valve6Pipe1Flow);\r\n        join5ToValve6.set(\"flow\", valve5Open == 1 && valve6Open == 0 ? 0.01 : valve5Open == 0 ? 0 : 1);\r\n        if (valve5Open) {\r\n            if (valve6Open || valve7Open || valve8Open || valve9Open) {\r\n                valve5ToJoin5.set(\"flow\", 1);\r\n            } else {\r\n                valve5ToJoin5.set(\"flow\", 0.01);\r\n            }\r\n        } else {\r\n            valve5ToJoin5.set(\"flow\", 0);\r\n        }\r\n        if (valve6Open) {\r\n            handValve6.attr(\"status/fill\", \"green\");\r\n            handValve6.attr(\"label/fill\", \"green\");\r\n            handValve6.attr(\"label/text\", \"Valve 6 ON\");\r\n        } else {\r\n            handValve6.attr(\"status/fill\", \"white\");\r\n            handValve6.attr(\"label/fill\", \"red\");\r\n            handValve6.attr(\"label/text\", \"Valve 6 OFF\");\r\n        }\r\n\r\n\r\n        // Hand Valve 10\r\n        // const valve10Open = handValve10.get(\"open\");\r\n        const valve10Open = $scope.dataObject.handValve10.open;\r\n        const valve10Pipe1Flow = valve10Open;\r\n        valve10ToZone3.set(\"flow\", valve10Pipe1Flow ? 1 : 0);\r\n        filter1ToValve10.set(\"flow\", valve10Pipe1Flow ? valve10Pipe1Flow : 0.01);\r\n        if (valve10Open) {\r\n            handValve10.attr(\"status/fill\", \"green\");\r\n            handValve10.attr(\"label/fill\", \"green\");\r\n            handValve10.attr(\"label/text\", \"Valve 10 ON\");\r\n        } else {\r\n            handValve10.attr(\"status/fill\", \"white\");\r\n            handValve10.attr(\"label/fill\", \"red\");\r\n            handValve10.attr(\"label/text\", \"Valve 10 OFF\");\r\n        }\r\n\r\n\r\n        // Hand Valve 11\r\n        // const valve11Open = handValve11.get(\"open\");\r\n        const valve11Open = $scope.dataObject.handValve11.open;\r\n        const valve11Pipe1Flow = valve11Open;\r\n        valve11ToReservoirTank.set(\"flow\", valve11Pipe1Flow);\r\n        join9ToValve11.set(\"flow\", valve11Pipe1Flow ? valve11Pipe1Flow : 0.01);\r\n        filter1ToJoin9.set(\"flow\", valve11Pipe1Flow ? valve11Pipe1Flow : 0.01);\r\n        filter2ToJoin10.set(\"flow\", valve11Pipe1Flow ? valve11Pipe1Flow : 0.01);\r\n        filter3ToJoin11.set(\"flow\", valve11Pipe1Flow ? valve11Pipe1Flow : 0.01);\r\n        filter4ToJoin12.set(\"flow\", valve11Pipe1Flow ? valve11Pipe1Flow : 0.01);\r\n        join12ToJoin11.set(\"flow\", valve11Pipe1Flow ? valve11Pipe1Flow : 0.01);\r\n        join11ToJoin10.set(\"flow\", valve11Pipe1Flow ? valve11Pipe1Flow : 0.01);\r\n        join10ToJoin9.set(\"flow\", valve11Pipe1Flow ? valve11Pipe1Flow : 0.01);\r\n        if (valve11Open) {\r\n            handValve11.attr(\"status/fill\", \"green\");\r\n            handValve11.attr(\"label/fill\", \"green\");\r\n            handValve11.attr(\"label/text\", \"Valve 11 ON\");\r\n        } else {\r\n            handValve11.attr(\"status/fill\", \"white\");\r\n            handValve11.attr(\"label/fill\", \"red\");\r\n            handValve11.attr(\"label/text\", \"Valve 11 OFF\");\r\n        }\r\n\r\n        // Flow Sensors\r\n        flowSensor1.attr('value/text', $scope.dataObject.flowSensor1.value + \" m3\");\r\n        // flowSensor2.attr('value/text', $scope.dataObject.flowSensor2.value + \" m3\");\r\n        flowSensor2.attr('value/text', Math.floor(Math.random() * 100 + 1) + \" m3\");\r\n        flowSensor3.attr('value/text', $scope.dataObject.flowSensor3.value + \" m3\");\r\n\r\n        // Pressure Sensors\r\n        pressureSensor1.attr('value/text', $scope.dataObject.pressureSensor1.value + \" bar\");\r\n        pressureSensor2.attr('value/text', $scope.dataObject.pressureSensor2.value + \" bar\");\r\n        pressureSensor3.attr('value/text', $scope.dataObject.pressureSensor3.value + \" bar\");\r\n\r\n        levelSensor1.attr('value/text', $scope.dataObject.levelSensor1.value + \" ft\");\r\n        levelSensor2.attr('value/text', $scope.dataObject.levelSensor2.value + \" ft\");\r\n        levelSensor3.attr('value/text', $scope.dataObject.levelSensor3.value + \" ft\");\r\n        levelSensor4.attr('value/text', $scope.dataObject.levelSensor4.value + \" ft\");\r\n        levelSensor5.attr('value/text', $scope.dataObject.levelSensor5.value + \" ft\");\r\n        // levelSensor6.attr('value/text', $scope.dataObject.levelSensor6.value + \" ft\");\r\n        levelSensor6.attr('value/text', Math.floor(Math.random() * 10 + 1) + \" ft\");\r\n\r\n        // Join 1\r\n        // const join1Pipe1Flow = handValve2Pipe1Flow + handValve3Pipe1Flow;\r\n        // join1Pipe1.set(\"flow\", join1Pipe1Flow);\r\n\r\n        // Tank 2\r\n        // const tank2Pipe1Flow = 0.5; // constant flow\r\n        // tank2Pipe1.set(\"flow\", tank2Pipe1Flow);\r\n\r\n\r\n        // Join 2\r\n        // const join2Pipe1Flow = join1Pipe1Flow + handValve1Pipe1Flow;\r\n        // join2Pipe1.set(\"flow\", join2Pipe1Flow);\r\n\r\n        // Tank1\r\n        // const liquidOut = join2Pipe1Flow * 4;\r\n        // tank1.level = tank1Level + liquidIn - liquidOut;\r\n\r\n        // Gauge 1\r\n        // let pressure1 = ctrlValve1Pipe1Flow * 10;\r\n        // if (pressure1 > 0) {\r\n        //     pressure1 += Math.min(30, extraLiquid * Math.max(1.1 - handValve2Open));\r\n        //     if (handValve2Open === 0) {\r\n        //         pressure1 += Math.max(0, tank1Level - 70) * 0.3;\r\n        //     }\r\n        // }\r\n        // gauge1.transition(\"value\", pressure1 / 10);\r\n        // gauge1.transition(\r\n        //     \"fill\",\r\n        //     pressure1 > 30 ? MAX_PRESSURE_COLOR : PRESSURE_COLOR,\r\n        //     { valueFunction: util.interpolate.hexColor, duration: 1000 }\r\n        // );\r\n\r\n        // Gauge 2\r\n        // let pressure2 = ctrlValve2Pipe1Flow * 10;\r\n        // if (pressure2 > 0) {\r\n        //     pressure2 += Math.min(30, extraLiquid * Math.max(1.1 - handValve3Open));\r\n        //     if (handValve3Open === 0) {\r\n        //         pressure2 += tank1Level * 0.3;\r\n        //     }\r\n        // }\r\n        // gauge2.transition(\"value\", pressure2 / 10);\r\n        // gauge2.transition(\r\n        //     \"fill\",\r\n        //     pressure2 > 30 ? MAX_PRESSURE_COLOR : PRESSURE_COLOR,\r\n        //     { valueFunction: util.interpolate.hexColor, duration: 1000 }\r\n        // );\r\n    }, 1000);\r\n    \r\n    self.onResize();\r\n}\r\n\r\nself.onDataUpdated = function() {\r\n    console.log(\"onDataUpdated called\");\r\n    // console.log(self.ctx.data);\r\n\r\n    \r\n    self.ctx.data.forEach((item, index)=>{\r\n    // \tconsole.log(index, item);\r\n    \tlet itemKey= item.dataKey.name;\r\n    // \tconsole.log(itemKey);\r\n    \t\t\r\n    \t\r\n    \tif(item.data.length){\r\n    \t   \r\n    \t    \r\n    \t    \r\n    \t    let itemValue= item.data[0][1];\r\n    \t    let data = JSON.parse(itemValue);\r\n    \t    let key = Object.keys(data);\r\n    \t    let value = Object.values(data);\r\n    \t    console.log(\"value--\",key,value)\r\n    \t   // data store in object\r\n    \t   // self.ctx.$scope.dataObject[itemKey][key]= value;\r\n    \t} \r\n    });\r\n\r\n}\r\n\r\nself.onResize = function() {\r\n    console.log(\"data\",self.ctx.$scope.dataObject)\r\n      \r\n}\r\n\r\nself.onDestroy = function() {\r\n}\r\n",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Kustia SCADA Design\"}"
    },
    "bundleAlias" : "kustia_widgets",
    "createdTime" : 1713674596570,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "ab6583a0-ff99-11ee-a56d-9d6138fe9e87"
    },
    "tenantId" : {
      "entityType" : "TENANT",
      "id" : "6a594940-e4c5-11ed-8f65-1f1c5e01f03a"
    }
  } ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}