{
  "entityType" : "WIDGETS_BUNDLE",
  "entity" : {
    "alias" : "kustia_widgets",
    "description" : null,
    "externalId" : null,
    "id" : {
      "entityType" : "WIDGETS_BUNDLE",
      "id" : "3a7417b0-ff99-11ee-a56d-9d6138fe9e87"
    },
    "image" : null,
    "name" : "Kustia Widgets",
    "title" : "Kustia Widgets"
  },
  "widgets" : [ {
    "alias" : "kustia_scada_design",
    "name" : "Kustia SCADA Design",
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ {
        "url" : "https://resources.jointjs.com/demos/rappid/build/package/rappid.css"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.4.0/backbone-min.js"
      }, {
        "url" : "https://resources.jointjs.com/demos/rappid/build/package/rappid.js"
      } ],
      "templateHtml" : "<div id=\"paper-container\"></div>",
      "templateCss" : "/*------------- JOINT JS STSRT------------*/\r\n:root {\r\n  --accent-color: #0075f2;\r\n  --text-color: #131e29;\r\n  --liquid-color: #f6f740;\r\n}\r\n\r\n/* Switch */\r\n\r\n.jj-switch {\r\n  font-family: sans-serif;\r\n  font-size: 14px;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: white;\r\n  border: 1px solid #cad8e3;\r\n  position: static;\r\n  padding: 3px;\r\n  box-sizing: border-box;\r\n  border-radius: 4px;\r\n  color: var(--text-color);\r\n}\r\n\r\n.jj-switch-label {\r\n  width: 100%;\r\n  text-align: center;\r\n  margin: 0 0 2px 0;\r\n}\r\n\r\n.jj-switch-on {\r\n  background: var(--accent-color);\r\n  color: #dde6ed;\r\n  border-radius: 4px 0 0 4px;\r\n  border: 1px solid var(--accent-color);\r\n  width: 50%;\r\n  height: 22px;\r\n}\r\n\r\n.jj-switch-off {\r\n  background: #131e29;\r\n  color: #dde6ed;\r\n  border-radius: 0 4px 4px 0;\r\n  border: 1px solid #131e29;\r\n  width: 50%;\r\n  height: 22px;\r\n}\r\n.jj-switch-on:disabled,\r\n.jj-switch-off:disabled {\r\n  background: #f2f5f8;\r\n  color: #cad8e3;\r\n  border: 1px solid #cad8e3;\r\n}\r\n\r\n/* Checkbox */\r\n\r\n.jj-checkbox {\r\n  width: 100%;\r\n  height: 100%;\r\n  background: white;\r\n  border: 1px solid #cad8e3;\r\n  position: static;\r\n  box-sizing: border-box;\r\n  border-radius: 4px;\r\n}\r\n\r\n.jj-checkbox-input {\r\n  accent-color: var(--accent-color);\r\n}\r\n\r\n/* Slider */\r\n\r\n.jj-slider {\r\n  font-family: sans-serif;\r\n  font-size: 14px;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: white;\r\n  border: 1px solid #cad8e3;\r\n  position: static;\r\n  box-sizing: border-box;\r\n  border-radius: 4px;\r\n  padding: 3px;\r\n  color: var(--text-color);\r\n}\r\n\r\n.jj-slider-input {\r\n  accent-color: var(--accent-color);\r\n}\r\n\r\n.jj-slider-label {\r\n  width: 100%;\r\n  text-align: center;\r\n  white-space: pre;\r\n}\r\n\r\n.jj-slider-output {\r\n  width: 100%;\r\n  text-align: center;\r\n  white-space: pre;\r\n  display: block;\r\n  font-size: 11px;\r\n  color: #40668c;\r\n}\r\n\r\n/* Application */\r\n\r\n#paper-container {\r\n  position: absolute;\r\n  inset: 0 0 0 0;\r\n}\r\n\r\n#logo {\r\n  position: absolute;\r\n  top: 20px;\r\n  right: 0;\r\n}\r\n\r\n#toolbar-container {\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 10px;\r\n  font-family: sans-serif;\r\n  color: var(--text-color);\r\n  accent-color: var(--accent-color);\r\n}\r\n\r\n#toolbar-container [data-name=\"title\"] {\r\n  font-weight: 900;\r\n}\r\n\r\n/*----------- JOINT JS END-------------*/",
      "controllerScript" : "self.onInit = function() {\n    \n    const $scope = self.ctx.$scope;\n\tconsole.log(\"$scope\",$scope.ctx.data)\n\t\n// \tlet data = \"{\\\"value\\\":100}\"\n// \tlet data1 = JSON.parse(data);\n// \tconsole.log(data1)\n       const { dia, shapes, util, ui } = joint;\n\n        const paperContainerEl = document.getElementById(\"paper-container\");\n        const toolbarContainerEl = document.getElementById(\"toolbar-container\");\n\n        // Custom view flags\n        const POWER_FLAG = \"POWER\";\n        const LIGHT_FLAG = \"LIGHT\";\n        const FLOW_FLAG = \"FLOW\";\n        const OPEN_FLAG = \"OPEN\";\n\n        // Constants\n        const LIQUID_COLOR = \"#37c3e6\";\n        const IMPURE_WATER_COLOR = \"#b6a59e\";\n        const MAX_LIQUID_COLOR = \"#ED2637\";\n        const MIN_LIQUID_COLOR = \"#FFD23F\";\n        const START_LIQUID = 70;\n        const PRESSURE_COLOR = \"#1446A0\";\n        const MAX_PRESSURE_COLOR = \"#ED2637\";\n\n        document.documentElement.style.setProperty(\"--liquid-color\", LIQUID_COLOR);\n\n        // Pump metrics\n        const r = 30;\n        const d = 10;\n        const l = (3 * r) / 4;\n        const step = 20;\n\n        let dataObject = {\n            station1: {\n                power: 1,\n                fault: 0\n            },\n            station2: {\n                power: 1,\n                fault: 0\n            },\n            pump1: {\n                power: 1,\n                fault: 0\n            },\n            pump2: {\n                power: 1,\n                fault: 0\n            },\n            pump3: {\n                power: 1,\n                fault: 0\n            },\n            handValve1: {\n                open: 1\n            },\n            handValve2: {\n                open: 1\n            },\n            handValve3: {\n                open: 1\n            },\n            handValve4: {\n                open: 1\n            },\n            handValve5: {\n                open: 1\n            },\n            handValve6: {\n                open: 0\n            },\n            handValve7: {\n                open: 1\n            },\n            handValve8: {\n                open: 1\n            },\n            handValve9: {\n                open: 0\n            },\n            handValve10: {\n                open: 1\n            },\n            handValve11: {\n                open: 1\n            },\n            levelSensor1: {\n                value: 0\n            },\n            levelSensor2: {\n                value: 0\n            },\n            levelSensor3: {\n                value: 0\n            },\n            levelSensor4: {\n                value: 0\n            },\n            levelSensor5: {\n                value: 0\n            },\n            levelSensor6: {\n                value: 0\n            },\n            pressureSensor1: {\n                value: 11\n            },\n            pressureSensor2: {\n                value: 22\n            },\n            pressureSensor3: {\n                value: 33\n            },\n            flowSensor1: {\n                value: 100\n            },\n            flowSensor2: {\n                value: 200\n            },\n            flowSensor3: {\n                value: 300\n            },\n        }\n\n        class ReservoirTank extends joint.dia.Element {\n            defaults() {\n                return {\n                    ...super.defaults,\n                    type: 'ReservoirTank',\n                    position: { x: 10, y: 10 },\n                    size: {\n                        width: 160,\n                        height: 100\n                    },\n                    attrs: {\n                        body: {\n                            stroke: \"gray\",\n                            strokeWidth: 4,\n                            x: 0,\n                            y: 0,\n                            width: \"calc(w)\",\n                            height: \"calc(h)\",\n                            rx: 120,\n                            ry: 10,\n                            fill: {\n                                type: \"linearGradient\",\n                                stops: [\n                                    { offset: \"0%\", color: \"gray\" },\n                                    { offset: \"30%\", color: \"white\" },\n                                    { offset: \"70%\", color: \"white\" },\n                                    { offset: \"100%\", color: \"gray\" }\n                                ]\n                            }\n                        },\n                        label: {\n                            text: \"Tank 2\",\n                            textAnchor: \"middle\",\n                            textVerticalAnchor: \"middle\",\n                            x: \"calc(w / 2)\",\n                            y: \"calc(h /2)\",\n                            fontSize: 14,\n                            fontFamily: \"sans-serif\",\n                            fill: \"#350100\"\n                        }\n                    }\n                };\n            }\n\n            preinitialize() {\n                this.markup = joint.util.svg/* xml */ `\n            <rect @selector=\"body\" />\n            <text @selector=\"label\" />\n        `;\n            }\n        }\n\n        class Pump extends dia.Element {\n            defaults() {\n                return {\n                    ...super.defaults,\n                    type: \"Pump\",\n                    size: {\n                        width: 100,\n                        height: 100\n                    },\n                    power: 0,\n                    attrs: {\n                        root: {\n                            magnetSelector: \"body\"\n                        },\n                        body: {\n                            rx: \"calc(w / 2)\",\n                            ry: \"calc(h / 2)\",\n                            cx: \"calc(w / 2)\",\n                            cy: \"calc(h / 2)\",\n                            stroke: \"gray\",\n                            strokeWidth: 2,\n                            fill: \"lightgray\"\n                        },\n                        label: {\n                            text: \"Pump\",\n                            textAnchor: \"middle\",\n                            textVerticalAnchor: \"top\",\n                            x: \"calc(0.5*w)\",\n                            y: \"calc(h+10)\",\n                            fontSize: 16,\n                            fontFamily: \"sans-serif\",\n                            fill: \"red\"\n                        },\n                        rotorGroup: {\n                            transform: \"translate(calc(w/2),calc(h/2))\",\n                            event: \"element:power:click\",\n                            cursor: \"pointer\"\n                        },\n                        rotorFrame: {\n                            r: 40,\n                            fill: \"#eee\",\n                            stroke: \"#666\",\n                            strokeWidth: 2\n                        },\n                        rotorBackground: {\n                            r: 34,\n                            fill: \"#777\",\n                            stroke: \"#222\",\n                            strokeWidth: 1,\n                            style: {\n                                transition: \"fill 0.5s ease-in-out\"\n                            }\n                        },\n                        rotor: {\n                            // d: `M ${a} ${a} ${b} ${r} -${b} ${r} -${a} ${a} -${r} ${b} -${r} -${b} -${a} -${a} -${b} -${r} ${b} -${r} ${a} -${a} ${r} -${b} ${r} ${b} Z`,\n                            d: `M 0 0 V ${r} l ${-d} ${-l} Z M 0 0 V ${-r} l ${d} ${l} Z M 0 0 H ${r} l ${-l} ${d} Z M 0 0 H ${-r} l ${l} ${-d} Z`,\n                            stroke: \"#222\",\n                            strokeWidth: 3,\n                            fill: \"#bbb\"\n                        }\n                    },\n                    ports: {\n                        groups: {\n                            pipes: {\n                                position: {\n                                    name: \"line\",\n                                    args: {\n                                        start: { x: \"calc(w / 2)\", y: \"calc(h)\" },\n                                        end: { x: \"calc(w / 2)\", y: 0 }\n                                    }\n                                },\n                                markup: util.svg`\n                            <rect @selector=\"pipeBody\" />\n                            <rect @selector=\"pipeEnd\" />\n                        `,\n                                size: { width: 80, height: 30 },\n                                attrs: {\n                                    portRoot: {\n                                        magnetSelector: \"pipeEnd\"\n                                    },\n                                    pipeBody: {\n                                        width: \"calc(w)\",\n                                        height: \"calc(h)\",\n                                        y: \"calc(h / -2)\",\n                                        fill: {\n                                            type: \"linearGradient\",\n                                            stops: [\n                                                { offset: \"0%\", color: \"gray\" },\n                                                { offset: \"30%\", color: \"white\" },\n                                                { offset: \"70%\", color: \"white\" },\n                                                { offset: \"100%\", color: \"gray\" }\n                                            ],\n                                            attrs: {\n                                                x1: \"0%\",\n                                                y1: \"0%\",\n                                                x2: \"0%\",\n                                                y2: \"100%\"\n                                            }\n                                        }\n                                    },\n                                    pipeEnd: {\n                                        width: 10,\n                                        height: \"calc(h+6)\",\n                                        y: \"calc(h / -2 - 3)\",\n                                        stroke: \"gray\",\n                                        strokeWidth: 3,\n                                        fill: \"white\"\n                                    }\n                                }\n                            }\n                        },\n                        items: [\n                            {\n                                id: \"left\",\n                                group: \"pipes\",\n                                z: 1,\n                                attrs: {\n                                    pipeBody: {\n                                        x: \"calc(-1 * w)\"\n                                    },\n                                    pipeEnd: {\n                                        x: \"calc(-1 * w)\"\n                                    }\n                                }\n                            },\n                            {\n                                id: \"right\",\n                                group: \"pipes\",\n                                z: 0,\n                                attrs: {\n                                    pipeEnd: {\n                                        x: \"calc(w - 10)\"\n                                    }\n                                }\n                            }\n                        ]\n                    }\n                };\n            }\n\n            preinitialize() {\n                this.markup = util.svg/* xml */ `\n            <ellipse @selector=\"body\" />\n            <g @selector=\"rotorGroup\">\n                <circle @selector=\"rotorFrame\" />\n                <circle @selector=\"rotorBackground\" />\n                <path @selector=\"rotor\" />\n            </g>\n            <text @selector=\"label\" />\n        `;\n            }\n\n            get power() {\n                return this.get(\"power\") || 0;\n            }\n\n            set power(value) {\n                this.set(\"power\", value);\n            }\n        }\n\n        const PumpView = dia.ElementView.extend({\n            presentationAttributes: dia.ElementView.addPresentationAttributes({\n                power: [POWER_FLAG]\n            }),\n\n            initFlag: [dia.ElementView.Flags.RENDER, POWER_FLAG],\n\n            powerAnimation: null,\n\n            confirmUpdate(...args) {\n                let flags = dia.ElementView.prototype.confirmUpdate.call(this, ...args);\n                if (this.hasFlag(flags, POWER_FLAG)) {\n                    this.togglePower();\n                    flags = this.removeFlag(flags, POWER_FLAG);\n                }\n                return flags;\n            },\n\n            getSpinAnimation() {\n                let { spinAnimation } = this;\n                if (spinAnimation) return spinAnimation;\n                const [rotorEl] = this.findBySelector(\"rotor\");\n                // It's important to use start and end frames to make it work in Safari.\n                const keyframes = { transform: [\"rotate(0deg)\", \"rotate(360deg)\"] };\n                spinAnimation = rotorEl.animate(keyframes, {\n                    fill: \"forwards\",\n                    duration: 1000,\n                    iterations: Infinity\n                });\n                this.spinAnimation = spinAnimation;\n                return spinAnimation;\n            },\n\n            togglePower() {\n                const { model } = this;\n                this.getSpinAnimation().playbackRate = model.power;\n            }\n        });\n\n        class ControlValve extends dia.Element {\n            defaults() {\n                return {\n                    ...super.defaults,\n                    type: \"ControlValve\",\n                    size: {\n                        width: 60,\n                        height: 60\n                    },\n                    open: 1,\n                    attrs: {\n                        root: {\n                            magnetSelector: \"body\"\n                        },\n                        body: {\n                            rx: \"calc(w / 2)\",\n                            ry: \"calc(h / 2)\",\n                            cx: \"calc(w / 2)\",\n                            cy: \"calc(h / 2)\",\n                            stroke: \"gray\",\n                            strokeWidth: 2,\n                            fill: {\n                                type: \"radialGradient\",\n                                stops: [\n                                    { offset: \"80%\", color: \"white\" },\n                                    { offset: \"100%\", color: \"gray\" }\n                                ]\n                            }\n                        },\n                        liquid: {\n                            // We use path instead of rect to make it possible to animate\n                            // the stroke-dasharray to show the liquid flow.\n                            d: \"M calc(w / 2 + 12) calc(h / 2) h -24\",\n                            stroke: LIQUID_COLOR,\n                            strokeWidth: 24,\n                            strokeDasharray: \"3,1\"\n                        },\n                        cover: {\n                            x: \"calc(w / 2 - 12)\",\n                            y: \"calc(h / 2 - 12)\",\n                            width: 24,\n                            height: 24,\n                            stroke: \"#333\",\n                            strokeWidth: 2,\n                            fill: \"#fff\"\n                        },\n                        coverFrame: {\n                            x: \"calc(w / 2 - 15)\",\n                            y: \"calc(h / 2 - 15)\",\n                            width: 30,\n                            height: 30,\n                            stroke: \"#777\",\n                            strokeWidth: 2,\n                            fill: \"none\",\n                            rx: 1,\n                            ry: 1\n                        },\n                        stem: {\n                            width: 10,\n                            height: 30,\n                            x: \"calc(w / 2 - 5)\",\n                            y: -30,\n                            stroke: \"#333\",\n                            strokeWidth: 2,\n                            fill: \"#555\"\n                        },\n                        control: {\n                            d: \"M 0 0 C 0 -30 60 -30 60 0 Z\",\n                            transform: \"translate(calc(w / 2 - 30), -20)\",\n                            stroke: \"#333\",\n                            strokeWidth: 2,\n                            rx: 5,\n                            ry: 5,\n                            fill: \"#666\"\n                        },\n                        label: {\n                            text: \"Valve\",\n                            textAnchor: \"middle\",\n                            textVerticalAnchor: \"top\",\n                            x: \"calc(0.5*w)\",\n                            y: \"calc(h+10)\",\n                            fontSize: 14,\n                            fontFamily: \"sans-serif\",\n                            fill: \"#350100\"\n                        }\n                    },\n                    ports: {\n                        groups: {\n                            pipes: {\n                                position: {\n                                    name: \"absolute\",\n                                    args: {\n                                        x: \"calc(w / 2)\",\n                                        y: \"calc(h / 2)\"\n                                    }\n                                },\n                                markup: util.svg`\n                          <rect @selector=\"pipeBody\" />\n                          <rect @selector=\"pipeEnd\" />\n                      `,\n                                size: { width: 50, height: 30 },\n                                attrs: {\n                                    portRoot: {\n                                        magnetSelector: \"pipeEnd\"\n                                    },\n                                    pipeBody: {\n                                        width: \"calc(w)\",\n                                        height: \"calc(h)\",\n                                        y: \"calc(h / -2)\",\n                                        fill: {\n                                            type: \"linearGradient\",\n                                            stops: [\n                                                { offset: \"0%\", color: \"gray\" },\n                                                { offset: \"30%\", color: \"white\" },\n                                                { offset: \"70%\", color: \"white\" },\n                                                { offset: \"100%\", color: \"gray\" }\n                                            ],\n                                            attrs: {\n                                                x1: \"0%\",\n                                                y1: \"0%\",\n                                                x2: \"0%\",\n                                                y2: \"100%\"\n                                            }\n                                        }\n                                    },\n                                    pipeEnd: {\n                                        width: 10,\n                                        height: \"calc(h+6)\",\n                                        y: \"calc(h / -2 - 3)\",\n                                        stroke: \"gray\",\n                                        strokeWidth: 3,\n                                        fill: \"white\"\n                                    }\n                                }\n                            }\n                        },\n                        items: [\n                            {\n                                id: \"left\",\n                                group: \"pipes\",\n                                z: 0,\n                                attrs: {\n                                    pipeBody: {\n                                        x: \"calc(-1 * w)\"\n                                    },\n                                    pipeEnd: {\n                                        x: \"calc(-1 * w)\"\n                                    }\n                                }\n                            },\n                            {\n                                id: \"right\",\n                                group: \"pipes\",\n                                z: 0,\n                                attrs: {\n                                    pipeEnd: {\n                                        x: \"calc(w - 10)\"\n                                    }\n                                }\n                            }\n                        ]\n                    }\n                };\n            }\n\n            preinitialize() {\n                this.markup = util.svg/* xml */ `\n          <rect @selector=\"stem\" />\n          <path @selector=\"control\" />\n          <ellipse @selector=\"body\" />\n          <rect @selector=\"coverFrame\" />\n          <path @selector=\"liquid\" />\n          <rect @selector=\"cover\" />\n          <text @selector=\"label\" />\n      `;\n            }\n        }\n\n        const ControlValveView = dia.ElementView.extend({\n            presentationAttributes: dia.ElementView.addPresentationAttributes({\n                open: [OPEN_FLAG]\n            }),\n\n            initFlag: [dia.ElementView.Flags.RENDER, OPEN_FLAG],\n\n            framePadding: 6,\n\n            liquidAnimation: null,\n\n            confirmUpdate(...args) {\n                let flags = dia.ElementView.prototype.confirmUpdate.call(this, ...args);\n                this.animateLiquid();\n                if (this.hasFlag(flags, OPEN_FLAG)) {\n                    this.updateCover();\n                    flags = this.removeFlag(flags, OPEN_FLAG);\n                }\n                return flags;\n            },\n\n            updateCover() {\n                const { model } = this;\n                const opening = Math.max(0, Math.min(1, model.get(\"open\") || 0));\n                const [coverEl] = this.findBySelector(\"cover\");\n                const [coverFrameEl] = this.findBySelector(\"coverFrame\");\n                const frameWidth =\n                    Number(coverFrameEl.getAttribute(\"width\")) - this.framePadding;\n                const width = Math.round(frameWidth * (1 - opening));\n                coverEl.animate(\n                    {\n                        width: [`${width}px`]\n                    },\n                    {\n                        fill: \"forwards\",\n                        duration: 200\n                    }\n                );\n            },\n\n            animateLiquid() {\n                if (this.liquidAnimation) return;\n                const [liquidEl] = this.findBySelector(\"liquid\");\n                this.liquidAnimation = liquidEl.animate(\n                    {\n                        // 24 matches the length of the liquid path\n                        strokeDashoffset: [0, 24]\n                    },\n                    {\n                        fill: \"forwards\",\n                        iterations: Infinity,\n                        duration: 3000\n                    }\n                );\n            }\n        });\n\n        class HandValve extends dia.Element {\n            defaults() {\n                return {\n                    ...super.defaults,\n                    type: \"HandValve\",\n                    size: {\n                        width: 50,\n                        height: 50\n                    },\n                    power: 0,\n                    attrs: {\n                        root: {\n                            magnetSelector: \"body\"\n                        },\n                        body: {\n                            rx: \"calc(w / 2)\",\n                            ry: \"calc(h / 2)\",\n                            cx: \"calc(w / 2)\",\n                            cy: \"calc(h / 2)\",\n                            stroke: \"gray\",\n                            strokeWidth: 2,\n                            fill: {\n                                type: \"radialGradient\",\n                                stops: [\n                                    { offset: \"70%\", color: \"white\" },\n                                    { offset: \"100%\", color: \"gray\" }\n                                ]\n                            }\n                        },\n                        status: {\n                            height: \"calc(h /2)\",\n                            width: \"calc(w / 2)\",\n                            rx: \"calc(w / 2)\",\n                            x: \"calc(w / 4)\",\n                            y: \"calc(h / 4)\",\n                            fill: \"white\"\n                        },\n                        stem: {\n                            width: 10,\n                            height: 30,\n                            x: \"calc(w / 2 - 5)\",\n                            y: -30,\n                            stroke: \"#333\",\n                            strokeWidth: 2,\n                            fill: \"#555\"\n                        },\n                        handwheel: {\n                            width: 60,\n                            height: 10,\n                            x: \"calc(w / 2 - 30)\",\n                            y: -30,\n                            stroke: \"#333\",\n                            strokeWidth: 2,\n                            rx: 5,\n                            ry: 5,\n                            fill: \"#666\"\n                        },\n                        label: {\n                            text: \"Valve\",\n                            textAnchor: \"middle\",\n                            textVerticalAnchor: \"top\",\n                            x: \"calc(0.5*w)\",\n                            y: \"calc(h+10)\",\n                            fontSize: \"16\",\n                            fontFamily: \"sans-serif\",\n                            fill: \"#350100\",\n                        }\n                    },\n                    ports: {\n                        groups: {\n                            pipes: {\n                                position: {\n                                    name: \"absolute\",\n                                    args: {\n                                        x: \"calc(w / 2)\",\n                                        y: \"calc(h / 2)\"\n                                    }\n                                },\n                                markup: util.svg`\n                          <rect @selector=\"pipeBody\" />\n                          <rect @selector=\"pipeEnd\" />\n                      `,\n                                size: { width: 50, height: 30 },\n                                attrs: {\n                                    portRoot: {\n                                        magnetSelector: \"pipeEnd\"\n                                    },\n                                    pipeBody: {\n                                        width: \"calc(w)\",\n                                        height: \"calc(h)\",\n                                        y: \"calc(h / -2)\",\n                                        fill: {\n                                            type: \"linearGradient\",\n                                            stops: [\n                                                { offset: \"0%\", color: \"gray\" },\n                                                { offset: \"30%\", color: \"white\" },\n                                                { offset: \"70%\", color: \"white\" },\n                                                { offset: \"100%\", color: \"gray\" }\n                                            ],\n                                            attrs: {\n                                                x1: \"0%\",\n                                                y1: \"0%\",\n                                                x2: \"0%\",\n                                                y2: \"100%\"\n                                            }\n                                        }\n                                    },\n                                    pipeEnd: {\n                                        width: 10,\n                                        height: \"calc(h+6)\",\n                                        y: \"calc(h / -2 - 3)\",\n                                        stroke: \"gray\",\n                                        strokeWidth: 3,\n                                        fill: \"white\"\n                                    }\n                                }\n                            }\n                        },\n                        items: [\n                            {\n                                id: \"left\",\n                                group: \"pipes\",\n                                z: 0,\n                                attrs: {\n                                    pipeBody: {\n                                        x: \"calc(-1 * w)\"\n                                    },\n                                    pipeEnd: {\n                                        x: \"calc(-1 * w)\"\n                                    }\n                                }\n                            },\n                            {\n                                id: \"right\",\n                                group: \"pipes\",\n                                z: 0,\n                                attrs: {\n                                    pipeEnd: {\n                                        x: \"calc(w - 10)\"\n                                    }\n                                }\n                            }\n                        ]\n                    }\n                };\n            }\n\n            preinitialize() {\n                this.markup = util.svg/* xml */ `\n          <rect @selector=\"stem\" />\n          <rect @selector=\"handwheel\" />\n          <ellipse @selector=\"body\" />\n          <text @selector=\"label\" />\n          <rect @selector=\"status\" />\n      `;\n            }\n        }\n        class LiquidTank extends dia.Element {\n            defaults() {\n                return {\n                    ...super.defaults,\n                    type: \"LiquidTank\",\n                    size: {\n                        width: 160,\n                        height: 300\n                    },\n                    attrs: {\n                        root: {\n                            magnetSelector: \"body\"\n                        },\n                        legs: {\n                            fill: \"none\",\n                            stroke: \"#350100\",\n                            strokeWidth: 8,\n                            strokeLinecap: \"round\",\n                            d: \"M 20 calc(h) l -5 10 M calc(w - 20) calc(h) l 5 10\"\n                        },\n                        body: {\n                            stroke: \"gray\",\n                            strokeWidth: 4,\n                            x: 0,\n                            y: 0,\n                            width: \"calc(w)\",\n                            height: \"calc(h)\",\n                            rx: 120,\n                            ry: 10,\n                            fill: {\n                                type: \"linearGradient\",\n                                stops: [\n                                    { offset: \"0%\", color: \"gray\" },\n                                    { offset: \"30%\", color: \"white\" },\n                                    { offset: \"70%\", color: \"white\" },\n                                    { offset: \"100%\", color: \"gray\" }\n                                ]\n                            }\n                        },\n                        top: {\n                            x: 0,\n                            y: 20,\n                            width: \"calc(w)\",\n                            height: 20,\n                            fill: \"none\",\n                            stroke: \"gray\",\n                            strokeWidth: 2\n                        },\n                        label: {\n                            text: \"Tank 1\",\n                            textAnchor: \"middle\",\n                            textVerticalAnchor: \"top\",\n                            x: \"calc(w / 2)\",\n                            y: \"calc(h + 10)\",\n                            fontSize: 14,\n                            fontFamily: \"sans-serif\",\n                            fill: \"#350100\"\n                        }\n                    }\n                };\n            }\n\n            preinitialize() {\n                this.markup = util.svg/* xml */ `\n            <path @selector=\"legs\"/>\n            <rect @selector=\"body\"/>\n            <rect @selector=\"top\"/>\n            <text @selector=\"label\" />\n        `;\n            }\n\n            get level() {\n                return this.get(\"level\") || 0;\n            }\n\n            set level(level) {\n                const newLevel = Math.max(0, Math.min(100, level));\n                this.set(\"level\", newLevel);\n            }\n        }\n\n        const LEVEL_FLAG = \"LEVEl\";\n\n        const PanelView = dia.ElementView.extend({\n            presentationAttributes: dia.ElementView.addPresentationAttributes({\n                level: [LEVEL_FLAG],\n                color: [LEVEL_FLAG]\n            }),\n\n            initFlag: [dia.ElementView.Flags.RENDER, LEVEL_FLAG],\n\n            confirmUpdate(...args) {\n                let flags = dia.ElementView.prototype.confirmUpdate.call(this, ...args);\n                if (this.hasFlag(flags, LEVEL_FLAG)) {\n                    this.updateLevel();\n                    flags = this.removeFlag(flags, LEVEL_FLAG);\n                }\n                return flags;\n            },\n\n            updateLevel() {\n                const { model } = this;\n                const level = Math.max(0, Math.min(100, model.get(\"level\") || 0));\n                const color = model.get(\"color\") || \"red\";\n                const [liquidEl] = this.findBySelector(\"liquid\");\n                const [windowEl] = this.findBySelector(\"frame\");\n                const windowHeight = Number(windowEl.getAttribute(\"height\"));\n                const height = Math.round((windowHeight * level) / 100);\n                liquidEl.animate(\n                    {\n                        height: [`${height}px`],\n                        fill: [color]\n                    },\n                    {\n                        fill: \"forwards\",\n                        duration: 1000\n                    }\n                );\n            }\n        });\n\n        class ConicTank extends dia.Element {\n            defaults() {\n                return {\n                    ...super.defaults,\n                    type: \"ConicTank\",\n                    size: {\n                        width: 160,\n                        height: 100\n                    },\n                    attrs: {\n                        root: {\n                            magnetSelector: \"body\"\n                        },\n                        body: {\n                            stroke: \"gray\",\n                            strokeWidth: 4,\n                            x: 0,\n                            y: 0,\n                            width: \"calc(w)\",\n                            height: \"calc(h)\",\n                            rx: 120,\n                            ry: 10,\n                            fill: {\n                                type: \"linearGradient\",\n                                stops: [\n                                    { offset: \"0%\", color: \"gray\" },\n                                    { offset: \"30%\", color: \"white\" },\n                                    { offset: \"70%\", color: \"white\" },\n                                    { offset: \"100%\", color: \"gray\" }\n                                ]\n                            }\n                        },\n                        top: {\n                            x: 0,\n                            y: 20,\n                            width: \"calc(w)\",\n                            height: 20,\n                            fill: \"none\",\n                            stroke: \"gray\",\n                            strokeWidth: 2\n                        },\n                        bottom: {\n                            d: \"M 0 0 L calc(w) 0 L calc(w / 2 + 10) 70 h -20 Z\",\n                            transform: \"translate(0, calc(h - 10))\",\n                            stroke: \"gray\",\n                            strokeLinejoin: \"round\",\n                            strokeWidth: 2,\n                            fill: {\n                                type: \"linearGradient\",\n                                stops: [\n                                    { offset: \"10%\", color: \"#aaa\" },\n                                    { offset: \"30%\", color: \"#fff\" },\n                                    { offset: \"90%\", color: \"#aaa\" }\n                                ],\n                                attrs: {\n                                    gradientTransform: \"rotate(-10)\"\n                                }\n                            }\n                        },\n                        label: {\n                            text: \"Tank 2\",\n                            textAnchor: \"middle\",\n                            textVerticalAnchor: \"bottom\",\n                            x: \"calc(w / 2)\",\n                            y: -10,\n                            fontSize: 14,\n                            fontFamily: \"sans-serif\",\n                            fill: \"#350100\"\n                        }\n                    }\n                };\n            }\n\n            preinitialize() {\n                this.markup = util.svg/* xml */ `\n          <path @selector=\"bottom\"/>\n          <rect @selector=\"body\"/>\n          <rect @selector=\"top\"/>\n          <text @selector=\"label\" />\n      `;\n            }\n        }\n\n        class Panel extends dia.Element {\n            defaults() {\n                return {\n                    ...super.defaults,\n                    type: \"Panel\",\n                    size: {\n                        width: 100,\n                        height: 230\n                    },\n                    level: 0,\n                    attrs: {\n                        root: {\n                            magnetSelector: \"panelBody\"\n                        },\n                        panelBody: {\n                            x: 0,\n                            y: 0,\n                            width: \"calc(w)\",\n                            height: \"calc(h)\",\n                            rx: 1,\n                            ry: 1,\n                            fill: \"lightgray\",\n                            stroke: \"gray\",\n                            strokeWidth: 1\n                        },\n                        panelWindow: {\n                            // turn the panel over so that we can grow the liquid from the bottom\n                            // by increasing the height of the bar.\n                            transform: \"translate(10, 10) rotate(180) translate(-40,-205)\"\n                        },\n                        panelTicks: {\n                            transform: \"translate(55, 15)\",\n                            d: `M 0 0 h 8 M 0 ${step} h 8 M 0 ${step * 2} h 8 M 0 ${step * 3\n                                } h 8 M 0 ${step * 4} h 8 M 0 ${step * 5} h 8 M 0 ${step * 6\n                                } h 8 M 0 ${step * 7} h 8 M 0 ${step * 8} h 8 M 0 ${step * 9\n                                } h 8 M 0 ${step * 10} h 8`,\n                            fill: \"none\",\n                            stroke: \"black\",\n                            strokeWidth: 2,\n                            strokeLinecap: \"round\"\n                        },\n                        panelValues: {\n                            text: \"100\\n90\\n80\\n70\\n60\\n50\\n40\\n30\\n20\\n10\\n0\",\n                            textAnchor: \"middle\",\n                            textVerticalAnchor: \"top\",\n                            x: 80,\n                            y: 10,\n                            lineHeight: step,\n                            fontSize: 14,\n                            fontFamily: \"sans-serif\"\n                        },\n                        frame: {\n                            width: 40,\n                            height: 200,\n                            rx: 1,\n                            ry: 1,\n                            fill: \"none\",\n                            stroke: \"black\",\n                            strokeWidth: 3\n                        },\n                        liquid: {\n                            x: 0,\n                            y: 0,\n                            width: 40,\n                            height: 0,\n                            stroke: \"black\",\n                            strokeWidth: 2,\n                            strokeOpacity: 0.2,\n                            fill: MIN_LIQUID_COLOR\n                        },\n                        glass: {\n                            x: 0,\n                            y: 0,\n                            width: 40,\n                            height: 200,\n                            fill: \"blue\",\n                            stroke: \"none\",\n                            fillOpacity: 0.1\n                        },\n                        label: {\n                            text: \"Tank 1\",\n                            textAnchor: \"middle\",\n                            textVerticalAnchor: \"top\",\n                            x: \"calc(w / 2)\",\n                            y: \"calc(h + 10)\",\n                            fontSize: 20,\n                            fontFamily: \"sans-serif\",\n                            fill: \"#350100\"\n                        }\n                    }\n                };\n            }\n\n            preinitialize() {\n                this.markup = util.svg/* xml */ `\n            <rect @selector=\"panelBody\"/>\n            <path @selector=\"panelTicks\"/>\n            <text @selector=\"panelValues\" />\n            <g @selector=\"panelWindow\">\n                <rect @selector=\"glass\"/>\n                <rect @selector=\"liquid\"/>\n                <rect @selector=\"frame\"/>\n            </g>\n      `;\n            }\n        }\n\n        class Pipe extends dia.Link {\n            defaults() {\n                return {\n                    ...super.defaults,\n                    type: \"Pipe\",\n                    z: -1,\n                    router: { name: \"rightAngle\" },\n                    flow: 0,\n                    attrs: {\n                        liquid: {\n                            connection: true,\n                            stroke: LIQUID_COLOR,\n                            strokeWidth: 10,\n                            strokeLinejoin: \"round\",\n                            strokeLinecap: \"square\",\n                            strokeDasharray: \"10,20\"\n                        },\n                        line: {\n                            connection: true,\n                            stroke: \"#eee\",\n                            strokeWidth: 10,\n                            strokeLinejoin: \"round\",\n                            strokeLinecap: \"round\"\n                        },\n                        outline: {\n                            connection: true,\n                            stroke: \"#444\",\n                            strokeWidth: 16,\n                            strokeLinejoin: \"round\",\n                            strokeLinecap: \"round\"\n                        }\n                    }\n                };\n            }\n\n            preinitialize() {\n                this.markup = util.svg/* xml */ `\n            <path @selector=\"outline\" fill=\"none\"/>\n            <path @selector=\"line\" fill=\"none\"/>\n            <path @selector=\"liquid\" fill=\"none\"/>\n        `;\n            }\n        }\n\n        const PipeView = dia.LinkView.extend({\n            presentationAttributes: dia.LinkView.addPresentationAttributes({\n                flow: [FLOW_FLAG]\n            }),\n\n            initFlag: [...dia.LinkView.prototype.initFlag, FLOW_FLAG],\n\n            flowAnimation: null,\n\n            confirmUpdate(...args) {\n                let flags = dia.LinkView.prototype.confirmUpdate.call(this, ...args);\n                if (this.hasFlag(flags, FLOW_FLAG)) {\n                    this.updateFlow();\n                    flags = this.removeFlag(flags, FLOW_FLAG);\n                }\n                return flags;\n            },\n\n            getFlowAnimation() {\n                let { flowAnimation } = this;\n                if (flowAnimation) return flowAnimation;\n                const [liquidEl] = this.findBySelector(\"liquid\");\n                // stroke-dashoffset = sum(stroke-dasharray) * n;\n                // 90 = 10 + 20 + 10 + 20 + 10 + 20\n                const keyframes = { strokeDashoffset: [90, 0] };\n                flowAnimation = liquidEl.animate(keyframes, {\n                    fill: \"forwards\",\n                    duration: 1000,\n                    iterations: Infinity\n                });\n                this.flowAnimation = flowAnimation;\n                return flowAnimation;\n            },\n\n            updateFlow() {\n                const { model } = this;\n                const flowRate = model.get(\"flow\") || 0;\n                this.getFlowAnimation().playbackRate = flowRate;\n                const [liquidEl] = this.findBySelector(\"liquid\");\n                liquidEl.style.stroke = flowRate === 0 ? \"#ccc\" : \"\";\n            }\n        });\n\n        class Zone extends joint.dia.Element {\n            defaults() {\n                return {\n                    ...super.defaults,\n                    type: \"Zone\",\n                    size: {\n                        width: 120,\n                        height: 40\n                    },\n                    attrs: {\n                        body: {\n                            fill: \"#ffffff\",\n                            stroke: \"#cad8e3\",\n                            strokeWidth: 1,\n                            d: \"M 0 calc(0.5*h) calc(0.5*h) 0 H calc(w) V calc(h) H calc(0.5*h) Z\"\n                        },\n                        label: {\n                            fontSize: 14,\n                            fontFamily: \"sans-serif\",\n                            fontWeight: \"bold\",\n                            fill: LIQUID_COLOR,\n                            textVerticalAnchor: \"middle\",\n                            textAnchor: \"middle\",\n                            x: \"calc(w / 2 + 10)\",\n                            y: \"calc(h / 2)\"\n                        }\n                    }\n                };\n            }\n\n            preinitialize() {\n                this.markup = util.svg/* xml */ `\n            <path @selector=\"body\"/>\n            <text @selector=\"label\"/>\n        `;\n            }\n        }\n\n        class Join extends dia.Element {\n            defaults() {\n                return {\n                    ...super.defaults,\n                    type: \"Join\",\n                    size: {\n                        width: 30,\n                        height: 30\n                    },\n                    attrs: {\n                        body: {\n                            fill: \"#eee\",\n                            stroke: \"#666\",\n                            strokeWidth: 2,\n                            d:\n                                \"M 10 0 H calc(w - 10) l 10 10 V calc(h - 10) l -10 10 H 10 l -10 -10 V 10 Z\"\n                        }\n                    }\n                };\n            }\n\n            preinitialize() {\n                this.markup = util.svg/* xml */ `\n            <path @selector=\"body\"/>\n        `;\n            }\n        }\n\n        class WaterStation extends joint.dia.Element {\n            defaults() {\n                return {\n                    ...super.defaults,\n                    type: 'WaterStation',\n                    position: { x: 10, y: 10 },\n                    size: { width: 150, height: 60 },\n                    power: 0,\n                    attrs: {\n                        body: {\n                            width: \"calc(w)\",\n                            height: \"calc(h)\",\n                            fill: \"white\",\n                            stroke: \"black\",\n                            strokeWidth: 1\n                        },\n                        label: {\n                            text: \"Water Station\",\n                            textAnchor: \"middle\",\n                            textVerticalAnchor: \"middle\",\n                            x: \"calc(w / 2)\",\n                            y: \"calc(h / 2)\",\n                            fontSize: 20,\n                            fontFamily: \"sans-serif\",\n                            fill: \"black\",\n                            fontWeight: \"bold\",\n                        }\n                    }\n                };\n            }\n\n            preinitialize() {\n                this.markup = joint.util.svg/* xml */ `\n            <rect @selector=\"body\" />\n            <text @selector=\"label\" />\n        `;\n            }\n        }\n\n        class LevelSensor extends joint.dia.Element {\n            defaults() {\n                return {\n                    ...super.defaults,\n                    type: 'LevelSensor',\n                    position: { x: 10, y: 10 },\n                    size: { width: 80, height: 80 },\n                    attrs: {\n                        body: {\n                            width: \"calc(w)\",\n                            height: \"calc(h)\",\n                            fill: \"#1C00ff00\",\n                            // stroke: \"black\",\n                            // strokeWidth: 1\n                        },\n                        label: {\n                            text: \"LT\",\n                            textAnchor: \"middle\",\n                            textVerticalAnchor: \"middle\",\n                            x: \"calc(w + 5)\",\n                            y: \"calc(h / 2)\",\n                            fontSize: 20,\n                            fontFamily: \"sans-serif\",\n                            fill: \"#350100\"\n                        },\n                        ima: {\n                            x: 0,\n                            y: 0,\n                            width: \"calc(w)\",\n                            height: \"calc(h)\",\n                            \"xlink:href\": \"sensor/LT.png\",\n                        },\n                        bgbox: {\n                            height: \"calc(w / 3)\",\n                            width: \"calc(w)\",\n                            x: \"calc(w/4)\",\n                            y: \"-calc(h/3)\",\n                            fontSize: 20,\n                            fontFamily: \"sans-serif\",\n                            fill: \"#cfffdb\",\n                            stroke: \"#41e4da\",\n                            strokeWidth: 2\n                        },\n                        value: {\n                            text: \"00 ft\",\n                            textAnchor: \"middle\",\n                            textVerticalAnchor: \"middle\",\n                            x: \"calc(w / 1.3)\",\n                            y: \"-calc(h/7)\",\n                            fontSize: 20,\n                            fontFamily: \"sans-serif\",\n                            fill: \"#350100\"\n\n                        }\n                    }\n                };\n            }\n\n            preinitialize() {\n                this.markup = joint.util.svg/* xml */ `\n            <rect @selector=\"body\" />\n            <image @selector=\"ima\" />\n            <text @selector=\"label\" />\n            <rect @selector=\"bgbox\" />\n            <text @selector=\"value\" />\n        `;\n            }\n        }\n\n        class FlowSensor extends joint.dia.Element {\n            defaults() {\n                return {\n                    ...super.defaults,\n                    type: 'FlowSensor',\n                    position: { x: 10, y: 10 },\n                    size: { width: 80, height: 80 },\n                    attrs: {\n                        body: {\n                            width: \"calc(w)\",\n                            height: \"calc(h)\",\n                            fill: \"#1C00ff00\",\n                            // stroke: \"black\",\n                            // strokeWidth: 1\n                        },\n                        label: {\n                            text: \"FT\",\n                            textAnchor: \"middle\",\n                            textVerticalAnchor: \"middle\",\n                            x: \"calc(w + 7)\",\n                            y: \"calc(h / 2)\",\n                            fontSize: 20,\n                            fontFamily: \"sans-serif\",\n                            fill: \"#350100\"\n                        },\n                        ima: {\n                            x: 0,\n                            y: 0,\n                            width: \"calc(w)\",\n                            height: \"calc(h)\",\n                            \"xlink:href\": \"sensor/FT.png\",\n                        },\n                        bgbox: {\n                            height: \"calc(w / 3)\",\n                            width: \"calc(w)\",\n                            x: \"calc(w/4)\",\n                            y: \"-calc(h/3)\",\n                            fontSize: 20,\n                            fontFamily: \"sans-serif\",\n                            fill: \"#cfffdb\",\n                            stroke: \"#41e4da\",\n                            strokeWidth: 2\n                        },\n                        value: {\n                            text: \"000 m3\",\n                            textAnchor: \"middle\",\n                            textVerticalAnchor: \"middle\",\n                            x: \"calc(w / 1.3)\",\n                            y: \"-calc(h/7)\",\n                            fontSize: 20,\n                            fontFamily: \"sans-serif\",\n                            fill: \"#350100\"\n                        }\n                    }\n                };\n            }\n\n            preinitialize() {\n                this.markup = joint.util.svg/* xml */ `\n            <rect @selector=\"body\" />\n            <image @selector=\"ima\" />\n            <rect @selector=\"bgbox\" />\n            <text @selector=\"value\" />\n            <text @selector=\"label\" />\n        `;\n            }\n        }\n\n        class PressureSensor extends joint.dia.Element {\n            defaults() {\n                return {\n                    ...super.defaults,\n                    type: 'PressureSensor',\n                    position: { x: 10, y: 10 },\n                    size: { width: 80, height: 80 },\n                    attrs: {\n                        body: {\n                            width: \"calc(w)\",\n                            height: \"calc(h)\",\n                            fill: \"#1C00ff00\",\n                            // stroke: \"black\",\n                            // strokeWidth: 1\n                        },\n                        label: {\n                            text: \"FT\",\n                            textAnchor: \"middle\",\n                            textVerticalAnchor: \"middle\",\n                            x: \"calc(w + 14)\",\n                            y: \"calc(h / 2)\",\n                            fontSize: 20,\n                            fontFamily: \"sans-serif\",\n                            fill: \"#350100\"\n                        },\n                        ima: {\n                            x: 0,\n                            y: 0,\n                            width: \"calc(w)\",\n                            height: \"calc(h)\",\n                            \"xlink:href\": \"sensor/PT.png\",\n                        },\n                        bgbox: {\n                            height: \"calc(w / 3)\",\n                            width: \"calc(w)\",\n                            x: \"calc(w/4)\",\n                            y: \"-calc(h/3)\",\n                            fontSize: 20,\n                            fontFamily: \"sans-serif\",\n                            fill: \"#cfffdb\",\n                            stroke: \"#41e4da\",\n                            strokeWidth: 2\n                        },\n                        value: {\n                            text: \"000 bar\",\n                            textAnchor: \"middle\",\n                            textVerticalAnchor: \"middle\",\n                            x: \"calc(w / 1.3)\",\n                            y: \"-calc(h/7)\",\n                            fontSize: 20,\n                            fontFamily: \"sans-serif\",\n                            fill: \"#350100\"\n                        }\n                    }\n                };\n            }\n\n            preinitialize() {\n                this.markup = joint.util.svg/* xml */ `\n            <rect @selector=\"body\" />\n            <image @selector=\"ima\" />\n            <text @selector=\"label\" />\n            <rect @selector=\"bgbox\" />\n            <text @selector=\"value\" />\n        `;\n            }\n        }\n\n        class Rectangle extends joint.dia.Element {\n            defaults() {\n                return {\n                    ...super.defaults,\n                    type: 'Rectangle',\n                    position: { x: 10, y: 10 },\n                    size: {\n                        height: 250,\n                        width: 300\n                    },\n                    attrs: {\n                        body: {\n                            width: \"calc(w)\",\n                            height: \"calc(h)\",\n                            fill: \"#1C00ff00\", // transparent color code\n                            // fill: \"red\",\n                            stroke: \"black\",\n                            strokeWidth: 3,\n\n                        },\n                        ima1: {\n                            x: 0,\n                            y: 0,\n                            width: \"calc(w)\",\n                            \"xlink:href\": \"waterFilter/11.png\",\n                        },\n                        ima2: {\n                            x: 0,\n                            y: \"calc(.11*h)\",\n                            width: \"calc(w)\",\n                            \"xlink:href\": \"waterFilter/22.png\",\n                        },\n                        ima3: {\n                            x: 0,\n                            y: \"calc(.23*h)\",\n                            width: \"calc(w)\",\n                            \"xlink:href\": \"waterFilter/33.png\",\n                        },\n                        ima4: {\n                            x: 0,\n                            y: \"calc(.5*h)\",\n                            width: \"calc(w)\",\n                            \"xlink:href\": \"waterFilter/44.png\",\n                        },\n                        // ima5: {\n                        //     x: 0,\n                        //     y: \"calc(.5*h)\",\n                        //     width: \"calc(w)\",\n                        //     \"xlink:href\": \"waterFilter/55.png\",\n                        // },\n                        ima6: {\n                            x: 0,\n                            y: \"calc(.55*h)\",\n                            width: \"calc(w)\",\n                            \"xlink:href\": \"waterFilter/66.png\",\n                        },\n                        ima7: {\n                            x: 0,\n                            y: \"calc(.4*h)\",\n                            width: \"calc(w)\",\n                            \"xlink:href\": \"waterFilter/77.png\",\n                        },\n                        ima8: {\n                            x: 0,\n                            y: \"calc(.715*h)\",\n                            width: \"calc(w)\",\n                            \"xlink:href\": \"waterFilter/77.png\",\n                        }\n                    }\n                };\n            }\n\n            preinitialize() {\n                this.markup = joint.util.svg/* xml */ `\n            <rect @selector=\"body\" />\n            <image @selector=\"ima8\" />\n            <image @selector=\"ima7\" />\n            <image @selector=\"ima5\" />\n            <image @selector=\"ima6\" />\n            <image @selector=\"ima4\" />\n            <image @selector=\"ima3\" />\n            <image @selector=\"ima2\" />\n            <image @selector=\"ima1\" />\n            \n        `;\n            }\n        }\n\n        const namespace = {\n            ...shapes,\n            Zone,\n            Pipe,\n            PipeView,\n            LiquidTank,\n            ConicTank,\n            Panel,\n            PanelView,\n            Pump,\n            PumpView,\n            ControlValve,\n            ControlValveView,\n            HandValve,\n            Join\n        };\n\n        const graph = new dia.Graph(\n            {},\n            {\n                cellNamespace: namespace\n            }\n        );\n\n        const paper = new dia.Paper({\n            model: graph,\n            width: \"100%\",\n            height: \"100%\",\n            async: true,\n            frozen: true,\n            sorting: dia.Paper.sorting.APPROX,\n            background: { color: \"#F3F7F6\" },\n            interactive: {\n                linkMove: false,\n                stopDelegation: false,\n                elementMove: false // Disable interactions\n\n            },\n            cellViewNamespace: namespace,\n            defaultAnchor: {\n                name: \"perpendicular\"\n            }\n        });\n\n        paperContainerEl.appendChild(paper.el);\n\n        // sensors\n        const levelSensor1 = new LevelSensor({\n            position: { x: 170, y: 115 },\n            attrs: {\n                label: {\n                    text: \"LT-1\"\n                }\n            }\n        });\n        levelSensor1.addTo(graph);\n\n        const levelSensor2 = new LevelSensor({\n            position: { x: 620, y: 115 },\n            attrs: {\n                label: {\n                    text: \"LT-2\"\n                }\n            }\n        });\n        levelSensor2.addTo(graph);\n\n        const levelSensor3 = new LevelSensor({\n            position: { x: 790, y: 115 },\n            attrs: {\n                label: {\n                    text: \"LT-3\"\n                }\n            }\n        });\n        levelSensor3.addTo(graph);\n\n        const levelSensor4 = new LevelSensor({\n            position: { x: 1240, y: 115 },\n            attrs: {\n                label: {\n                    text: \"LT-4\"\n                }\n            }\n        });\n        levelSensor4.addTo(graph);\n\n        const levelSensor5 = new LevelSensor({\n            position: { x: 1730, y: 50 },\n            attrs: {\n                label: {\n                    text: \"LT-5\"\n                }\n            }\n        });\n        levelSensor5.addTo(graph);\n\n        const levelSensor6 = new LevelSensor({\n            position: { x: 230, y: 820 },\n            attrs: {\n                label: {\n                    text: \"LT-6\"\n                }\n            }\n        });\n        levelSensor6.addTo(graph);\n\n        const flowSensor1 = new FlowSensor({\n            position: { x: 1340, y: 595 },\n            attrs: {\n                label: {\n                    text: \"FT-1\"\n                },\n                // value: {\n                //     text: \"samir\"\n                // }\n            }\n        });\n        flowSensor1.addTo(graph);\n        // flowSensor1.attr('value/text', \"gogle\")\n\n        const flowSensor2 = new FlowSensor({\n            position: { x: 1440, y: 895 },\n            attrs: {\n                label: {\n                    text: \"FT-2\"\n                }\n            }\n        });\n        flowSensor2.addTo(graph);\n\n        const flowSensor3 = new FlowSensor({\n            position: { x: 1780, y: 540 },\n            attrs: {\n                label: {\n                    text: \"FT-3\"\n                }\n            }\n        });\n        flowSensor3.addTo(graph);\n\n        const pressureSensor1 = new PressureSensor({\n            position: { x: 930, y: 740 },\n            attrs: {\n                label: {\n                    text: \"PT-1\"\n                }\n            }\n        });\n        pressureSensor1.addTo(graph);\n\n        const pressureSensor2 = new PressureSensor({\n            position: { x: 930, y: 890 },\n            attrs: {\n                label: {\n                    text: \"PT-2\"\n                }\n            }\n        });\n        pressureSensor2.addTo(graph);\n\n        const pressureSensor3 = new PressureSensor({\n            position: { x: 930, y: 1040 },\n            attrs: {\n                label: {\n                    text: \"PT-3\"\n                }\n            }\n        });\n        pressureSensor3.addTo(graph);\n\n        // water stations \n        const station1 = new WaterStation({\n            position: { x: 380, y: 50 },\n            // power: 1,\n            attrs: {\n                label: {\n                    text: \"From Pump\\nStation-1\"\n                }\n            }\n        });\n        station1.addTo(graph);\n\n        const station2 = new WaterStation({\n            position: { x: 1000, y: 50 },\n            // power: 0,\n            attrs: {\n                label: {\n                    text: \"From Pump\\nStation-2\"\n                }\n            }\n        });\n        station2.addTo(graph);\n\n        // filters\n        const filter1 = new Rectangle({\n            position: { x: 150, y: 200 },\n        });\n        filter1.addTo(graph);\n\n        const filter2 = new Rectangle({\n            position: { x: 460, y: 200 },\n        });\n        filter2.addTo(graph);\n\n        const filter3 = new Rectangle({\n            position: { x: 770, y: 200 },\n        });\n        filter3.addTo(graph);\n\n        const filter4 = new Rectangle({\n            position: { x: 1080, y: 200 },\n        });\n        filter4.addTo(graph);\n\n        // Tanks\n\n        const tank1 = new LiquidTank({\n            position: { x: 50, y: 250 }\n        });\n        const panel1 = new Panel({\n            position: { x: 70, y: 300 }\n        });\n\n        const reservoir = new ReservoirTank({\n            position: { x: 50, y: 900 },\n            size: { width: 500, height: 300 },\n            attrs: {\n                label: {\n                    text: \"Clean Water\\nReservoir\",\n                    fontSize: 20\n                }\n            }\n        });\n        reservoir.addTo(graph);\n\n        const overhead_tank = new ConicTank({\n            position: { x: 1600, y: 130 },\n            size: { width: 350, height: 200 },\n            attrs: {\n                label: {\n                    text: \"Overhead Tank\",\n                    y: \"calc(h/2+20)\",\n                    fontSize: 20\n                }\n            }\n        });\n        overhead_tank.addTo(graph);\n        // When the tank level changes, update the panel level and color.\n        panel1.listenTo(tank1, \"change:level\", (_, level) => {\n            const color =\n                level > 80\n                    ? MAX_LIQUID_COLOR\n                    : level < 20\n                        ? MIN_LIQUID_COLOR\n                        : LIQUID_COLOR;\n            panel1.set({ level, color });\n        });\n\n        // tank1.addTo(graph);\n        // panel1.addTo(graph);\n        tank1.embed(panel1);\n\n        // Tank 2\n\n        const tank2 = new ConicTank({\n            position: { x: 820, y: 200 }\n        });\n\n        // tank2.addTo(graph);\n\n        // Pumps\n\n        const pump1 = new Pump({\n            position: { x: 750, y: 800 },\n            attrs: {\n                label: {\n                    text: \"Pump 1\",\n                    y: -20,\n                }\n            }\n        });\n\n        pump1.addTo(graph);\n        pump1.power = 0;\n\n        const pump2 = new Pump({\n            position: { x: 750, y: 950 },\n            attrs: {\n                label: {\n                    text: \"Pump 2\",\n                    y: -20,\n                }\n            }\n        });\n\n        pump2.addTo(graph);\n        pump2.power = 0;\n\n        const pump3 = new Pump({\n            position: { x: 750, y: 1100 },\n            attrs: {\n                label: {\n                    text: \"Pump 3\",\n                    y: -20,\n                }\n            }\n        });\n\n        pump3.addTo(graph);\n        pump3.power = 0;\n\n\n\n        // CTRL Valves\n\n        const controlValve1 = new ControlValve({\n            position: { x: 300, y: 295 },\n            open: 1,\n            attrs: {\n                label: {\n                    text: \"CTRL Valve 1\"\n                }\n            }\n        });\n\n        // controlValve1.addTo(graph);\n\n        const controlValve2 = new ControlValve({\n            position: { x: 300, y: 495 },\n            open: 0.25,\n            attrs: {\n                label: {\n                    text: \"CTRL Valve 2\"\n                }\n            }\n        });\n\n        // controlValve2.addTo(graph);\n\n        // Zones\n\n        const zone1 = new Zone({\n            position: { x: 50, y: 800 },\n            // angle: 270,\n            attrs: {\n                label: {\n                    text: \"Zone 1\"\n                },\n                body: {\n                    transform: \"translate(140, 40) rotate(180)\"\n                }\n            }\n        });\n\n        const zone2 = new Zone({\n            position: { x: 1830, y: 600 },\n            attrs: {\n                label: {\n                    text: \"To Consumer\"\n                }\n            }\n        });\n\n        const zone3 = new Zone({\n            position: { x: 50, y: 740 },\n            attrs: {\n                label: {\n                    text: \"To Drain\"\n                },\n                body: {\n                    transform: \"translate(140, 40) rotate(180)\"\n                }\n            }\n        });\n\n        graph.addCells([zone2, zone3]);\n\n        // Hand Valves\n\n        const handValve1 = new HandValve({\n            position: { x: 1100, y: 800 },\n            open: 1,\n            angle: 0,\n            attrs: {\n                label: {\n                    text: \"Valve 1\"\n                }\n            }\n        });\n\n        handValve1.addTo(graph);\n\n        const handValve2 = new HandValve({\n            position: { x: 1100, y: 950 },\n            open: 0,\n            angle: 0,\n            attrs: {\n                label: {\n                    text: \"Valve 2\"\n                }\n            }\n        });\n\n        handValve2.addTo(graph);\n\n        const handValve3 = new HandValve({\n            position: { x: 1100, y: 1100 },\n            open: 0,\n            angle: 0,\n            attrs: {\n                label: {\n                    text: \"Valve 3\"\n                }\n            }\n        });\n        handValve3.addTo(graph);\n\n        const handValve4 = new HandValve({\n            position: { x: 1370, y: 950 },\n            open: 1,\n            angle: 0,\n            attrs: {\n                label: {\n                    text: \"Valve4\"\n                }\n            }\n        });\n        handValve4.addTo(graph);\n\n        const handValve5 = new HandValve({\n            position: { x: 1440, y: 650 },\n            open: 0,\n            angle: 0,\n            attrs: {\n                label: {\n                    text: \"Valve 5\"\n                }\n            }\n        });\n        handValve5.addTo(graph);\n\n        const handValve6 = new HandValve({\n            position: { x: 1205, y: 520 },\n            open: 1,\n            angle: 270,\n            attrs: {\n                label: {\n                    text: \"Valve 6\"\n                }\n            }\n        });\n        handValve6.addTo(graph);\n\n        const handValve7 = new HandValve({\n            position: { x: 895, y: 520 },\n            open: 1,\n            angle: 270,\n            attrs: {\n                label: {\n                    text: \"Valve 7\"\n                }\n            }\n        });\n        handValve7.addTo(graph);\n\n        const handValve8 = new HandValve({\n            position: { x: 585, y: 520 },\n            open: 0,\n            angle: 270,\n            attrs: {\n                label: {\n                    text: \"Valve 8\"\n                }\n            }\n        });\n        handValve8.addTo(graph);\n\n        const handValve9 = new HandValve({\n            position: { x: 275, y: 520 },\n            open: 0,\n            angle: 270,\n            attrs: {\n                label: {\n                    text: \"Valve 9\"\n                }\n            }\n        });\n        handValve9.addTo(graph);\n\n        const handValve10 = new HandValve({\n            position: { x: 185, y: 620 },\n            open: 1,\n            angle: 270,\n            attrs: {\n                label: {\n                    text: \"Valve 10\"\n                }\n            }\n        });\n        handValve10.addTo(graph);\n\n        const handValve11 = new HandValve({\n            position: { x: 390, y: 760 },\n            open: 1,\n            angle: 270,\n            attrs: {\n                label: {\n                    text: \"Valve 11\"\n                }\n            }\n        });\n        handValve11.addTo(graph);\n\n        // Joins\n\n        const join1 = new Join({\n            position: { x: 640, y: 860 }\n        });\n\n        join1.addTo(graph);\n\n        const join2 = new Join({\n            position: { x: 640, y: 1010 }\n        });\n\n        join2.addTo(graph);\n\n        const join3 = new Join({\n            position: { x: 640, y: 1160 }\n        });\n\n        join3.addTo(graph);\n\n        const join4 = new Join({\n            position: { x: 1260, y: 960 }\n        });\n\n        join4.addTo(graph);\n\n        const join5 = new Join({\n            position: { x: 1215, y: 660 }\n        });\n        join5.addTo(graph);\n\n        const join6 = new Join({\n            position: { x: 905, y: 660 }\n        });\n        join6.addTo(graph);\n\n        const join7 = new Join({\n            position: { x: 595, y: 660 }\n        });\n        join7.addTo(graph);\n\n        const join8 = new Join({\n            position: { x: 285, y: 660 }\n        });\n        join8.addTo(graph);\n\n        const join9 = new Join({\n            position: { x: 400, y: 620 }\n        });\n        join9.addTo(graph);\n\n        const join10 = new Join({\n            position: { x: 700, y: 620 }\n        });\n        join10.addTo(graph);\n\n        const join11 = new Join({\n            position: { x: 1000, y: 620 }\n        });\n        join11.addTo(graph);\n\n        const join12 = new Join({\n            position: { x: 1300, y: 620 }\n        });\n        join12.addTo(graph);\n\n        const join13 = new Join({\n            position: { x: 440, y: 620 }\n        });\n        // join13.addTo(graph);\n\n        const join14 = new Join({\n            position: { x: 440, y: 140 }\n        });\n        join14.addTo(graph);\n\n        const join15 = new Join({\n            position: { x: 1060, y: 140 }\n        });\n        join15.addTo(graph);\n\n        // Pipes\n\n        const tank1Pipe1 = new Pipe({\n            source: {\n                id: tank1.id,\n                anchor: { name: \"right\", args: { dy: -25 } },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: controlValve1.id,\n                port: \"left\",\n                anchor: { name: \"left\" }\n            }\n        });\n\n        // tank1Pipe1.addTo(graph);\n\n        const reservoirToJoin3 = new Pipe({\n            source: {\n                id: reservoir.id,\n                anchor: { name: \"bottomRight\", args: { dy: -25 } },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: join3.id,\n                port: \"left\",\n                anchor: { name: \"left\" },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n\n        reservoirToJoin3.addTo(graph);\n\n        const tank2Pipe1 = new Pipe({\n            source: {\n                id: tank2.id,\n                selector: \"bottom\",\n                anchor: { name: \"bottom\" },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: handValve1.id,\n                port: \"right\",\n                anchor: { name: \"right\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n\n        // tank2Pipe1.addTo(graph);\n\n        const ctrlValve1Pipe1 = new Pipe({\n            source: { id: controlValve1.id, port: \"right\", anchor: { name: \"right\" } },\n            target: { id: pump1.id, port: \"left\", anchor: { name: \"left\" } }\n        });\n\n        // ctrlValve1Pipe1.addTo(graph);\n\n        const valve2Pipe1 = new Pipe({\n            source: {\n                id: handValve2.id,\n                port: \"right\",\n                anchor: { name: \"right\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: join1.id,\n                anchor: { name: \"top\" },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n\n        // valve2Pipe1.addTo(graph);\n\n        const valve1Pipe1 = new Pipe({\n            source: {\n                id: handValve1.id,\n                port: \"left\",\n                anchor: { name: \"left\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: join2.id,\n                anchor: { name: \"top\" },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n\n        // valve1Pipe1.addTo(graph);\n\n        const join1toPump1 = new Pipe({\n            source: {\n                id: join1.id,\n                port: \"right\",\n                anchor: { name: \"right\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: pump1.id,\n                port: \"left\",\n                anchor: { name: \"left\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        join1toPump1.addTo(graph);\n\n        const pump1Valve1 = new Pipe({\n            source: {\n                id: pump1.id,\n                port: \"right\",\n                anchor: { name: \"right\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: handValve1.id,\n                port: \"left\",\n                anchor: { name: \"left\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        pump1Valve1.addTo(graph);\n\n        const valve1Join4 = new Pipe({\n            source: {\n                id: handValve1.id,\n                port: \"right\",\n                anchor: { name: \"right\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: join4.id,\n                port: \"top\",\n                anchor: { name: \"top\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        valve1Join4.addTo(graph);\n\n\n        const valve3Pipe1 = new Pipe({\n            source: {\n                id: handValve3.id,\n                port: \"right\",\n                anchor: { name: \"right\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: join1.id,\n                anchor: { name: \"left\" },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n\n        // valve3Pipe1.addTo(graph);\n\n        const join2ToPump2 = new Pipe({\n            source: {\n                id: join2.id,\n                port: \"right\",\n                anchor: { name: \"right\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: pump2.id,\n                port: \"left\",\n                anchor: { name: \"left\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        join2ToPump2.addTo(graph);\n\n        const pump2Valve2 = new Pipe({\n            source: {\n                id: pump2.id,\n                port: \"right\",\n                anchor: { name: \"right\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: handValve2.id,\n                port: \"left\",\n                anchor: { name: \"left\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        pump2Valve2.addTo(graph);\n\n        const valve2Join4 = new Pipe({\n            source: {\n                id: handValve2.id,\n                port: \"right\",\n                anchor: { name: \"right\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: join4.id,\n                port: \"left\",\n                anchor: { name: \"left\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        valve2Join4.addTo(graph);\n\n        const join3ToPump3 = new Pipe({\n            source: {\n                id: join3.id,\n                port: \"right\",\n                anchor: { name: \"right\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: pump3.id,\n                port: \"left\",\n                anchor: { name: \"left\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        join3ToPump3.addTo(graph);\n\n        const pump3Valve3 = new Pipe({\n            source: {\n                id: pump3.id,\n                port: \"right\",\n                anchor: { name: \"right\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: handValve3.id,\n                port: \"left\",\n                anchor: { name: \"left\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        pump3Valve3.addTo(graph);\n\n        const valve3join4 = new Pipe({\n            source: {\n                id: handValve3.id,\n                port: \"right\",\n                anchor: { name: \"right\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: join4.id,\n                port: \"bottom\",\n                anchor: { name: \"bottom\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        valve3join4.addTo(graph);\n\n        const join4Valve4 = new Pipe({\n            source: {\n                id: join4.id,\n                port: \"right\",\n                anchor: { name: \"right\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: handValve4.id,\n                port: \"left\",\n                anchor: { name: \"left\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        join4Valve4.addTo(graph);\n\n        const valve4OverheadTank = new Pipe({\n            source: {\n                id: handValve4.id,\n                port: \"right\",\n                anchor: { name: \"right\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: overhead_tank.id,\n                port: \"top\",\n                anchor: { name: \"top\", args: { rotate: true, dx: -90 } },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        valve4OverheadTank.addTo(graph);\n        valve4OverheadTank.router('orthogonal');\n        valve4OverheadTank.connector('rounded');\n        valve4OverheadTank.vertices([\n            new g.Point(1580, 950),\n            new g.Point(1600, 50),\n            // new g.Point(1800, 200)\n        ]);\n\n        const ctrlValve2Pipe1 = new Pipe({\n            source: { id: controlValve2.id, port: \"right\", anchor: { name: \"right\" } },\n            target: {\n                id: pump2.id,\n                port: \"left\",\n                anchor: { name: \"left\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n\n        // ctrlValve2Pipe1.addTo(graph);\n\n        const zone1Pipe1 = new Pipe({\n            source: {\n                id: zone1.id,\n                port: \"left\",\n                anchor: { name: \"left\", args: { rotate: true, dx: 10 } },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: tank1.id,\n                anchor: { name: \"bottomLeft\", args: { dy: -30 } },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n\n        // zone1Pipe1.addTo(graph);\n\n        const join1Pipe1 = new Pipe({\n            source: {\n                id: join1.id,\n                anchor: { name: \"bottom\" },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: join2.id,\n                anchor: { name: \"left\" },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n\n        // join1Pipe1.addTo(graph);\n\n        const join2Pipe1 = new Pipe({\n            source: {\n                id: join2.id,\n                anchor: { name: \"right\" },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: zone2.id,\n                anchor: { name: \"left\", args: { dx: 10 } },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n\n        // join2Pipe1.addTo(graph);\n\n        const join2ToJoin1 = new Pipe({\n            source: {\n                id: join2.id,\n                anchor: { name: \"top\" },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: join1.id,\n                anchor: { name: \"bottom\" },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        join2ToJoin1.addTo(graph);\n\n        const join3ToJoin2 = new Pipe({\n            source: {\n                id: join3.id,\n                anchor: { name: \"top\" },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: join2.id,\n                anchor: { name: \"bottom\" },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        join3ToJoin2.addTo(graph);\n\n        const overhead_tankZone2 = new Pipe({\n            source: {\n                id: overhead_tank.id,\n                anchor: { name: \"bottom\" },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: zone2.id,\n                anchor: { name: \"left\" },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        overhead_tankZone2.addTo(graph);\n\n        const overheadToValve5 = new Pipe({\n            source: {\n                id: overhead_tank.id,\n                anchor: { name: \"bottom\", args: { dx: -80 } },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: handValve5.id,\n                anchor: { name: \"right\" },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        overheadToValve5.connector('jumpover', { size: 20 });\n        overheadToValve5.addTo(graph);\n\n        const valve5ToJoin5 = new Pipe({\n            source: {\n                id: handValve5.id,\n                anchor: { name: \"left\" },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: join5.id,\n                anchor: { name: \"right\" },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        valve5ToJoin5.addTo(graph);\n\n        const join5ToValve6 = new Pipe({\n            source: {\n                id: join5.id,\n                anchor: { name: \"top\" },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: handValve6.id,\n                anchor: { name: \"left\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        join5ToValve6.addTo(graph);\n\n        const join5ToJoin6 = new Pipe({\n            source: {\n                id: join5.id,\n                anchor: { name: \"left\" },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: join6.id,\n                anchor: { name: \"right\" },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        join5ToJoin6.addTo(graph);\n\n        const join6ToValve7 = new Pipe({\n            source: {\n                id: join6.id,\n                anchor: { name: \"top\" },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: handValve7.id,\n                anchor: { name: \"left\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        join6ToValve7.addTo(graph);\n\n        const join6ToJoin7 = new Pipe({\n            source: {\n                id: join6.id,\n                anchor: { name: \"left\" },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: join7.id,\n                anchor: { name: \"right\" },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        join6ToJoin7.addTo(graph);\n\n        const join7ToValve8 = new Pipe({\n            source: {\n                id: join7.id,\n                anchor: { name: \"top\" },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: handValve8.id,\n                anchor: { name: \"left\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        join7ToValve8.addTo(graph);\n\n        const join7ToJoin8 = new Pipe({\n            source: {\n                id: join7.id,\n                anchor: { name: \"left\" },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: join8.id,\n                anchor: { name: \"right\" },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        join7ToJoin8.addTo(graph);\n\n        const join8ToValve9 = new Pipe({\n            source: {\n                id: join8.id,\n                anchor: { name: \"top\" },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: handValve9.id,\n                anchor: { name: \"left\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        join8ToValve9.addTo(graph);\n\n        const valve9ToFilter1 = new Pipe({\n            source: {\n                id: handValve9.id,\n                anchor: { name: \"top\" },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: filter1.id,\n                anchor: { name: \"bottom\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        valve9ToFilter1.addTo(graph);\n\n        const valve8ToFilter2 = new Pipe({\n            source: {\n                id: handValve8.id,\n                anchor: { name: \"top\" },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: filter2.id,\n                anchor: { name: \"bottom\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        valve8ToFilter2.addTo(graph);\n\n        const valve7ToFilter3 = new Pipe({\n            source: {\n                id: handValve7.id,\n                anchor: { name: \"top\" },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: filter3.id,\n                anchor: { name: \"bottom\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        valve7ToFilter3.addTo(graph);\n\n        const valve6ToFilter4 = new Pipe({\n            source: {\n                id: handValve6.id,\n                anchor: { name: \"top\" },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: filter4.id,\n                anchor: { name: \"bottom\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        valve6ToFilter4.addTo(graph);\n\n        const filter1ToJoin9 = new Pipe({\n            source: {\n                id: filter1.id,\n                anchor: { name: \"bottom\", args: { dx: 115 } },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: join9.id,\n                anchor: { name: \"top\" },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        filter1ToJoin9.addTo(graph);\n\n        const filter2ToJoin10 = new Pipe({\n            source: {\n                id: filter2.id,\n                anchor: { name: \"bottom\", args: { dx: 105 } },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: join10.id,\n                anchor: { name: \"top\" },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        filter2ToJoin10.addTo(graph)\n\n        const filter3ToJoin11 = new Pipe({\n            source: {\n                id: filter3.id,\n                anchor: { name: \"bottom\", args: { dx: 95 } },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: join11.id,\n                anchor: { name: \"top\" },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        filter3ToJoin11.addTo(graph);\n\n        const filter4ToJoin12 = new Pipe({\n            source: {\n                id: filter4.id,\n                anchor: { name: \"bottom\", args: { dx: 85 } },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: join12.id,\n                anchor: { name: \"top\" },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        filter4ToJoin12.addTo(graph);\n\n        const join12ToJoin11 = new Pipe({\n            source: {\n                id: join12.id,\n                anchor: { name: \"left\" },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: join11.id,\n                anchor: { name: \"right\" },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        join12ToJoin11.connector('jumpover', { size: 20 });\n        join12ToJoin11.addTo(graph);\n\n        const join11ToJoin10 = new Pipe({\n            source: {\n                id: join11.id,\n                anchor: { name: \"left\" },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: join10.id,\n                anchor: { name: \"right\" },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        join11ToJoin10.addTo(graph);\n        join11ToJoin10.connector('jumpover', { size: 20 });\n\n        const join10ToJoin9 = new Pipe({\n            source: {\n                id: join10.id,\n                anchor: { name: \"left\" },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: join9.id,\n                anchor: { name: \"right\" },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        join10ToJoin9.connector('jumpover', { size: 20 });\n        join10ToJoin9.addTo(graph);\n\n\n        const join9ToJoin13 = new Pipe({\n            source: {\n                id: join9.id,\n                anchor: { name: \"right\" },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: join13.id,\n                anchor: { name: \"left\" },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        // join9ToJoin13.addTo(graph);\n\n        const join9ToValve11 = new Pipe({\n            source: {\n                id: join9.id,\n                anchor: { name: \"bottom\" },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: handValve11.id,\n                anchor: { name: \"right\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        join9ToValve11.connector('jumpover', { size: 10 });\n        join9ToValve11.addTo(graph);\n\n        const valve11ToReservoirTank = new Pipe({\n            source: {\n                id: handValve11.id,\n                anchor: { name: \"bottom\" },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: reservoir.id,\n                anchor: { name: \"top\", args: { rotate: true, dx: 115 } },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        valve11ToReservoirTank.addTo(graph);\n\n        const filter1ToValve10 = new Pipe({\n            attrs: {\n                liquid: {\n                    stroke: \"#a97a4f\"\n                }\n            },\n            source: {\n                id: filter1.id,\n                anchor: { name: \"bottom\", args: { dx: -90 } },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: handValve10.id,\n                anchor: { name: \"right\", args: { rotate: true } },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        filter1ToValve10.addTo(graph);\n\n        const valve10ToZone3 = new Pipe({\n            attrs: {\n                liquid: {\n                    stroke: \"#a97a4f\"\n                }\n            },\n            source: {\n                id: handValve10.id,\n                anchor: { name: \"bottom\" },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: zone3.id,\n                anchor: { name: \"right\" },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        valve10ToZone3.addTo(graph);\n\n        const join14ToFilter1 = new Pipe({\n            attrs: {\n                liquid: {\n                    stroke: IMPURE_WATER_COLOR\n                }\n            },\n            source: {\n                id: join14.id,\n                anchor: { name: \"left\" },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: filter1.id,\n                anchor: { name: \"top\" },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        join14ToFilter1.addTo(graph);\n\n        const join14ToFilter2 = new Pipe({\n            attrs: {\n                liquid: {\n                    stroke: IMPURE_WATER_COLOR\n                }\n            },\n            source: {\n                id: join14.id,\n                anchor: { name: \"right\" },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: filter2.id,\n                anchor: { name: \"top\" },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        join14ToFilter2.addTo(graph);\n\n        const join15ToFilter3 = new Pipe({\n            attrs: {\n                liquid: {\n                    stroke: IMPURE_WATER_COLOR\n                }\n            },\n            source: {\n                id: join15.id,\n                anchor: { name: \"left\" },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: filter3.id,\n                anchor: { name: \"top\" },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        join15ToFilter3.addTo(graph);\n\n        const join15ToFilter4 = new Pipe({\n            attrs: {\n                liquid: {\n                    stroke: IMPURE_WATER_COLOR\n                }\n            },\n            source: {\n                id: join15.id,\n                anchor: { name: \"right\" },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: filter4.id,\n                anchor: { name: \"top\" },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        join15ToFilter4.addTo(graph);\n\n        const station1Tojoin14 = new Pipe({\n            attrs: {\n                liquid: {\n                    stroke: IMPURE_WATER_COLOR\n                }\n            },\n            source: {\n                id: station1.id,\n                anchor: { name: \"bottom\" },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: join14.id,\n                anchor: { name: \"top\" },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        station1Tojoin14.addTo(graph);\n\n        const station2Tojoin15 = new Pipe({\n            attrs: {\n                liquid: {\n                    stroke: IMPURE_WATER_COLOR\n                }\n            },\n            source: {\n                id: station2.id,\n                anchor: { name: \"bottom\" },\n                connectionPoint: { name: \"anchor\" }\n            },\n            target: {\n                id: join15.id,\n                anchor: { name: \"top\" },\n                connectionPoint: { name: \"anchor\" }\n            }\n        });\n        station2Tojoin15.addTo(graph);\n\n        // Charts\n\n        const maxPoints = 10;\n        const tankChart = new shapes.chart.Plot({\n            position: { x: 50, y: 50 },\n            size: { width: 400, height: 200 },\n            series: [\n                {\n                    name: \"level\",\n                    interpolate: \"linear\",\n                    showLegend: false,\n                    fillPadding: { top: 10 },\n                    data: Array.from({ length: maxPoints }).map((_, i) => ({\n                        x: i,\n                        y: START_LIQUID\n                    }))\n                },\n            ],\n            axis: {\n                \"y-axis\": {\n                    min: 0,\n                    max: 100,\n                    ticks: 10\n                },\n                \"x-axis\": {\n                    tickFormat: function (t) {\n                        const d = new Date(t * 1000);\n                        return (\n                            d.getMinutes().toString().padStart(2, \"0\") +\n                            \":\" +\n                            d.getSeconds().toString().padStart(2, \"0\")\n                        );\n                    }\n                }\n            },\n            padding: 0,\n            markings: [\n                {\n                    name: \"max\",\n                    start: { y: 80 }\n                },\n                {\n                    name: \"min\",\n                    end: { y: 20 }\n                }\n            ],\n            // Historically, the chart shapes are defined without camel-cased attributes\n            attrs: {\n                \".\": {\n                    \"font-family\": \"sans-serif\"\n                },\n                \".level path\": {\n                    stroke: \"#0075f2\",\n                    \"stroke-width\": 1,\n                    \"stroke-opacity\": \"0.8\",\n                    fill: \"#0075f2\",\n                    \"fill-opacity\": \"0.3\"\n                },\n                \".marking.max rect\": {\n                    fill: MAX_LIQUID_COLOR,\n                    height: 3\n                },\n                \".marking.min rect\": {\n                    fill: MIN_LIQUID_COLOR,\n                    height: 3\n                },\n                \".point circle\": {\n                    fill: \"#0075f2\",\n                    stroke: \"none\",\n                    opacity: 1\n                },\n                \".y-axis > path, .x-axis > path\": {\n                    stroke: \"#131e29\",\n                    \"stroke-width\": 2\n                },\n                \".background rect\": {\n                    fill: \"#999\",\n                    \"fill-opacity\": \"0.1\"\n                }\n            }\n        });\n        // tankChart.addTo(graph);\n\n        const tankChartLink = new shapes.standard.Link({\n            source: { id: tankChart.id },\n            target: { id: tank1.id },\n            attrs: {\n                line: {\n                    strokeDasharray: \"5 5\",\n                    targetMarker: null,\n                    stroke: \"#aaa\"\n                }\n            }\n        });\n\n        // tankChartLink.addTo(graph);\n\n        const gauge1 = new shapes.chart.Knob({\n            position: { x: 380, y: 100 },\n            size: { width: 120, height: 120 },\n            min: 0,\n            max: 10,\n            step: 0.1,\n            value: 1,\n            fill: PRESSURE_COLOR,\n            // Historically, the chart shapes are defined without camel-cased attributes\n            attrs: {\n                root: {\n                    \"font-family\": \"sans-serif\"\n                }\n            },\n            serieDefaults: {\n                startAngle: 90,\n                label: \"Ⓟ bar\"\n            },\n            sliceDefaults: {\n                legendLabel: \"{value:.1f}\",\n                onClickEffect: { type: \"none\" }\n            }\n        });\n\n        // gauge1.addTo(graph);\n\n        const gauge1Link = new shapes.standard.Link({\n            source: { id: gauge1.id, anchor: { name: \"bottom\" } },\n            target: { id: ctrlValve1Pipe1.id },\n            z: -1,\n            attrs: {\n                line: {\n                    strokeDasharray: \"5 5\",\n                    targetMarker: {\n                        type: \"circle\",\n                        r: 12,\n                        fill: \"#eee\",\n                        stroke: \"#666\",\n                        \"stroke-width\": 2\n                    },\n                    stroke: \"#aaa\"\n                }\n            }\n        });\n\n        // gauge1Link.addTo(graph);\n\n        const gauge2 = gauge1.clone();\n        const gauge2Link = gauge1Link.clone();\n\n        gauge2.position(380, 600);\n\n        gauge2Link.source({ id: gauge2.id, anchor: { name: \"bottom\" } });\n        gauge2Link.target({ id: ctrlValve2Pipe1.id });\n\n        // gauge2.addTo(graph);\n        // gauge2Link.addTo(graph);\n\n        // Controls\n        // A custom highlighters using the foreignObject element to embed HTML form controls\n        // The styling is done in CSS\n\n        const PumpControl = dia.HighlighterView.extend({\n            UPDATE_ATTRIBUTES: [\"power\"],\n            tagName: \"g\",\n            children: util.svg/* xml */ `\n                <foreignObject width=\"20\" height=\"20\">\n                    <div class=\"jj-checkbox\" xmlns=\"http://www.w3.org/1999/xhtml\">\n                        <input @selector=\"input\" class=\"jj-checkbox-input\" type=\"checkbox\" style=\"width: 14px; height: 14px; box-sizing: border-box; margin: 2px;\"/>\n                    </div>\n                </foreignObject>\n            `,\n            events: {\n                \"change input\": \"onChange\"\n            },\n            attributes: {\n                transform: \"translate(5, 5)\"\n            },\n            highlight: function (cellView) {\n                this.renderChildren();\n                this.childNodes.input.checked = Boolean(cellView.model.power);\n            },\n            onChange: function (evt) {\n                this.cellView.model.power = evt.target.checked ? 1 : 0;\n            }\n        });\n\n        const ToggleValveControl = dia.HighlighterView.extend({\n            UPDATE_ATTRIBUTES: [\"open\"],\n            children: util.svg/* xml */ `\n            <foreignObject width=\"100\" height=\"50\">\n                <div class=\"jj-switch\" xmlns=\"http://www.w3.org/1999/xhtml\">\n                    <div @selector=\"label\" class=\"jj-switch-label\" style=\"\"></div>\n                    <button @selector=\"buttonOn\" class=\"jj-switch-on\">open</button>\n                    <button @selector=\"buttonOff\" class=\"jj-switch-off\">close</button>\n                </div>\n            </foreignObject>\n        `,\n            events: {\n                \"click button\": \"onButtonClick\"\n            },\n            highlight: function (cellView) {\n                this.renderChildren();\n                const { model } = cellView;\n                const { el, childNodes } = this;\n                const size = model.size();\n                const isOpen = model.get(\"open\");\n                el.setAttribute(\n                    \"transform\",\n                    `translate(${size.width / 2 - 50}, ${size.height + 10})`\n                );\n                childNodes.buttonOn.disabled = !isOpen;\n                childNodes.buttonOff.disabled = isOpen;\n                childNodes.label.textContent = model.attr(\"label/text\");\n            },\n            onButtonClick: function (evt) {\n                const { model } = this.cellView;\n                const isOpen = model.get(\"open\");\n                model.set(\"open\", !isOpen);\n            }\n        });\n\n        const SliderValveControl = dia.HighlighterView.extend({\n            UPDATE_ATTRIBUTES: [\"open\"],\n            children: util.svg/* xml */ `\n        <foreignObject width=\"100\" height=\"60\">\n            <div class=\"jj-slider\" xmlns=\"http://www.w3.org/1999/xhtml\">\n                <div @selector=\"label\" class=\"jj-slider-label\" style=\"\">Valve 4</div>\n                <input @selector=\"slider\" class=\"jj-slider-input\" type=\"range\" min=\"0\" max=\"100\" step=\"25\" style=\"width:100%;\"/>\n                <output @selector=\"value\" class=\"jj-slider-output\"></output>\n            </div>\n        </foreignObject>\n    `,\n            events: {\n                \"input input\": \"onInput\"\n            },\n            highlight: function (cellView) {\n                const { name = \"\" } = this.options;\n                const { model } = cellView;\n                const size = model.size();\n                if (!this.childNodes) {\n                    // Render the slider only once to allow the user to drag it.\n                    this.renderChildren();\n                    this.childNodes.slider.value = model.get(\"open\") * 100;\n                }\n                this.el.setAttribute(\n                    \"transform\",\n                    `translate(${size.width / 2 - 50}, ${size.height + 10})`\n                );\n                this.childNodes.label.textContent = name;\n                this.childNodes.value.textContent = this.getSliderTextValue(\n                    model.get(\"open\")\n                );\n            },\n            getSliderTextValue: function (value = 0) {\n                if (value === 0) {\n                    return \"Closed\";\n                }\n                if (value === 1) {\n                    return \"Open\";\n                }\n                return `${value * 100}% open`;\n            },\n            onInput: function (evt) {\n                this.cellView.model.set(\"open\", Number(evt.target.value) / 100);\n            }\n        });\n\n        // Create all controls and add them to the graph\n        // addControls(paper);\n\n        // Transform the paper so that the content fits the viewport\n        paper.transformToFitContent({\n            useModelGeometry: true,\n            padding: { top: 80, bottom: 10, horizontal: 50 },\n            horizontalAlign: \"middle\",\n            verticalAlign: \"top\"\n        });\n\n        // Start rendering the content and highlighters\n        paper.unfreeze();\n\n        // Toolbar\n\n        const toolbar = new ui.Toolbar({\n            tools: [\n                {\n                    type: \"label\",\n                    name: \"title\",\n                    text: \"SCADA: Piping & Instrumentation Diagram\"\n                },\n                {\n                    type: \"separator\"\n                },\n                {\n                    type: \"checkbox\",\n                    name: \"controls\",\n                    label: \"Controls\",\n                    value: true\n                },\n                {\n                    type: \"checkbox\",\n                    name: \"instrumentation\",\n                    label: \"Instrumentation\",\n                    value: true\n                },\n                {\n                    type: \"separator\"\n                },\n                {\n                    type: \"label\",\n                    text: \"Color\"\n                },\n                {\n                    type: \"color-picker\",\n                    name: \"color\",\n                    value: getComputedStyle(document.documentElement).getPropertyValue(\n                        \"--accent-color\"\n                    )\n                }\n            ]\n        });\n\n        // toolbarContainerEl.appendChild(toolbar.el);\n\n        toolbar.render();\n        toolbar.on({\n            \"controls:change\": (value) => {\n                if (value) {\n                    addControls(paper);\n                } else {\n                    removeControls(paper);\n                }\n            },\n            \"instrumentation:change\": (value) => {\n                if (value) {\n                    addCharts(paper);\n                } else {\n                    removeCharts(paper);\n                }\n            },\n            \"color:input\": (value) => {\n                document.documentElement.style.setProperty(\"--accent-color\", value);\n            }\n        });\n\n        function addControls(paper) {\n            const graph = paper.model;\n            graph.getElements().forEach((cell) => {\n                switch (cell.get(\"type\")) {\n                    case \"ControlValve\":\n                        SliderValveControl.add(cell.findView(paper), \"root\", \"slider\", {\n                            name: cell.attr(\"label/text\")\n                        });\n                        break;\n                    case \"HandValve\":\n                        ToggleValveControl.add(cell.findView(paper), \"root\", \"button\");\n                        break;\n                    case \"Pump\":\n                        PumpControl.add(cell.findView(paper), \"root\", \"selection\");\n                        break;\n                }\n            });\n        }\n\n        function removeControls(paper) {\n            SliderValveControl.removeAll(paper);\n            ToggleValveControl.removeAll(paper);\n            PumpControl.removeAll(paper);\n        }\n\n        function addCharts(paper) {\n            paper.options.viewport = null;\n        }\n\n        function removeCharts(paper) {\n            const chartTypes = [\"chart.Knob\", \"chart.Plot\", \"standard.Link\"];\n            paper.options.viewport = (view) => {\n                return !chartTypes.includes(view.model.get(\"type\"));\n            };\n        }\n\n        // Simulation\n        // A dummy system for the purpose of this demo\n\n        tank1.level = START_LIQUID;\n\n        let extraLiquid = 0;\n\n        setInterval(function () {\n            const tank1Level = tank1.level;\n            const liquidIn = g.random(0, 15);\n\n            let newLevel = tank1Level + liquidIn;\n            if (newLevel >= 100) {\n                extraLiquid += newLevel - 100;\n            } else {\n                extraLiquid = 0;\n            }\n\n            // Tank 1 Instrumentation\n            tankChart.addPoint(\n                { x: tankChart.lastPoint(\"level\").x + 1, y: tank1Level },\n                \"level\",\n                { maxLen: maxPoints }\n            );\n\n            // Tank 1 Pipes\n            const tank1Pipe1Flow = tank1Level > 70 ? 1 : 0;\n            const tank1Pipe2Flow = tank1Level > 0 ? 1 : 0;\n            tank1Pipe1.set(\"flow\", tank1Pipe1Flow);\n            // tank1Pipe2.set(\"flow\", tank1Pipe2Flow);\n\n            // Pump Station 1\n            // const station1Power = station1.get(\"power\");\n            station1.attr(\"label/fill\", dataObject.station1.power ? \"green\" : \"red\");\n            station1.attr(\"label/text\", dataObject.station1.power ? \"From Pump\\nStation-1 ON\" : \"From Pump\\nStation-1 OFF\")\n            station1Tojoin14.set(\"flow\", dataObject.station1.power);\n            join14ToFilter1.set(\"flow\", dataObject.station1.power);\n            join14ToFilter2.set(\"flow\", dataObject.station1.power);\n\n\n            // Pump Station 2\n            // const station2Power = station2.get(\"power\");\n            station2.attr(\"label/fill\", dataObject.station2.power ? \"green\" : \"red\")\n            station2.attr(\"label/text\", dataObject.station2.power ? \"From Pump\\nStation-2 ON\" : \"From Pump\\nStation-2 OFF\")\n            station2Tojoin15.set(\"flow\", dataObject.station2.power);\n            join15ToFilter3.set(\"flow\", dataObject.station2.power);\n            join15ToFilter4.set(\"flow\", dataObject.station2.power);\n            // CTRL Valve 1\n            const ctrlValve1Open = controlValve1.get(\"open\");\n            const ctrlValve1Pipe1Flow = tank1Pipe1Flow * ctrlValve1Open;\n            ctrlValve1Pipe1.set(\"flow\", ctrlValve1Pipe1Flow);\n            // CTRL Valve 2\n            const ctrlValve2Open = controlValve2.get(\"open\");\n            const ctrlValve2Pipe1Flow = tank1Pipe2Flow * ctrlValve2Open;\n            ctrlValve2Pipe1.set(\"flow\", ctrlValve2Pipe1Flow);\n\n            // Pump 1\n            // const pump1Power = pump1.power;\n\n            // const pump1Pipe1Flow = ctrlValve1Pipe1Flow * (1 + 2 * pump1Power);\n            const pump1Pipe1Flow = dataObject.pump1.power;\n            pump1.power = pump1Pipe1Flow;\n            if (pump1Pipe1Flow) {\n                pump1.attr(\"label/text\", \"Pump 1 ON\");\n                pump1.attr(\"label/fill\", \"green\");\n                pump1.attr(\"rotorBackground/fill\", \"green\");\n            } else {\n                pump1.attr(\"label/text\", \"Pump 1 OFF\");\n                pump1.attr(\"label/fill\", \"red\");\n                pump1.attr(\"rotorBackground/fill\", \"#777\");\n            }\n            join1toPump1.set(\"flow\", pump1Pipe1Flow == 0 ? 0.01 : pump1Pipe1Flow);\n            join2ToJoin1.set(\"flow\", pump1Pipe1Flow == 0 ? 0.01 : pump1Pipe1Flow);\n\n            // Hand Valve 1\n            // const handValve1Open = Number(handValve1.get(\"open\"));\n            const handValve1Open = dataObject.handValve1.open;\n            const handValve1Pipe1Flow = pump1Pipe1Flow * handValve1Open;\n            valve1Join4.set(\"flow\", handValve1Pipe1Flow);\n\n            if (handValve1Open) {\n                handValve1.attr(\"status/fill\", \"green\");\n                handValve1.attr(\"label/fill\", \"green\");\n                handValve1.attr(\"label/text\", \"Valve 1 ON\");\n                if (pump1Pipe1Flow) {\n                    pump1Valve1.set(\"flow\", pump1Pipe1Flow);\n                } else {\n                    pump1Valve1.set(\"flow\", 0);\n                }\n\n            } else {\n                handValve1.attr(\"status/fill\", \"white\");\n                handValve1.attr(\"label/fill\", \"red\");\n                handValve1.attr(\"label/text\", \"Valve 1 OFF\");\n                if (pump1Pipe1Flow) {\n                    pump1Valve1.set(\"flow\", 0.01);\n                } else {\n                    pump1Valve1.set(\"flow\", 0);\n                }\n\n            }\n\n\n\n            // Pump 2\n            // const pump2Power = pump2.power;\n            // const pump2Pipe1Flow = ctrlValve2Pipe1Flow * (1 + 2 * pump2Power);\n            const pump2Pipe1Flow = dataObject.pump2.power;\n            pump2.power = pump2Pipe1Flow;\n            join2ToPump2.set(\"flow\", pump2Pipe1Flow == 0 ? 0.01 : pump2Pipe1Flow);\n            join3ToJoin2.set(\"flow\", pump1Pipe1Flow == 0 && pump2Pipe1Flow == 0 ? 0.01 : 1);\n            if (pump2Pipe1Flow) {\n                pump2.attr(\"label/text\", \"Pump 2 ON\");\n                pump2.attr(\"label/fill\", \"green\");\n                pump2.attr(\"rotorBackground/fill\", \"green\");\n            } else {\n                pump2.attr(\"label/text\", \"Pump 2 OFF\");\n                pump2.attr(\"label/fill\", \"red\");\n                pump2.attr(\"rotorBackground/fill\", \"#777\");\n            }\n\n            // Hand Valve 2\n            // const handValve2Open = Number(handValve2.get(\"open\"));\n            const handValve2Open = dataObject.handValve2.open;\n            const handValve2Pipe1Flow = pump2Pipe1Flow * handValve2Open;\n            valve2Join4.set(\"flow\", handValve2Pipe1Flow);\n            // pump2Valve2.set(\"flow\", pump2Pipe1Flow);\n            if (handValve2Open) {\n                handValve2.attr(\"status/fill\", \"green\");\n                handValve2.attr(\"label/fill\", \"green\");\n                handValve2.attr(\"label/text\", \"Valve 2 ON\");\n                if (pump2Pipe1Flow) {\n                    pump2Valve2.set(\"flow\", pump2Pipe1Flow);\n                } else {\n                    pump2Valve2.set(\"flow\", 0);\n                }\n            } else {\n                handValve2.attr(\"status/fill\", \"white\");\n                handValve2.attr(\"label/fill\", \"red\");\n                handValve2.attr(\"label/text\", \"Valve 2 OFF\");\n                if (pump2Pipe1Flow) {\n                    pump2Valve2.set(\"flow\", 0.01);\n                } else {\n                    pump2Valve2.set(\"flow\", 0);\n                }\n            }\n\n            // Pump 3\n            // const pump3Power = pump3.power;\n            // const pump3Pipe1Flow = pump1Pipe1Flow * (1 + 2 * pump3Power);\n            const pump3Pipe1Flow = dataObject.pump3.power;\n            pump3.power = pump3Pipe1Flow;\n            // pump3Valve3.set(\"flow\", pump3Pipe1Flow);\n            join3ToPump3.set(\"flow\", pump3Pipe1Flow == 0 ? 0.01 : pump3Pipe1Flow);\n            if (pump3Pipe1Flow) {\n                pump3.attr(\"label/text\", \"Pump 3 ON\");\n                pump3.attr(\"label/fill\", \"green\");\n                pump3.attr(\"rotorBackground/fill\", \"green\");\n            } else {\n                pump3.attr(\"label/text\", \"Pump 3 OFF\");\n                pump3.attr(\"label/fill\", \"red\");\n                pump3.attr(\"rotorBackground/fill\", \"#777\");\n            }\n\n            reservoirToJoin3.set(\"flow\", dataObject.pump1.power || dataObject.pump2.power || dataObject.pump3.power ? 1 : 0.01);\n\n            // Hand Valve 3\n            // const handValve3Open = Number(handValve3.get(\"open\"));\n            const handValve3Open = dataObject.handValve3.open;\n            const handValve3Pipe1Flow = pump3Pipe1Flow * handValve3Open;\n            valve3join4.set(\"flow\", handValve3Pipe1Flow);\n            if (handValve3Open) {\n                handValve3.attr(\"status/fill\", \"green\");\n                handValve3.attr(\"label/fill\", \"green\");\n                handValve3.attr(\"label/text\", \"Valve 3 ON\");\n                if (pump3Pipe1Flow) {\n                    pump3Valve3.set(\"flow\", pump3Pipe1Flow);\n                } else {\n                    pump3Valve3.set(\"flow\", 0);\n                }\n            } else {\n                handValve3.attr(\"status/fill\", \"white\");\n                handValve3.attr(\"label/fill\", \"red\");\n                handValve3.attr(\"label/text\", \"Valve 3 OFF\");\n                if (pump3Pipe1Flow) {\n                    pump3Valve3.set(\"flow\", 0.01);\n                } else {\n                    pump3Valve3.set(\"flow\", 0);\n                }\n            }\n\n            // join 4 \n            const totalFlow = handValve1Pipe1Flow + handValve2Pipe1Flow + handValve3Pipe1Flow;\n\n\n            // Hand Valve 4\n            // const valve4Open = handValve4.get(\"open\");\n            const valve4Open = dataObject.handValve4.open;\n            const valve4Pipe1Flow = totalFlow * valve4Open;\n            valve4OverheadTank.set(\"flow\", valve4Pipe1Flow);\n            if (valve4Pipe1Flow) {\n                handValve4.attr(\"status/fill\", \"green\");\n                handValve4.attr(\"label/fill\", \"green\");\n                handValve4.attr(\"label/text\", \"Valve 4 ON\");\n                join4Valve4.set(\"flow\", totalFlow);\n            } else {\n                handValve4.attr(\"status/fill\", \"white\");\n                handValve4.attr(\"label/fill\", \"red\");\n                handValve4.attr(\"label/text\", \"Valve 4 OFF\");\n                join4Valve4.set(\"flow\", 0.01);\n            }\n\n            // Hand Valve 5\n            // const valve5Open = handValve5.get(\"open\");\n            const valve5Open = dataObject.handValve5.open;\n\n\n            const valve5Pipe1Flow = valve5Open;\n            valve5ToJoin5.set(\"flow\", valve5Pipe1Flow);\n            if (valve5Pipe1Flow) {\n                handValve5.attr(\"status/fill\", \"green\");\n                handValve5.attr(\"label/fill\", \"green\");\n                handValve5.attr(\"label/text\", \"Valve 5 ON\");\n                // join4Valve4.set(\"flow\", totalFlow);\n            } else {\n                handValve5.attr(\"status/fill\", \"white\");\n                handValve5.attr(\"label/fill\", \"red\");\n                handValve5.attr(\"label/text\", \"Valve 5 OFF\");\n                // join4Valve4.set(\"flow\", 0.01);\n            }\n\n            join5ToJoin6.set(\"flow\", valve5Pipe1Flow);\n            join5ToValve6.set(\"flow\", valve5Pipe1Flow);\n            join6ToJoin7.set(\"flow\", valve5Pipe1Flow);\n            join6ToValve7.set(\"flow\", valve5Pipe1Flow);\n            join7ToJoin8.set(\"flow\", valve5Pipe1Flow);\n            join7ToValve8.set(\"flow\", valve5Pipe1Flow);\n            join8ToValve9.set(\"flow\", valve5Pipe1Flow);\n\n            overheadToValve5.set(\"flow\", valve5Pipe1Flow == 0 ? 0.01 : 1);\n\n\n\n            // Hand Valve 9\n            // const valve9Open = handValve9.get(\"open\");\n            const valve9Open = dataObject.handValve9.open;\n            const valve9Pipe1Flow = valve9Open * valve5Pipe1Flow;\n            valve9ToFilter1.set(\"flow\", valve9Pipe1Flow);\n            join8ToValve9.set(\"flow\", valve5Open == 1 && valve9Open == 0 ? 0.01 : valve5Open == 0 ? 0 : 1);\n            join7ToJoin8.set(\"flow\", valve5Open == 1 && valve9Open == 0 ? 0.01 : valve5Open == 0 ? 0 : 1);\n            if (valve9Open) {\n                handValve9.attr(\"status/fill\", \"green\");\n                handValve9.attr(\"label/fill\", \"green\");\n                handValve9.attr(\"label/text\", \"Valve 9 ON\");\n            } else {\n                handValve9.attr(\"status/fill\", \"white\");\n                handValve9.attr(\"label/fill\", \"red\");\n                handValve9.attr(\"label/text\", \"Valve 9 OFF\");\n            }\n\n            // Hand Valve 8\n            // const valve8Open = handValve8.get(\"open\");\n            const valve8Open = dataObject.handValve8.open;\n            const valve8Pipe1Flow = valve8Open * valve5Pipe1Flow;\n            valve8ToFilter2.set(\"flow\", valve8Pipe1Flow);\n            join7ToValve8.set(\"flow\", valve5Open == 1 && valve8Open == 0 ? 0.01 : valve5Open == 0 ? 0 : 1);\n            if (valve5Open) {\n                if (valve8Open || valve9Open) {\n                    join6ToJoin7.set(\"flow\", 1);\n                } else {\n                    join6ToJoin7.set(\"flow\", 0.01);\n                }\n            } else {\n                join6ToJoin7.set(\"flow\", 0);\n            }\n            if (valve8Open) {\n                handValve8.attr(\"status/fill\", \"green\");\n                handValve8.attr(\"label/fill\", \"green\");\n                handValve8.attr(\"label/text\", \"Valve 8 ON\");\n            } else {\n                handValve8.attr(\"status/fill\", \"white\");\n                handValve8.attr(\"label/fill\", \"red\");\n                handValve8.attr(\"label/text\", \"Valve 8 OFF\");\n            }\n\n\n            // Hand Valve 7\n            // const valve7Open = handValve7.get(\"open\");\n            const valve7Open = dataObject.handValve7.open;\n            const valve7Pipe1Flow = valve7Open * valve5Pipe1Flow;\n            valve7ToFilter3.set(\"flow\", valve7Pipe1Flow);\n            join6ToValve7.set(\"flow\", valve5Open == 1 && valve7Open == 0 ? 0.01 : valve5Open == 0 ? 0 : 1);\n            if (valve5Open) {\n                if (valve7Open || valve8Open || valve9Open) {\n                    join5ToJoin6.set(\"flow\", 1);\n                } else {\n                    join5ToJoin6.set(\"flow\", 0.01);\n                }\n            } else {\n                join5ToJoin6.set(\"flow\", 0);\n            }\n            if (valve7Open) {\n                handValve7.attr(\"status/fill\", \"green\");\n                handValve7.attr(\"label/fill\", \"green\");\n                handValve7.attr(\"label/text\", \"Valve 7 ON\");\n            } else {\n                handValve7.attr(\"status/fill\", \"white\");\n                handValve7.attr(\"label/fill\", \"red\");\n                handValve7.attr(\"label/text\", \"Valve 7 OFF\");\n            }\n\n\n\n\n            // Hand Valve 6\n            // const valve6Open = handValve6.get(\"open\");\n            const valve6Open = dataObject.handValve6.open;\n            const valve6Pipe1Flow = valve6Open * valve5Pipe1Flow;\n            valve6ToFilter4.set(\"flow\", valve6Pipe1Flow);\n            join5ToValve6.set(\"flow\", valve5Open == 1 && valve6Open == 0 ? 0.01 : valve5Open == 0 ? 0 : 1);\n            if (valve5Open) {\n                if (valve6Open || valve7Open || valve8Open || valve9Open) {\n                    valve5ToJoin5.set(\"flow\", 1);\n                } else {\n                    valve5ToJoin5.set(\"flow\", 0.01);\n                }\n            } else {\n                valve5ToJoin5.set(\"flow\", 0);\n            }\n            if (valve6Open) {\n                handValve6.attr(\"status/fill\", \"green\");\n                handValve6.attr(\"label/fill\", \"green\");\n                handValve6.attr(\"label/text\", \"Valve 6 ON\");\n            } else {\n                handValve6.attr(\"status/fill\", \"white\");\n                handValve6.attr(\"label/fill\", \"red\");\n                handValve6.attr(\"label/text\", \"Valve 6 OFF\");\n            }\n\n\n            // Hand Valve 10\n            // const valve10Open = handValve10.get(\"open\");\n            const valve10Open = dataObject.handValve10.open;\n            const valve10Pipe1Flow = valve10Open;\n            valve10ToZone3.set(\"flow\", valve10Pipe1Flow ? 1 : 0);\n            filter1ToValve10.set(\"flow\", valve10Pipe1Flow ? valve10Pipe1Flow : 0.01);\n            if (valve10Open) {\n                handValve10.attr(\"status/fill\", \"green\");\n                handValve10.attr(\"label/fill\", \"green\");\n                handValve10.attr(\"label/text\", \"Valve 10 ON\");\n            } else {\n                handValve10.attr(\"status/fill\", \"white\");\n                handValve10.attr(\"label/fill\", \"red\");\n                handValve10.attr(\"label/text\", \"Valve 10 OFF\");\n            }\n\n\n            // Hand Valve 11\n            // const valve11Open = handValve11.get(\"open\");\n            const valve11Open = dataObject.handValve11.open;\n            const valve11Pipe1Flow = valve11Open;\n            valve11ToReservoirTank.set(\"flow\", valve11Pipe1Flow);\n            join9ToValve11.set(\"flow\", valve11Pipe1Flow ? valve11Pipe1Flow : 0.01);\n            filter1ToJoin9.set(\"flow\", valve11Pipe1Flow ? valve11Pipe1Flow : 0.01);\n            filter2ToJoin10.set(\"flow\", valve11Pipe1Flow ? valve11Pipe1Flow : 0.01);\n            filter3ToJoin11.set(\"flow\", valve11Pipe1Flow ? valve11Pipe1Flow : 0.01);\n            filter4ToJoin12.set(\"flow\", valve11Pipe1Flow ? valve11Pipe1Flow : 0.01);\n            join12ToJoin11.set(\"flow\", valve11Pipe1Flow ? valve11Pipe1Flow : 0.01);\n            join11ToJoin10.set(\"flow\", valve11Pipe1Flow ? valve11Pipe1Flow : 0.01);\n            join10ToJoin9.set(\"flow\", valve11Pipe1Flow ? valve11Pipe1Flow : 0.01);\n            if (valve11Open) {\n                handValve11.attr(\"status/fill\", \"green\");\n                handValve11.attr(\"label/fill\", \"green\");\n                handValve11.attr(\"label/text\", \"Valve 11 ON\");\n            } else {\n                handValve11.attr(\"status/fill\", \"white\");\n                handValve11.attr(\"label/fill\", \"red\");\n                handValve11.attr(\"label/text\", \"Valve 11 OFF\");\n            }\n\n            // Flow Sensors\n            flowSensor1.attr('value/text', dataObject.flowSensor1.value + \" m3\");\n            // flowSensor2.attr('value/text', dataObject.flowSensor2.value + \" m3\");\n            flowSensor2.attr('value/text', Math.floor(Math.random() * 100 + 1) + \" m3\");\n            flowSensor3.attr('value/text', dataObject.flowSensor3.value + \" m3\");\n\n            // Pressure Sensors\n            pressureSensor1.attr('value/text', dataObject.pressureSensor1.value + \" bar\");\n            pressureSensor2.attr('value/text', dataObject.pressureSensor2.value + \" bar\");\n            pressureSensor3.attr('value/text', dataObject.pressureSensor3.value + \" bar\");\n\n            levelSensor1.attr('value/text', dataObject.levelSensor1.value + \" ft\");\n            levelSensor2.attr('value/text', dataObject.levelSensor2.value + \" ft\");\n            levelSensor3.attr('value/text', dataObject.levelSensor3.value + \" ft\");\n            levelSensor4.attr('value/text', dataObject.levelSensor4.value + \" ft\");\n            levelSensor5.attr('value/text', dataObject.levelSensor5.value + \" ft\");\n            // levelSensor6.attr('value/text', dataObject.levelSensor6.value + \" ft\");\n            levelSensor6.attr('value/text', Math.floor(Math.random() * 10 + 1) + \" ft\");\n\n            // Join 1\n            // const join1Pipe1Flow = handValve2Pipe1Flow + handValve3Pipe1Flow;\n            // join1Pipe1.set(\"flow\", join1Pipe1Flow);\n\n            // Tank 2\n            // const tank2Pipe1Flow = 0.5; // constant flow\n            // tank2Pipe1.set(\"flow\", tank2Pipe1Flow);\n\n\n            // Join 2\n            // const join2Pipe1Flow = join1Pipe1Flow + handValve1Pipe1Flow;\n            // join2Pipe1.set(\"flow\", join2Pipe1Flow);\n\n            // Tank1\n            // const liquidOut = join2Pipe1Flow * 4;\n            // tank1.level = tank1Level + liquidIn - liquidOut;\n\n            // Gauge 1\n            // let pressure1 = ctrlValve1Pipe1Flow * 10;\n            // if (pressure1 > 0) {\n            //     pressure1 += Math.min(30, extraLiquid * Math.max(1.1 - handValve2Open));\n            //     if (handValve2Open === 0) {\n            //         pressure1 += Math.max(0, tank1Level - 70) * 0.3;\n            //     }\n            // }\n            // gauge1.transition(\"value\", pressure1 / 10);\n            // gauge1.transition(\n            //     \"fill\",\n            //     pressure1 > 30 ? MAX_PRESSURE_COLOR : PRESSURE_COLOR,\n            //     { valueFunction: util.interpolate.hexColor, duration: 1000 }\n            // );\n\n            // Gauge 2\n            // let pressure2 = ctrlValve2Pipe1Flow * 10;\n            // if (pressure2 > 0) {\n            //     pressure2 += Math.min(30, extraLiquid * Math.max(1.1 - handValve3Open));\n            //     if (handValve3Open === 0) {\n            //         pressure2 += tank1Level * 0.3;\n            //     }\n            // }\n            // gauge2.transition(\"value\", pressure2 / 10);\n            // gauge2.transition(\n            //     \"fill\",\n            //     pressure2 > 30 ? MAX_PRESSURE_COLOR : PRESSURE_COLOR,\n            //     { valueFunction: util.interpolate.hexColor, duration: 1000 }\n            // );\n        }, 1000);\n    \n    self.onResize();\n}\n\nself.onDataUpdated = function() {\n    \n\n}\n\nself.onResize = function() {\n      \n}\n\nself.onDestroy = function() {\n}\n",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Kustia SCADA Design\"}"
    },
    "bundleAlias" : "kustia_widgets",
    "createdTime" : 1713674596570,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "ab6583a0-ff99-11ee-a56d-9d6138fe9e87"
    },
    "tenantId" : {
      "entityType" : "TENANT",
      "id" : "6a594940-e4c5-11ed-8f65-1f1c5e01f03a"
    }
  } ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}