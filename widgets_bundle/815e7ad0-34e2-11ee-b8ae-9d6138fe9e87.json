{
  "entityType" : "WIDGETS_BUNDLE",
  "entity" : {
    "alias" : "syngenta_widger",
    "description" : null,
    "externalId" : null,
    "id" : {
      "entityType" : "WIDGETS_BUNDLE",
      "id" : "815e7ad0-34e2-11ee-b8ae-9d6138fe9e87"
    },
    "image" : null,
    "name" : "Syngenta Widger",
    "title" : "Syngenta Widger"
  },
  "widgets" : [ {
    "alias" : "break_down",
    "name" : "Break Down",
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-datalabels/2.2.0/chartjs-plugin-datalabels.min.js"
      } ],
      "templateHtml" : "<div style=\"width: 100%; height: 100%;\">\n    <canvas id=\"breakDown_Chart\"></canvas>\n</div>",
      "templateCss" : "#container {\n    overflow: auto;\n}\n\n.tbDatasource-container {\n    margin: 5px;\n    padding: 8px;\n}\n\n.tbDatasource-title {\n    font-size: 1.200rem;\n    font-weight: 500;\n    padding-bottom: 10px;\n}\n\n.tbDatasource-table {\n    width: 100%;\n    box-shadow: 0 0 10px #ccc;\n    border-collapse: collapse;\n    white-space: nowrap;\n    font-size: 1.000rem;\n    color: #757575;\n}\n\n.tbDatasource-table td {\n    position: relative;\n    border-top: 1px solid rgba(0, 0, 0, 0.12);\n    border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n    padding: 0px 18px;\n    box-sizing: border-box;\n}",
      "controllerScript" : "self.onInit = function() {\n\t$scope = self.ctx.$scope;\n\tself.ctx.sum = 0;\n\tconst data = {\n\t\tlabels: ['RunTime', 'Plan Break', 'Down Time'],\n\t\tdatasets: [{\n\t\t\tlabel: '# of Votes',\n\t\t\tdata: [0, 0, 0],\n\t\t\tborderWidth: 0.5,\n\t\t\tborderColor: ['green', 'rgb(255, 144, 32)', 'red'],\n\t\t\tbackgroundColor: ['green', 'orange', 'red']\n\t\t}]\n\t};\n\tconst doughnutParcentage = {\n\t\tid: 'doughnutParcentage',\n\t\tafterDraw(chart, args, options) {\n\t\t\tconst {\n\t\t\t\tctx,\n\t\t\t\tchartArea: {\n\t\t\t\t\ttop,\n\t\t\t\t\tbottom,\n\t\t\t\t\tleft,\n\t\t\t\t\twrite,\n\t\t\t\t\twidth,\n\t\t\t\t\theight\n\t\t\t\t}\n\t\t\t} = chart;\n\t\t\tchart.data.datasets.forEach((dataset, i) => {\n\t\t\t\tchart.getDatasetMeta(i).data.forEach((dataPoint, index) => {\n\t\t\t\t\tconst {\n\t\t\t\t\t\tx,\n\t\t\t\t\t\ty\n\t\t\t\t\t} = dataPoint.tooltipPosition();\n\t\t\t\t\tconst value = dataPoint.$context.raw;\n\t\t\t\t\t// console.log(self.ctx.sum)\n\t\t\t\t\t// console.log(value)\n\t\t\t\t\tconst percentageValue = ((value / self.ctx.sum) * 100).toFixed(2);\n\n\t\t\t\t\tconst text = percentageValue + \"%\";\n\t\t\t\t\tctx.font = 'bold 16px sans-serif';\n\t\t\t\t\tctx.textAlign = 'center'\n\t\t\t\t\tctx.fillStyle = 'black';\n\t\t\t\t\tctx.fillText(text, x, y);\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\t}\n\tconst doughnutLabelsLine = {\n\t\tid: 'doughnutLabelsLine',\n\t\tafterDraw(chart, args, options) {\n\t\t\tconst {\n\t\t\t\tctx,\n\t\t\t\tchartArea: {\n\t\t\t\t\ttop,\n\t\t\t\t\tbottom,\n\t\t\t\t\tleft,\n\t\t\t\t\tright,\n\t\t\t\t\twidth,\n\t\t\t\t\theight\n\t\t\t\t}\n\t\t\t} = chart;\n\n\t\t\tchart.data.datasets.forEach((dataset, i) => {\n\t\t\t\tchart.getDatasetMeta(i).data.forEach((datapoint, index) => {\n\t\t\t\t\tconst {\n\t\t\t\t\t\tx,\n\t\t\t\t\t\ty\n\t\t\t\t\t} = datapoint.tooltipPosition();\n\n\t\t\t\t\t// ctx.fillStyle = dataset.borderColor[index];\n\t\t\t\t\t// ctx.fillRect(x, y, 20, 20);\n\n\t\t\t\t\t//draw line\n\t\t\t\t\tconst halfwidth = width / 2;\n\t\t\t\t\tconst helfheight = height / 2;\n\n\n\t\t\t\t\tconst xLine = x >= halfwidth ? x + 35 : x - 35;\n\t\t\t\t\tconst yLine = y >= helfheight ? y + 35 : y - 35;\n\t\t\t\t\tconst extraLine = x >= halfwidth ? 15 : -15;\n\t\t\t\t\t// line\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.moveTo(x, y);\n\t\t\t\t\tctx.lineTo(xLine, yLine);\n\t\t\t\t\tctx.lineTo(xLine + extraLine, yLine);\n\t\t\t\t\tctx.strokeStyle = dataset.borderColor[index];\n\t\t\t\t\tctx.stroke();\n\n\t\t\t\t\t// text\n\t\t\t\t\tconst textWidth = ctx.measureText(chart.data.labels[index].width);\n\t\t\t\t\tctx.font = '12px Arial';\n\n\t\t\t\t\t// control the postion\n\t\t\t\t\tconst textXPosition = x > +halfwidth ? 'left' : 'right';\n\t\t\t\t\tctx.textAlign = textXPosition;\n\t\t\t\t\tctx.textBaseline = 'middle';\n\t\t\t\t\tctx.fillStyle = dataset.borderColor[index];\n\t\t\t\t\tctx.fillText(chart.data.labels[index], xLine + extraLine, yLine);\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\t};\n\n\tconst breakDown_chart_config = {\n\t\ttype: 'doughnut',\n\t\tdata: data,\n\t\toptions: {\n\t\t\tresponsive: true,\n\t\t\tmaintainAspectRatio: false,\n\t\t\tlayout: {\n\t\t\t\tpadding: 30\n\t\t\t},\n\t\t\tplugins: {\n\t\t\t\tlegend: {\n\t\t\t\t\tdisplay: false\n\t\t\t\t},\n\t\t\t\ttitle: {\n\t\t\t\t\tdisplay: false,\n\t\t\t\t},\n\t\t\t\ttooltip: {\n\t\t\t\t\tcallbacks: {\n\t\t\t\t\t\tlabel: function(context) {\n\t\t\t\t\t\t\t//   console.log('context',context);\n\t\t\t\t\t\t\tlet time = moment(context.parsed).format('h:mm:ss ');\n\t\t\t\t\t\t\tlet x = time.split(\":\")[0];\n\t\t\t\t\t\t\tif (x => 6) {\n\t\t\t\t\t\t\t\tx = x - 6;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// console.log(\"time\",time) \n\t\t\t\t\t\t\tlet text = time.split(\":\")\n\t\t\t\t\t\t\ttext[0] = x;\n\t\t\t\t\t\t\t// console.log(text)\n\t\t\t\t\t\t\ttext = text.toString()\n\t\t\t\t\t\t\ttext = text.replaceAll(',', ':')\n\t\t\t\t\t\t\treturn context.label + \" \" + text;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tdatalabels: {\n\t\t\t\t\t// backgroundColor: function(context) {\n\t\t\t\t\t//   return '#4bc0c0';\n\t\t\t\t\t// },\n\t\t\t\t\t// borderRadius: 10,\n\t\t\t\t\t// color: 'black',\n\t\t\t\t\t// font: {\n\t\t\t\t\t//   weight: 'bold',\n\t\t\t\t\t//   size:'16 px' \n\t\t\t\t\t// },\n\t\t\t\t\t// formatter: Math.round,\n\t\t\t\t\t// padding: 5\n\n\n\t\t\t\t\tcolor: 'black',\n\t\t\t\t\tlabels: {\n\t\t\t\t\t\ttitle: {\n\t\t\t\t\t\t\tfont: {\n\t\t\t\t\t\t\t\tweight: 'bold',\n\t\t\t\t\t\t\t\tsize: '20 px'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\tcolor: 'transparent'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\tplugins: [doughnutParcentage, doughnutLabelsLine],\n\t\t//   plugins:[doughnutLabelsLine],\n\t};\n\n\tconst breakDown_ctx = document.getElementById('breakDown_Chart');\n\tlet break_own_context = new Chart(breakDown_ctx, breakDown_chart_config);\n\n\tlet link = 'https://syngenta-ctg.syncross.ai/nrdapi/shiftoeeinfo?start_ts=1691604000000&end_ts=1691690400000&entity_id=d40240f0-fa18-11ed-875f-535e61749edf&shift_start=1691627400000';\n\n\t$scope.http = {\n\t\tmethod: self.ctx.http,\n\t\tbaseUrl: link,\n\t\tconfig: {\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\"X-Authorization\": \"Bearer \" + localStorage.getItem('jwt_token')\n\t\t\t}\n\t\t}\n\t};\n\n\t$scope.http.method.get($scope.http.baseUrl, $scope.http.config).subscribe(function(r) {\n\t\t// console.log(\"r\",r)\n\t\tself.ctx.sum = Number(r.run_time) + Number(r.break_time) + Number(r.down_time);\n\t\tbreak_own_context.data.datasets[0].data = [r.run_time, r.break_time, r.down_time];\n\t\tbreak_own_context.update();\n\t});\n\n}\n\nself.onDataUpdated = function() {\n\n}\n\nself.onResize = function() {\n\n}\n\nself.onDestroy = function() {}",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Break Down\"}"
    },
    "bundleAlias" : "syngenta_widger",
    "createdTime" : 1691659114376,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "e1707080-375e-11ee-a7ff-9d6138fe9e87"
    },
    "tenantId" : {
      "entityType" : "TENANT",
      "id" : "6a594940-e4c5-11ed-8f65-1f1c5e01f03a"
    }
  }, {
    "alias" : "generic_doughnut",
    "name" : "Generic Doughnut",
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 8.5,
      "sizeY" : 6,
      "resources" : [ {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"
      } ],
      "templateHtml" : "\n<div style=\"width:100%; height:100%\" [style.background-color]=\"backgroundColor\" [style.color]=\"txtColor\">\n    <canvas id=\"{{apiFilterKey}}\"></canvas>\n</div>\n",
      "templateCss" : "#container {\n    overflow: auto;\n}\n\n.tbDatasource-container {\n    margin: 5px;\n    padding: 8px;\n}\n\n.tbDatasource-title {\n    font-size: 1.200rem;\n    font-weight: 500;\n    padding-bottom: 10px;\n}\n\n.tbDatasource-table {\n    width: 100%;\n    box-shadow: 0 0 10px #ccc;\n    border-collapse: collapse;\n    white-space: nowrap;\n    font-size: 1.000rem;\n    color: #757575;\n}\n\n.tbDatasource-table td {\n    position: relative;\n    border-top: 1px solid rgba(0, 0, 0, 0.12);\n    border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n    padding: 0px 18px;\n    box-sizing: border-box;\n}",
      "controllerScript" : "self.onInit = function() {\n    let $scope = self.ctx.$scope;\n    let settings = self.ctx.settings || {};\n    console.log(\"settings\",self.ctx.settings);\n    $scope.backgroundColor=self.ctx.widgetConfig.backgroundColor;\n\t$scope.txtColor=self.ctx.widgetConfig.color;\n\t\n\tconsole.log(\"-----\",settings.doughnut_label) \n\tconsole.log(\"-----\",settings.filter_text) \n\t\n\t$scope.chartTitle= settings.doughnut_label;\n\t$scope.apiFilterKey=settings.filter_text;\n\t$scope.emptyDoughnutColor = settings.empty_doughnut_color;\n    $scope.buttoncolor = settings.button_color;\n    $scope.buttonTextcolor = settings.button_text_color;\n    \n    const stackedText_plugines = {\n\t\tid: 'stackedText_plugines',\n\t\tafterDatasetDraw(chart, args, options) {\n\t\t\tconst {\n\t\t\t\tctx,\n\t\t\t\tchartArea: {\n\t\t\t\t\ttop,\n\t\t\t\t\tright,\n\t\t\t\t\tbottom,\n\t\t\t\t\tleft,\n\t\t\t\t\twidth,\n\t\t\t\t\theight\n\t\t\t\t}\n\t\t\t} = chart;\n\t\t\tlet doughnutSize=height>width?width:height;\n\t\t\tconsole.log(\"doughnut\",height,width,doughnutSize)\n\t\t\t\n\t\t\tctx.save();\n\t\t\t//const fontHeight = 40;\n\t\t\tconst halfFontHeight = doughnutSize/5;\n\t\t\t//TODO: find the center position with drow line.\n\t\t\t// ctx.fillStyle = 'black';\n\t\t\t// ctx.fillRect(width / 2, top, 1, bottom);\n\t\t\t// ctx.fillRect(left, height / 2, right, 1);\n\t\t\tctx.font = ` ${doughnutSize/5}px ${options.fontFamily}`;\n\t\t\tctx.textAlign = 'center';\n\t\t\tctx.fillStyle = options.fontColor;\n\t\t\tctx.fillText(options.doughnutTargetValue + '%', width / 2, (height / 2) + (halfFontHeight * 0.34) + parseInt(halfFontHeight/2));\n\t\t\t//center formula.. it's depand of text font size.\n\t\t\tctx.restore();\n\t\t\tctx.font = ` ${doughnutSize/8}px ${options.fontFamily}`;\n\t\t\tctx.textAlign = 'center';\n\t\t\tctx.fillStyle = options.fontColor;\n\t\t\tctx.fillText(options.titleVaue, width / 2, height / 2 + (halfFontHeight * 0.34) - parseInt(halfFontHeight/2));\n\t\t\tctx.restore();\n\t\t\t// \t\t\tctx.font = ` ${options.fontSize}px ${options.fontFamily}`;\n\t\t\t// \t\t\tctx.textAlign = 'center';\n\t\t\t// \t\t\tctx.fillStyle = options.fontColor;\n\t\t\t// \t\t\tctx.fillText(`${options.completedValue}`, width / 2, (height / 2) + parseInt(options.fontSize));\n\t\t\t// \t\t\tctx.restore();\n\t\t\t// \t\t\tctx.font = ` ${halfFontHeight}px ${options.fontFamily}`;\n\t\t\t// \t\t\tctx.textAlign = 'center';\n\t\t\t// \t\t\tctx.fillStyle = options.fontColor;\n\t\t\t// \t\t\tctx.fillText('Completed', width / 2, height / 2 + parseInt(options.fontSize) + parseInt(halfFontHeight));\n\t\t\t// \t\t\tctx.restore();\n\t\t}\n\t};\n    \n    const emptyDoughnut_plugins = {\n\t\tid: 'emptyDoughnut_plugins',\n\t\tbeforeDatasetDraw(chart, args, options) {\n\t\t\t// const { datasets } = chart.data;\n\t\t\tconst {\n\t\t\t\tcolor,\n\t\t\t\twidth,\n\t\t\t\tradiusDecrease\n\t\t\t} = options;\n\t\t\tconst {\n\t\t\t\tchartArea: {\n\t\t\t\t\tleft,\n\t\t\t\t\ttop,\n\t\t\t\t\tright,\n\t\t\t\t\tbottom\n\t\t\t\t},\n\t\t\t\tctx\n\t\t\t} = chart;\n\t\t\tconst centerX = (left + right) / 2;\n\t\t\tconst centerY = (top + bottom) / 2;\n\t\t\tconst r = Math.min(right - left, bottom - top) / 2;\n\t\t\tctx.beginPath();\n\t\t\tctx.lineWidth = width || 2;\n\t\t\tctx.strokeStyle = color || 'rgba(255, 128, 0, 0.5)';\n\t\t\tctx.arc(centerX, centerY, (r - radiusDecrease || 0), 0, 2 * Math.PI);\n\t\t\tctx.stroke();\n\t\t}\n\t};\n    \n    const oee_data = {\n\t\tlabels: ['Complete', 'Incomplete'],\n\t\tdatasets: [{\n\t\t\tlabel: 'Dataset 1',\n\t\t\tdata: [0, 0],\n\t\t\tbackgroundColor: [\n\t\t\t\t'red', 'rgba(0,0,0,.1)',\n\t\t\t],\n\t\t\tborderColor: [\n\t\t\t\t'red', 'rgba(0,0,0,.1)',\n\t\t\t],\n\t\t\tborderWidth: 6,\n\t\t\tcutout: '80%',\n// \t\t\tborderRadius: 50,\n// \t\t\thoverOffset: 2\n\t\t}]\n\t};\n    \n    \n    const oee_chart_config = {\n\t\ttype: 'doughnut',\n\t\tdata: oee_data,\n\t\toptions: {\n\t\t\tresponsive: true,\n\t\t\tmaintainAspectRatio: false,\n\t\t\tplugins: {\n\t\t\t\tlegend: {\n\t\t\t\t\tdisplay: false\n\t\t\t\t},\n\t\t\t\ttitle: {\n\t\t\t\t\tdisplay: false,\n\t\t\t\t},\n\t\t\t\temptyDoughnut_plugins: {\n\t\t\t\t\tcolor: $scope.emptyDoughnutColor,\n\t\t\t\t\twidth: 45,\n\t\t\t\t\tradiusDecrease: 23\n\t\t\t\t},\n\t\t\t\tstackedText_plugines: {\n\t\t\t\t\tfontColor: $scope.txtColor,\n\t\t\t\t\tfontSize: '30',\n\t\t\t\t\tfontFamily: 'Arial',\n\t\t\t\t\tcompletedValue: 100,\n\t\t\t\t\ttitleVaue: ' ',\n\t\t\t\t\tdoughnutTargetValue: 0\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tplugins: [ stackedText_plugines],\n\t};\n    \n    \n    \n\t$(document).ready(function(){\n      const oee_ctx = document.getElementById($scope.apiFilterKey);\n\t    $scope.chartContext = new Chart(oee_ctx, oee_chart_config);\n\t   // \tchartValueUpdate($scope.chartContext)\n    });\n\t\n\tfunction chartValueUpdate(chartCTX,response){\n\t    console.log('response',response)\n\t    let percantageValue = Math.trunc(Number(response[$scope.apiFilterKey]) * 100);\n\t    console.log(\"percantageValue\",percantageValue)\n\t\tlet doughnutValue = percantageValue;\n\t\tif (percantageValue > 100) {\n\t\t\tdoughnutValue = 100;\n\t\t} \n\t\t\n\t\tlet doughnutColor = ''\n\t\tif (percantageValue >= 75) {\n\t\t\tdoughnutColor = \"green\";\n\t\t} else if (percantageValue < 75 && percantageValue >= 50) {\n\t\t\tdoughnutColor = \"orange\";\n\t\t} else {\n\t\t\tdoughnutColor = \"red\";\n\t\t}\n\t    // doughnut completed Value\n\t    \n\t    chartCTX.data.datasets[0].data[0]=doughnutValue;\n\t    chartCTX.data.datasets[0].data[1]=100-doughnutValue;\n\t    chartCTX.options.plugins.stackedText_plugines.fontColor=$scope.txtColor;\n\t    \n\t    chartCTX.data.datasets[0].backgroundColor[0] = doughnutColor;\n\t\tchartCTX.data.datasets[0].borderColor[0] = doughnutColor\n\t   // chartCTX.options.plugins.stackedText_plugines.fontSize='16';\n\t    chartCTX.options.plugins.stackedText_plugines.titleVaue=$scope.chartTitle;\n\t    chartCTX.options.plugins.stackedText_plugines.doughnutTargetValue=doughnutValue;\n\t    chartCTX.update();\n\t}\n\t\n\tlet link = 'https://syngenta-ctg.syncross.ai/nrdapi/shiftoeeinfo?start_ts=1691604000000&end_ts=1691690400000&entity_id=d40240f0-fa18-11ed-875f-535e61749edf&shift_start=1691627400000';\n\n\t$scope.http = {\n\t\tmethod: self.ctx.http,\n\t\tbaseUrl: link,\n\t\tconfig: {\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\"X-Authorization\": \"Bearer \" + localStorage.getItem('jwt_token')\n\t\t\t}\n\t\t} \n\t};\n\t\n\t$scope.http.method.get($scope.http.baseUrl, $scope.http.config).subscribe(function(r) {\n\t\tconsole.log(\"r\", r[$scope.apiFilterKey]);\n\t\tconsole.log(\"-->\",self.ctx.settings.filter_text)\n\t\tchartValueUpdate($scope.chartContext,r)\n\t});\n\n}\n \nself.onDataUpdated = function() {\n \n}\n\nself.onResize = function() {\n\n}\n\nself.onDestroy = function() {\n}\n",
      "settingsSchema" : "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \n            \"doughnut_label\": {\n                \"title\": \"Doughnut Label Text\",\n                \"type\": \"string\",\n                \"default\": \"Test Text\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"doughnut_label\": {\n                            \"title\": \"doughnut_label\",\n                            \"type\": \"string\"\n                        }\n                    }\n                }\n            },\n            \n            \"filter_text\": {\n                \"title\": \"Filter key\",\n                \"type\": \"string\",\n                \"default\": \"Api data filter key\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"filter_text\": {\n                            \"title\": \"filter_text\",\n                            \"type\": \"string\"\n                        }\n                    }\n                }\n            }\n            \n            \n            \n        },\n        \"required\": []\n    },\n    \"form\": [\n        \n            {\"key\":\"doughnut_label\", \"type\":\"text\"},\n            {\"key\":\"filter_text\", \"type\":\"text\"}\n            \n            \n           \n        \n    ]\n    \n}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"doughnut_label\":\"Test Text\",\"filter_text\":\"oee\",\"button_color\":\"#19B159\",\"button_text_color\":\"#19B159\",\"empty_doughnut_color\":\"#a3a4a3\"},\"title\":\"Generic Doughnut\"}"
    },
    "bundleAlias" : "syngenta_widger",
    "createdTime" : 1691995289851,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "99a30cb0-3a6d-11ee-a5b1-9d6138fe9e87"
    },
    "tenantId" : {
      "entityType" : "TENANT",
      "id" : "6a594940-e4c5-11ed-8f65-1f1c5e01f03a"
    }
  }, {
    "alias" : "meter_gauge_chart",
    "name" : "meter gauge chart",
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7,
      "sizeY" : 5,
      "resources" : [ {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"
      } ],
      "templateHtml" : "<div style=\"width:100%; height:100%\" [style.background-color]=\"backgroundColor\" [style.color]=\"txtColor\">\n    <canvas id=\"meterGaugeChart\"></canvas>\n</div>",
      "templateCss" : "#container {\n    overflow: auto;\n}\n\n.tbDatasource-container {\n    margin: 5px;\n    padding: 8px;\n}\n\n.tbDatasource-title {\n    font-size: 1.200rem;\n    font-weight: 500;\n    padding-bottom: 10px;\n}\n\n.tbDatasource-table {\n    width: 100%;\n    box-shadow: 0 0 10px #ccc;\n    border-collapse: collapse;\n    white-space: nowrap;\n    font-size: 1.000rem;\n    color: #757575;\n}\n\n.tbDatasource-table td {\n    position: relative;\n    border-top: 1px solid rgba(0, 0, 0, 0.12);\n    border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n    padding: 0px 18px;\n    box-sizing: border-box;\n}",
      "controllerScript" : "self.onInit = function() {\n    let $scope = self.ctx.$scope;\n    let settings = self.ctx.settings || {};\n    console.log(\"settings\",self.ctx.settings);\n    $scope.backgroundColor=self.ctx.widgetConfig.backgroundColor;\n\t$scope.txtColor=self.ctx.widgetConfig.color;\n    \n    const gaugeNeddle = {\n\t\tid: 'gaugeNeddle',\n\t\tafterDatasetsDraw(chart, agrs, plugins) {\n\t\t\tconst {\n\t\t\t\tctx,\n\t\t\t\tdata\n\t\t\t} = chart;\n\t\t\tctx.save();\n\t\t\tconst needleValue = data.datasets[0].needleValue;\n\t\t\tconst xCenter = chart.getDatasetMeta(0).data[0].x;\n\t\t\tconst yCenter = chart.getDatasetMeta(0).data[0].y;\n\t\t\tconst outerRadiious = chart.getDatasetMeta(0).data[0].outerRadius - 6;\n\t\t\tlet angle = Math.PI;\n\n\t\t\tconst dataTotal = data.datasets[0].data.reduce((a, b) => a + b, 0);\n\t\t\tlet circumference = ((chart.getDatasetMeta(0).data[0].circumference / Math.PI) / data.datasets[0].data[0]) * needleValue;\n\t\t\tconst needleAngleValue = circumference + 1.5;\n\n\t\t\tctx.translate(xCenter, yCenter)\n\t\t\tctx.rotate(angle * needleAngleValue)\n\n\t\t\t// Needle\n\t\t\tctx.beginPath();\n\t\t\tctx.strokeStyle = 'darkgray';\n\t\t\tctx.fillStyle = 'darkgray';\n\t\t\tctx.moveTo(0 - 5, 0);\n\t\t\tctx.lineTo(0, -outerRadiious);\n\t\t\tctx.lineTo(0 + 5, 0);\n\t\t\tctx.stroke();\n\t\t\tctx.fill();\n\n\n\n\t\t\t// dot\n\t\t\tctx.beginPath();\n\t\t\tctx.arc(0, 0, 10, Math.PI * 0, Math.PI * 2, false);\n\t\t\tctx.fill();\n\t\t\tctx.restore();\n\n\n\t\t}\n\t};\n\n\tconst gaugeText = {\n\t\tid: 'gaugeText',\n\t\tafterDatasetsDraw(chart, args, pluginOptions) {\n\t\t\tconst {\n\t\t\t\tctx,\n\t\t\t\tdata,\n\t\t\t\tchartArea: {\n\t\t\t\t\ttop,\n\t\t\t\t\tbottom,\n\t\t\t\t\tleft,\n\t\t\t\t\tright,\n\t\t\t\t\twidth,\n\t\t\t\t\theight\n\t\t\t\t},\n\t\t\t\tscales: {\n\t\t\t\t\tr\n\t\t\t\t}\n\t\t\t} = chart;\n\n\t\t\tctx.save();\n\t\t\tconst xCoor = chart.getDatasetMeta(0).data[0].x;\n\t\t\tconst yCoor = chart.getDatasetMeta(0).data[0].y;\n\t\t\tconsole.log()\n\t\t\t// ctx.fillRect(xCoor, yCoor, 400, 1);\n\n\t\t\tctx.font = '15px sans-serfi';\n\t\t\tctx.fillStyle = $scope.txtColor;\n\t\t\tctx.textBaseLine = 'top';\n\t\t\tctx.textAlign = 'left';\n\t\t\tctx.fillText('Current Rate', left, yCoor + 20);\n\t\t\tctx.textAlign = 'right';\n\t\t\tctx.fillText('Target: ' + pluginOptions.prod_terph, right, yCoor + 20);\n\n\t\t\tctx.font = '30px sans-serfi';\n\t\t\tctx.textAlign = 'center';\n\t\t\tctx.fillText(pluginOptions.prod_perh + \"/h\", xCoor, yCoor - 30);\n\t\t}\n\t};\n\n\tconst meter_chart_conf = {\n\t\ttype: 'doughnut',\n\t\tdata: {\n\t\t\tlabels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n\t\t\tdatasets: [{\n\t\t\t\tlabel: '# of Votes',\n\t\t\t\tdata: [33.3, 33.3, 33.3],\n\t\t\t\tbackgroundColor: ['red', 'orange', 'green'],\n\t\t\t\tborderWidth: 0,\n\t\t\t\tcircumference: 180,\n\t\t\t\trotation: 270,\n\t\t\t\tcutout: '86%',\n\t\t\t\tborderRadius: 0,\n\t\t\t\tneedleValue: 55,\n\t\t\t}]\n\t\t},\n\t\toptions: {\n\t\t\taspectRatio: 1.2,\n\t\t\tresponsive: true,\n\t\t\tmaintainAspectRatio: false,\n\t\t\tplugins: {\n\t\t\t\tlegend: {\n\t\t\t\t\tdisplay: false\n\t\t\t\t},\n\t\t\t\tgaugeText: {\n\t\t\t\t\tprod_perh: 50,\n\t\t\t\t\tprod_terph: 10,\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t},\n\t\tplugins: [gaugeText, gaugeNeddle]\n\t};\n    \n   const meter_ctx = document.getElementById('meterGaugeChart');\n    let meter_context =new Chart(meter_ctx, meter_chart_conf);\n    \n\t\n\t\tlet link = 'https://syngenta-ctg.syncross.ai/nrdapi/shiftoeeinfo?start_ts=1691604000000&end_ts=1691690400000&entity_id=d40240f0-fa18-11ed-875f-535e61749edf&shift_start=1691627400000';\n\n\t$scope.http = {\n\t\tmethod: self.ctx.http,\n\t\tbaseUrl: link,\n\t\tconfig: {\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\"X-Authorization\": \"Bearer \" + localStorage.getItem('jwt_token')\n\t\t\t}\n\t\t}\n\t};\n\t\n\t$scope.http.method.get($scope.http.baseUrl, $scope.http.config).subscribe(function(r) {\n\t\tconsole.log(\"r\", r);\n\t\tmeter_context.options.plugins.gaugeText.prod_perh = Number(r.prodn_rateph);\n\t\tmeter_context.options.plugins.gaugeText.prod_terph = Number(r.prodn_targetph);\n\t\tlet niddle_target = Number(r.prodn_rateph) / Number(r.prodn_targetph);\n\t\tmeter_context.data.datasets[0].needleValue = \n\t\t10;\n\t\tmeter_context.update();\n\t});\n}\n\nself.onDataUpdated = function() {\n   \n}\n\nself.onResize = function() {\n   \n}\n\nself.onDestroy = function() {\n}\n",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#7d7d7d\",\"color\":\"rgba(255,255,255,0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"meter gauge chart\",\"showTitleIcon\":false,\"titleTooltip\":\"\",\"dropShadow\":true,\"enableFullscreen\":true,\"widgetStyle\":{},\"widgetCss\":\"\",\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"pageSize\":1024,\"noDataDisplayMessage\":\"\",\"showLegend\":false}"
    },
    "bundleAlias" : "syngenta_widger",
    "createdTime" : 1692165065681,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "e3ead410-3bf8-11ee-a5b1-9d6138fe9e87"
    },
    "tenantId" : {
      "entityType" : "TENANT",
      "id" : "6a594940-e4c5-11ed-8f65-1f1c5e01f03a"
    }
  }, {
    "alias" : "overview",
    "name" : "Overview",
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 9.5,
      "sizeY" : 9,
      "resources" : [ {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-zoom/2.0.1/chartjs-plugin-zoom.min.js"
      }, {
        "url" : "https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"
      } ],
      "templateHtml" : "<div style=\"margin-bottom:10px\">\n    <mat-card>\n        <mat-card-content>\n            <span style=\"margin-right: 30px;\">Shift Name: <b>A</b></span> \n            <span style=\"margin-right: 30px;\">Start: <b>06:30 am</b></span>\n            <span style=\"margin-right: 30px;\">End: <b>02:00 pm</b></span>\n            <button mat-raised-button class=\"btn_common\">Basic</button>\n            <button mat-raised-button color=\"primary\" class=\"btn_common\">Primary</button>\n            <button mat-raised-button color=\"accent\" class=\"btn_common\">Accent</button>\n            <button mat-raised-button color=\"warn\" class=\"btn_common\">Warn</button>\n        </mat-card-content>\n    </mat-card>\n</div>\n<div style=\"display: flex; justify-content: space-between;\">\n    <mat-card style=\"width:28%; \">\n        <mat-card-content>\n            <div >\n                <canvas id=\"oee_Chart\"></canvas>\n            </div>\n        </mat-card-content>\n    </mat-card>\n    <div style=\"width: 100%;\">\n        <div style=\"  display: flex; justify-content: space-evenly; width: 100%; height: 250px;\">\n            <mat-card style=\"width:20%; \">\n            <mat-card-content>\n                <div >\n                    <canvas id=\"ava_Chart\"></canvas>\n                </div>\n            </mat-card-content>\n            </mat-card>\n            <mat-card style=\"width:20%; \">\n                <mat-card-content>\n                    <div >\n                        <canvas id=\"per_Chart\"></canvas>\n                    </div>\n                </mat-card-content>\n            </mat-card>\n            <mat-card style=\"width:20%; \">\n                <mat-card-content>\n                    <div >\n                        <canvas id=\"qua_Chart\"></canvas>\n                    </div>\n                </mat-card-content>\n            </mat-card>\n            <mat-card style=\"width:20%; \">\n                <mat-card-content>\n                    <div>\n                        <canvas id=\"meterChart\"></canvas>\n                    </div>\n                </mat-card-content>\n            </mat-card>\n        </div>\n        <div style=\"display: flex; justify-content: space-evenly; margin-top: 10px;\">\n            <mat-card style=\"width: 44%; display: flex; justify-content: space-around;\">\n                <mat-card-header>\n                    <mat-card-title>Total Production</mat-card-title>\n                    <!--<mat-card-subtitle id=\"production\" style=\"display: flex; justify-content: center;\">10000</mat-card-subtitle>-->\n                    <mat-card-title id=\"production\">Total Production</mat-card-title>\n                </mat-card-header>\n                <mat-card-header>\n                    <mat-card-title>Total Reject</mat-card-title>\n                    <mat-card-title id=\"reject\">Total Reject</mat-card-title>\n                </mat-card-header>\n                \n            </mat-card>\n            <mat-card style=\"width: 44%; display: flex; justify-content: space-around;\">\n                <mat-card-header>\n                    <mat-card-title>Total Planned Shutdown</mat-card-title>\n                    <mat-card-title id=\"plannedShutdown\">Total Planned Shutdown</mat-card-title>\n                </mat-card-header>\n                <mat-card-header>\n                    <mat-card-title>Total Downtime</mat-card-title>\n                    <mat-card-title id=\"downtime\">Total Downtime</mat-card-title>\n                </mat-card-header>\n            </mat-card>\n        </div>\n    </div>\n</div>\n<div style=\"margin-top: 10px;\">\n    <mat-card>\n        <mat-card-content>\n            <div style=\"height: 120px; width: 100%;\">\n                <canvas id=\"progressChart\"></canvas>\n            </div>\n        </mat-card-content>\n    </mat-card>\n</div>",
      "templateCss" : "#container {\n    overflow: auto;\n}\n\n.tbDatasource-container {\n    margin: 5px;\n    padding: 8px;\n}\n\n.tbDatasource-title {\n    font-size: 1.200rem;\n    font-weight: 500;\n    padding-bottom: 10px;\n}\n\n.tbDatasource-table {\n    width: 100%;\n    box-shadow: 0 0 10px #ccc;\n    border-collapse: collapse;\n    white-space: nowrap;\n    font-size: 1.000rem;\n    color: #757575;\n}\n\n.tbDatasource-table td {\n    position: relative;\n    border-top: 1px solid rgba(0, 0, 0, 0.12);\n    border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n    padding: 0px 18px;\n    box-sizing: border-box;\n}\n\n\n.btn_common{\n    margin-right: 10px;\n}",
      "controllerScript" : "self.onInit = function() {\n\tlet $scope = self.ctx.$scope;\n\t$scope.machineData = {\n\t\toee: {},\n\t\tavailability: {},\n\t\tperformance: {},\n\t\tquality: {},\n\t\tmeter: {},\n\t\tprogress: {}\n\t};\n\t//counter plugin block\n\tconst stackedText_plugines = {\n\t\tid: 'stackedText_plugines',\n\t\tafterDatasetDraw(chart, args, options) {\n\t\t\tconst {\n\t\t\t\tctx,\n\t\t\t\tchartArea: {\n\t\t\t\t\ttop,\n\t\t\t\t\tright,\n\t\t\t\t\tbottom,\n\t\t\t\t\tleft,\n\t\t\t\t\twidth,\n\t\t\t\t\theight\n\t\t\t\t}\n\t\t\t} = chart;\n\t\t\tctx.save();\n\t\t\t//const fontHeight = 40;\n\t\t\tconst halfFontHeight = options.fontSize / 2;\n\t\t\t//TODO: find the center position with drow line.\n\t\t\t// ctx.fillStyle = 'black';\n\t\t\t// ctx.fillRect(width / 2, top, 1, bottom);\n\t\t\t// ctx.fillRect(left, height / 2, right, 1);\n\t\t\tctx.font = ` ${options.fontSize}px ${options.fontFamily}`;\n\t\t\tctx.textAlign = 'center';\n\t\t\tctx.fillStyle = options.fontColor;\n\t\t\tctx.fillText(options.doughnutTargetValue + '%', width / 2, (height / 2) + (options.fontSize * 0.34) + parseInt(halfFontHeight));\n\t\t\t//center formula.. it's depand of text font size.\n\t\t\tctx.restore();\n\t\t\tctx.font = ` ${options.fontSize}px ${options.fontFamily}`;\n\t\t\tctx.textAlign = 'center';\n\t\t\tctx.fillStyle = options.fontColor;\n\t\t\tctx.fillText(options.titleVaue, width / 2, height / 2 + (options.fontSize * 0.34) - parseInt(halfFontHeight));\n\t\t\tctx.restore();\n\t\t\t// \t\t\tctx.font = ` ${options.fontSize}px ${options.fontFamily}`;\n\t\t\t// \t\t\tctx.textAlign = 'center';\n\t\t\t// \t\t\tctx.fillStyle = options.fontColor;\n\t\t\t// \t\t\tctx.fillText(`${options.completedValue}`, width / 2, (height / 2) + parseInt(options.fontSize));\n\t\t\t// \t\t\tctx.restore();\n\t\t\t// \t\t\tctx.font = ` ${halfFontHeight}px ${options.fontFamily}`;\n\t\t\t// \t\t\tctx.textAlign = 'center';\n\t\t\t// \t\t\tctx.fillStyle = options.fontColor;\n\t\t\t// \t\t\tctx.fillText('Completed', width / 2, height / 2 + parseInt(options.fontSize) + parseInt(halfFontHeight));\n\t\t\t// \t\t\tctx.restore();\n\t\t}\n\t};\n\tconst emptyDoughnut_plugins = {\n\t\tid: 'emptyDoughnut_plugins',\n\t\tbeforeDatasetDraw(chart, args, options) {\n\t\t\t// const { datasets } = chart.data;\n\t\t\tconst {\n\t\t\t\tcolor,\n\t\t\t\twidth,\n\t\t\t\tradiusDecrease\n\t\t\t} = options;\n\t\t\tconst {\n\t\t\t\tchartArea: {\n\t\t\t\t\tleft,\n\t\t\t\t\ttop,\n\t\t\t\t\tright,\n\t\t\t\t\tbottom\n\t\t\t\t},\n\t\t\t\tctx\n\t\t\t} = chart;\n\t\t\tconst centerX = (left + right) / 2;\n\t\t\tconst centerY = (top + bottom) / 2;\n\t\t\tconst r = Math.min(right - left, bottom - top) / 2;\n\t\t\tctx.beginPath();\n\t\t\tctx.lineWidth = width || 2;\n\t\t\tctx.strokeStyle = color || 'rgba(255, 128, 0, 0.5)';\n\t\t\tctx.arc(centerX, centerY, (r - radiusDecrease || 0), 0, 2 * Math.PI);\n\t\t\tctx.stroke();\n\t\t}\n\t};\n\tconst oee_data = {\n\t\tlabels: ['Complete', 'Incomplete'],\n\t\tdatasets: [{\n\t\t\tlabel: 'Dataset 1',\n\t\t\tdata: [0, 0],\n\t\t\tbackgroundColor: [\n\t\t\t\t'red', 'transparent',\n\t\t\t],\n\t\t\tborderColor: [\n\t\t\t\t'red', 'transparent',\n\t\t\t],\n\t\t\tborderWidth: 6,\n\t\t\tcutout: '95%',\n\t\t\tborderRadius: 50,\n\t\t\thoverOffset: 2\n\t\t}]\n\t};\n\n\tconst oee_chart_config = {\n\t\ttype: 'doughnut',\n\t\tdata: oee_data,\n\t\toptions: {\n\t\t\tresponsive: true,\n\t\t\tplugins: {\n\t\t\t\tlegend: {\n\t\t\t\t\tdisplay: false\n\t\t\t\t},\n\t\t\t\ttitle: {\n\t\t\t\t\tdisplay: false,\n\t\t\t\t},\n\t\t\t\temptyDoughnut_plugins: {\n\t\t\t\t\tcolor: 'rgb(245, 245, 245)',\n\t\t\t\t\twidth: 13.5,\n\t\t\t\t\tradiusDecrease: 6\n\t\t\t\t},\n\t\t\t\tstackedText_plugines: {\n\t\t\t\t\tfontColor: 'black',\n\t\t\t\t\tfontSize: '30',\n\t\t\t\t\tfontFamily: 'Arial',\n\t\t\t\t\tcompletedValue: 100,\n\t\t\t\t\ttitleVaue: '',\n\t\t\t\t\tdoughnutTargetValue: 0\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tplugins: [emptyDoughnut_plugins, stackedText_plugines],\n\t};\n\n\tconst ava_data = {\n\t\tlabels: ['Red', 'Orange'],\n\t\tdatasets: [{\n\t\t\tlabel: 'Dataset 1',\n\t\t\tdata: [0, 0],\n\t\t\tbackgroundColor: [\n\t\t\t\t'red', 'transparent',\n\t\t\t],\n\t\t\tborderColor: [\n\t\t\t\t'red', 'transparent',\n\t\t\t],\n\t\t\tborderWidth: 6,\n\t\t\tcutout: '95%',\n\t\t\tborderRadius: 50,\n\t\t\thoverOffset: 2\n\t\t}]\n\t};\n\n\tconst ava_chart_config = {\n\t\ttype: 'doughnut',\n\t\tdata: oee_data,\n\t\toptions: {\n\t\t\tresponsive: true,\n\t\t\tplugins: {\n\t\t\t\tlegend: {\n\t\t\t\t\tdisplay: false\n\t\t\t\t},\n\t\t\t\ttitle: {\n\t\t\t\t\tdisplay: false,\n\t\t\t\t},\n\t\t\t\temptyDoughnut_plugins: {\n\t\t\t\t\tcolor: 'rgb(245, 245, 245)',\n\t\t\t\t\twidth: 13.5,\n\t\t\t\t\tradiusDecrease: 6\n\t\t\t\t},\n\t\t\t\tstackedText_plugines: {\n\t\t\t\t\tfontColor: 'black',\n\t\t\t\t\tfontSize: '26',\n\t\t\t\t\tfontFamily: 'Arial',\n\t\t\t\t\tcompletedValue: 100,\n\t\t\t\t\ttitleVaue: '',\n\t\t\t\t\tdoughnutTargetValue: 0\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tplugins: [emptyDoughnut_plugins, stackedText_plugines],\n\t};\n\n\n\tconst per_data = {\n\t\tlabels: ['Red', 'Orange'],\n\t\tdatasets: [{\n\t\t\tlabel: 'Dataset 1',\n\t\t\tdata: [0, 0],\n\t\t\tbackgroundColor: [\n\t\t\t\t'red', 'transparent',\n\t\t\t],\n\t\t\tborderColor: [\n\t\t\t\t'red', 'transparent',\n\t\t\t],\n\t\t\tborderWidth: 6,\n\t\t\tcutout: '95%',\n\t\t\tborderRadius: 50,\n\t\t\thoverOffset: 2\n\t\t}]\n\t};\n\n\tconst per_chart_config = {\n\t\ttype: 'doughnut',\n\t\tdata: per_data,\n\t\toptions: {\n\t\t\tresponsive: true,\n\t\t\tplugins: {\n\t\t\t\tlegend: {\n\t\t\t\t\tdisplay: false\n\t\t\t\t},\n\t\t\t\ttitle: {\n\t\t\t\t\tdisplay: false,\n\t\t\t\t},\n\t\t\t\temptyDoughnut_plugins: {\n\t\t\t\t\tcolor: 'rgb(245, 245, 245)',\n\t\t\t\t\twidth: 13.5,\n\t\t\t\t\tradiusDecrease: 6\n\t\t\t\t},\n\t\t\t\tstackedText_plugines: {\n\t\t\t\t\tfontColor: 'black',\n\t\t\t\t\tfontSize: '26',\n\t\t\t\t\tfontFamily: 'Arial',\n\t\t\t\t\tcompletedValue: 100,\n\t\t\t\t\ttitleVaue: '',\n\t\t\t\t\tdoughnutTargetValue: 0\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tplugins: [emptyDoughnut_plugins, stackedText_plugines],\n\t};\n\n\tconst qua_data = {\n\t\tlabels: ['Red', 'Orange'],\n\t\tdatasets: [{\n\t\t\tlabel: 'Dataset 1',\n\t\t\tdata: [0, 0],\n\t\t\tbackgroundColor: [\n\t\t\t\t'red', 'transparent',\n\t\t\t],\n\t\t\tborderColor: [\n\t\t\t\t'red', 'transparent',\n\t\t\t],\n\t\t\tborderWidth: 6,\n\t\t\tcutout: '95%',\n\t\t\tborderRadius: 50,\n\t\t\thoverOffset: 2\n\t\t}]\n\t};\n\n\tconst qua_chart_config = {\n\t\ttype: 'doughnut',\n\t\tdata: qua_data,\n\t\toptions: {\n\t\t\tresponsive: true,\n\t\t\tplugins: {\n\t\t\t\tlegend: {\n\t\t\t\t\tdisplay: false\n\t\t\t\t},\n\t\t\t\ttitle: {\n\t\t\t\t\tdisplay: false,\n\t\t\t\t},\n\t\t\t\temptyDoughnut_plugins: {\n\t\t\t\t\tcolor: 'rgb(245, 245, 245)',\n\t\t\t\t\twidth: 13.5,\n\t\t\t\t\tradiusDecrease: 6\n\t\t\t\t},\n\t\t\t\tstackedText_plugines: {\n\t\t\t\t\tfontColor: 'black',\n\t\t\t\t\tfontSize: '26',\n\t\t\t\t\tfontFamily: 'Arial',\n\t\t\t\t\tcompletedValue: 100,\n\t\t\t\t\ttitleVaue: '',\n\t\t\t\t\tdoughnutTargetValue: 0\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tplugins: [emptyDoughnut_plugins, stackedText_plugines],\n\t};\n\n\tconst oee_ctx = document.getElementById('oee_Chart');\n\t$scope.machineData['oee']['ctx'] = new Chart(oee_ctx, oee_chart_config);\n\tconst ava_ctx = document.getElementById('ava_Chart');\n\t$scope.machineData['availability']['ctx'] = new Chart(ava_ctx, ava_chart_config);\n\tconst per_ctx = document.getElementById('per_Chart');\n\t$scope.machineData['performance']['ctx'] = new Chart(per_ctx, per_chart_config);\n\tconst qua_ctx = document.getElementById('qua_Chart');\n\t$scope.machineData['quality']['ctx'] = new Chart(qua_ctx, qua_chart_config);\n\n\n\tconst gaugeNeddle = {\n\t\tid: 'gaugeNeddle',\n\t\tafterDatasetsDraw(chart, agrs, plugins) {\n\t\t\tconst {\n\t\t\t\tctx,\n\t\t\t\tdata\n\t\t\t} = chart;\n\t\t\tctx.save();\n\t\t\tconst needleValue = data.datasets[0].needleValue;\n\t\t\tconst xCenter = chart.getDatasetMeta(0).data[0].x;\n\t\t\tconst yCenter = chart.getDatasetMeta(0).data[0].y;\n\t\t\tconst outerRadiious = chart.getDatasetMeta(0).data[0].outerRadius - 6;\n\t\t\tlet angle = Math.PI;\n\n\t\t\tconst dataTotal = data.datasets[0].data.reduce((a, b) => a + b, 0);\n\t\t\tlet circumference = ((chart.getDatasetMeta(0).data[0].circumference / Math.PI) / data.datasets[0].data[0]) * needleValue;\n\t\t\tconst needleAngleValue = circumference + 1.5;\n\n\t\t\tctx.translate(xCenter, yCenter)\n\t\t\tctx.rotate(angle * needleAngleValue)\n\n\t\t\t// Needle\n\t\t\tctx.beginPath();\n\t\t\tctx.strokeStyle = 'darkgray';\n\t\t\tctx.fillStyle = 'darkgray';\n\t\t\tctx.moveTo(0 - 5, 0);\n\t\t\tctx.lineTo(0, -outerRadiious);\n\t\t\tctx.lineTo(0 + 5, 0);\n\t\t\tctx.stroke();\n\t\t\tctx.fill();\n\n\n\n\t\t\t// dot\n\t\t\tctx.beginPath();\n\t\t\tctx.arc(0, 0, 10, Math.PI * 0, Math.PI * 2, false);\n\t\t\tctx.fill();\n\t\t\tctx.restore();\n\n\n\t\t}\n\t};\n\n\tconst gaugeText = {\n\t\tid: 'gaugeText',\n\t\tafterDatasetsDraw(chart, args, pluginOptions) {\n\t\t\tconst {\n\t\t\t\tctx,\n\t\t\t\tdata,\n\t\t\t\tchartArea: {\n\t\t\t\t\ttop,\n\t\t\t\t\tbottom,\n\t\t\t\t\tleft,\n\t\t\t\t\tright,\n\t\t\t\t\twidth,\n\t\t\t\t\theight\n\t\t\t\t},\n\t\t\t\tscales: {\n\t\t\t\t\tr\n\t\t\t\t}\n\t\t\t} = chart;\n\n\t\t\tctx.save();\n\t\t\tconst xCoor = chart.getDatasetMeta(0).data[0].x;\n\t\t\tconst yCoor = chart.getDatasetMeta(0).data[0].y;\n\t\t\tconsole.log()\n\t\t\t// ctx.fillRect(xCoor, yCoor, 400, 1);\n\n\t\t\tctx.font = '15px sans-serfi';\n\t\t\tctx.fillStyle = '#666';\n\t\t\tctx.textBaseLine = 'top';\n\t\t\tctx.textAlign = 'left';\n\t\t\tctx.fillText('Current Rate', left, yCoor + 20);\n\t\t\tctx.textAlign = 'right';\n\t\t\tctx.fillText('Target: ' + pluginOptions.prod_terph, right, yCoor + 20);\n\n\t\t\tctx.font = '30px sans-serfi';\n\t\t\tctx.textAlign = 'center';\n\t\t\tctx.fillText(pluginOptions.prod_perh + \"/h\", xCoor, yCoor - 30);\n\t\t}\n\t};\n\n\tconst meter_chart_conf = {\n\t\ttype: 'doughnut',\n\t\tdata: {\n\t\t\tlabels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n\t\t\tdatasets: [{\n\t\t\t\tlabel: '# of Votes',\n\t\t\t\tdata: [33, 33, 33],\n\t\t\t\tbackgroundColor: ['red', 'orange', 'green'],\n\t\t\t\tborderWidth: 1,\n\t\t\t\tcircumference: 180,\n\t\t\t\trotation: 270,\n\t\t\t\tcutout: '86%',\n\t\t\t\tborderRadius: 10,\n\t\t\t\tneedleValue: 55,\n\t\t\t}]\n\t\t},\n\t\toptions: {\n\t\t\taspectRatio: 1.2,\n\t\t\tplugins: {\n\t\t\t\tlegend: {\n\t\t\t\t\tdisplay: false\n\t\t\t\t},\n\t\t\t\tgaugeText: {\n\t\t\t\t\tprod_perh: 50,\n\t\t\t\t\tprod_terph: 10,\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t},\n\t\tplugins: [gaugeText, gaugeNeddle]\n\t};\n\tconst meter_ctx = document.getElementById('meterChart');\n\t$scope.machineData['meter']['ctx'] = new Chart(meter_ctx, meter_chart_conf);\n\n\tconst getOrCreateTooltip = (chart) => {\n\t\tlet tooltipEl = chart.canvas.parentNode.querySelector('div');\n\n\t\tif (!tooltipEl) {\n\t\t\ttooltipEl = document.createElement('div');\n\t\t\ttooltipEl.style.background = 'rgba(0, 0, 0, 0.7)';\n\t\t\ttooltipEl.style.borderRadius = '3px';\n\t\t\ttooltipEl.style.color = 'white';\n\t\t\ttooltipEl.style.opacity = 1;\n\t\t\ttooltipEl.style.pointerEvents = 'none';\n\t\t\ttooltipEl.style.position = 'absolute';\n\t\t\ttooltipEl.style.transform = 'translate(-50%, 0)';\n\t\t\ttooltipEl.style.transition = 'all .1s ease';\n\n\t\t\tconst table = document.createElement('table');\n\t\t\ttable.style.margin = '0px';\n\n\t\t\ttooltipEl.appendChild(table);\n\t\t\tchart.canvas.parentNode.appendChild(tooltipEl);\n\t\t}\n\n\t\treturn tooltipEl;\n\t};\n\n\tconst externalTooltipHandler = (context) => {\n\t\t// Tooltip Element\n\t\tconst {\n\t\t\tchart,\n\t\t\ttooltip\n\t\t} = context;\n\t\tconst tooltipEl = getOrCreateTooltip(chart);\n\t\tlet labelString = context.tooltip.$context.tooltip.$context\n\t\t\t.tooltip.body[0].lines[0].split(\":\")[0];\n\t\tlet stat = labelString.split(\",\")[0];\n\t\tlet msg = labelString.split(',')[1];\n\t\tlet time = labelString.split(',')[2];\n\t\ttime = moment(parseInt(time)).format('h:mma')\n\n\t\t// Hide if no tooltip\n\t\tif (tooltip.opacity === 0) {\n\t\t\ttooltipEl.style.opacity = 0;\n\t\t\treturn;\n\t\t}\n\n\t\t// Set Text\n\t\tif (tooltip.body) {\n\t\t\tconst titleLines = tooltip.title || [];\n\t\t\tconst bodyLines = tooltip.body.map(b => b.lines);\n\n\t\t\tconst tableHead = document.createElement('thead');\n\n\t\t\ttitleLines.forEach(title => {\n\t\t\t\tconst tr = document.createElement('tr');\n\t\t\t\ttr.style.borderWidth = 0;\n\n\t\t\t\tconst th = document.createElement('th');\n\t\t\t\tth.style.borderWidth = 0;\n\t\t\t\tconst text = document.createTextNode(title);\n\t\t\t\tth.innerHTML = stat;\n\t\t\t\tth.appendChild(text);\n\t\t\t\ttr.appendChild(th);\n\t\t\t\ttableHead.appendChild(tr);\n\t\t\t});\n\n\t\t\tconst tableBody = document.createElement('tbody');\n\t\t\tbodyLines.forEach((body, i) => {\n\t\t\t\tconst colors = tooltip.labelColors[i];\n\n\t\t\t\tconst span = document.createElement('span');\n\t\t\t\tspan.style.background = colors.backgroundColor;\n\t\t\t\tspan.style.borderColor = colors.borderColor;\n\t\t\t\tspan.style.borderWidth = '2px';\n\t\t\t\tspan.style.marginRight = '10px';\n\t\t\t\tspan.style.height = '10px';\n\t\t\t\tspan.style.width = '10px';\n\t\t\t\tspan.style.display = 'inline-block';\n\n\t\t\t\tconst tr = document.createElement('tr');\n\t\t\t\ttr.style.backgroundColor = 'inherit';\n\t\t\t\ttr.style.borderWidth = 0;\n\n\t\t\t\tconst td = document.createElement('td');\n\t\t\t\ttd.style.borderWidth = 0;\n\n\t\t\t\tlet av = Number(body[0].split(':')[1].replaceAll(',', ''))\n\n\t\t\t\tav = moment(av).format('h:mm')\n\n\t\t\t\tlet arr = av.split(\":\")\n\n\n\t\t\t\tlet x = av.split(\":\")[0];\n\t\t\t\tif (x => 6) {\n\t\t\t\t\tx = x - 6;\n\t\t\t\t}\n\t\t\t\tarr[0] = x;\n\t\t\t\tarr = arr.toString()\n\t\t\t\tarr = arr.replaceAll(',', ':')\n\t\t\t\tconst text = document.createTextNode(time + \" \" + msg + \" \" + arr + 'm');\n\t\t\t\ttd.appendChild(span);\n\t\t\t\ttd.appendChild(text);\n\t\t\t\ttr.appendChild(td);\n\t\t\t\ttableBody.appendChild(tr);\n\t\t\t});\n\n\t\t\tconst tableRoot = tooltipEl.querySelector('table');\n\n\t\t\t// Remove old children\n\t\t\twhile (tableRoot.firstChild) {\n\t\t\t\ttableRoot.firstChild.remove();\n\t\t\t}\n\n\t\t\t// Add new children\n\t\t\ttableRoot.appendChild(tableHead);\n\t\t\ttableRoot.appendChild(tableBody);\n\t\t}\n\n\t\tconst {\n\t\t\toffsetLeft: positionX,\n\t\t\toffsetTop: positionY\n\t\t} = chart.canvas;\n\n\t\t// Display, position, and set styles for font\n\t\ttooltipEl.style.opacity = 1;\n\t\ttooltipEl.style.left = positionX + tooltip.caretX + 'px';\n\t\ttooltipEl.style.top = positionY + 20 + tooltip.caretY + 'px';\n\t\ttooltipEl.style.font = tooltip.options.bodyFont.string;\n\t\ttooltipEl.style.padding = tooltip.options.padding + 'px ' + tooltip.options.padding + 'px';\n\t};\n\n\tconst chartAreaBorder = {\n\t\tid: 'chartAreaBorder',\n\t\tbeforeDraw(chart, args, options) {\n\t\t\tconst {\n\t\t\t\tctx,\n\t\t\t\tchartArea: {\n\t\t\t\t\tleft,\n\t\t\t\t\ttop,\n\t\t\t\t\twidth,\n\t\t\t\t\theight\n\t\t\t\t}\n\t\t\t} = chart;\n\t\t\tctx.save();\n\t\t\tctx.strokeStyle = options.borderColor;\n\t\t\tctx.lineWidth = options.borderWidth;\n\t\t\tctx.setLineDash(options.borderDash || []);\n\t\t\tctx.lineDashOffset = options.borderDashOffset;\n\t\t\tctx.strokeRect(left, top, width, height);\n\t\t\tctx.restore();\n\t\t}\n\t};\n\n\tconst shift_data = [{\n\t\t\t\"ts\": 1691627400000,\n\t\t\t\"isRunning\": false,\n\t\t\t\"isPlanned\": false,\n\t\t\t\"msg\": {\n\t\t\t\t\"category\": \"\",\n\t\t\t\t\"location\": \"\",\n\t\t\t\t\"message\": \"\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"ts\": 1691627791324,\n\t\t\t\"isRunning\": true,\n\t\t\t\"isPlanned\": false,\n\t\t\t\"msg\": {\n\t\t\t\t\"category\": \"\",\n\t\t\t\t\"location\": \"\",\n\t\t\t\t\"message\": \"\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"ts\": 1691627854368,\n\t\t\t\"isRunning\": false,\n\t\t\t\"isPlanned\": false,\n\t\t\t\"msg\": {\n\t\t\t\t\"category\": \"\",\n\t\t\t\t\"location\": \"\",\n\t\t\t\t\"message\": \"\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"ts\": 1691627947404,\n\t\t\t\"isRunning\": true,\n\t\t\t\"isPlanned\": false,\n\t\t\t\"msg\": {\n\t\t\t\t\"category\": \"\",\n\t\t\t\t\"location\": \"\",\n\t\t\t\t\"message\": \"\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"ts\": 1691628148519,\n\t\t\t\"isRunning\": false,\n\t\t\t\"isPlanned\": false,\n\t\t\t\"msg\": {\n\t\t\t\t\"category\": \"\",\n\t\t\t\t\"location\": \"\",\n\t\t\t\t\"message\": \"\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"ts\": 1691628199542,\n\t\t\t\"isRunning\": true,\n\t\t\t\"isPlanned\": false,\n\t\t\t\"msg\": {\n\t\t\t\t\"category\": \"\",\n\t\t\t\t\"location\": \"\",\n\t\t\t\t\"message\": \"\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"ts\": 1691633221422,\n\t\t\t\"isRunning\": false,\n\t\t\t\"isPlanned\": false,\n\t\t\t\"msg\": {\n\t\t\t\t\"category\": \"\",\n\t\t\t\t\"location\": \"\",\n\t\t\t\t\"message\": \"\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"ts\": 1691633275441,\n\t\t\t\"isRunning\": true,\n\t\t\t\"isPlanned\": false,\n\t\t\t\"msg\": {\n\t\t\t\t\"category\": \"\",\n\t\t\t\t\"location\": \"\",\n\t\t\t\t\"message\": \"\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"ts\": 1691636397032,\n\t\t\t\"isRunning\": false,\n\t\t\t\"isPlanned\": false,\n\t\t\t\"msg\": {\n\t\t\t\t\"category\": \"\",\n\t\t\t\t\"location\": \"\",\n\t\t\t\t\"message\": \"\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"ts\": 1691636400000,\n\t\t\t\"isRunning\": false,\n\t\t\t\"isPlanned\": true,\n\t\t\t\"msg\": {\n\t\t\t\t\"category\": \"Fixed Break\",\n\t\t\t\t\"location\": \"Shift Rules\",\n\t\t\t\t\"message\": \"Breakfast\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"ts\": 1691637600000,\n\t\t\t\"isRunning\": false,\n\t\t\t\"isPlanned\": false,\n\t\t\t\"msg\": {\n\t\t\t\t\"category\": \"\",\n\t\t\t\t\"location\": \"\",\n\t\t\t\t\"message\": \"\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"ts\": 1691638222094,\n\t\t\t\"isRunning\": true,\n\t\t\t\"isPlanned\": false,\n\t\t\t\"msg\": {\n\t\t\t\t\"category\": \"\",\n\t\t\t\t\"location\": \"\",\n\t\t\t\t\"message\": \"\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"ts\": 1691638282151,\n\t\t\t\"isRunning\": false,\n\t\t\t\"isPlanned\": false,\n\t\t\t\"msg\": {\n\t\t\t\t\"category\": \"\",\n\t\t\t\t\"location\": \"\",\n\t\t\t\t\"message\": \"\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"ts\": 1691638363179,\n\t\t\t\"isRunning\": true,\n\t\t\t\"isPlanned\": false,\n\t\t\t\"msg\": {\n\t\t\t\t\"category\": \"\",\n\t\t\t\t\"location\": \"\",\n\t\t\t\t\"message\": \"\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"ts\": 1691639551840,\n\t\t\t\"isRunning\": false,\n\t\t\t\"isPlanned\": false,\n\t\t\t\"msg\": {\n\t\t\t\t\"category\": \"\",\n\t\t\t\t\"location\": \"\",\n\t\t\t\t\"message\": \"\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"ts\": 1691639572763,\n\t\t\t\"isRunning\": true,\n\t\t\t\"isPlanned\": false,\n\t\t\t\"msg\": {\n\t\t\t\t\"category\": \"\",\n\t\t\t\t\"location\": \"\",\n\t\t\t\t\"message\": \"\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"ts\": 1691640000000,\n\t\t\t\"isRunning\": false,\n\t\t\t\"isPlanned\": true,\n\t\t\t\"msg\": {\n\t\t\t\t\"category\": \"Fixed Break\",\n\t\t\t\t\"location\": \"Shift Rules\",\n\t\t\t\t\"message\": \"Maintenance\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"ts\": 1691640600000,\n\t\t\t\"isRunning\": false,\n\t\t\t\"isPlanned\": false,\n\t\t\t\"msg\": {\n\t\t\t\t\"category\": \"\",\n\t\t\t\t\"location\": \"\",\n\t\t\t\t\"message\": \"\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"ts\": 1691642886442,\n\t\t\t\"isRunning\": false,\n\t\t\t\"isPlanned\": false,\n\t\t\t\"msg\": {\n\t\t\t\t\"category\": \"\",\n\t\t\t\t\"location\": \"\",\n\t\t\t\t\"message\": \"\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"ts\": 1691642934441,\n\t\t\t\"isRunning\": true,\n\t\t\t\"isPlanned\": false,\n\t\t\t\"msg\": {\n\t\t\t\t\"category\": \"\",\n\t\t\t\t\"location\": \"\",\n\t\t\t\t\"message\": \"\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"ts\": 1691643465716,\n\t\t\t\"isRunning\": false,\n\t\t\t\"isPlanned\": false,\n\t\t\t\"msg\": {\n\t\t\t\t\"category\": \"\",\n\t\t\t\t\"location\": \"\",\n\t\t\t\t\"message\": \"\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"ts\": 1691643492745,\n\t\t\t\"isRunning\": true,\n\t\t\t\"isPlanned\": false,\n\t\t\t\"msg\": {\n\t\t\t\t\"category\": \"\",\n\t\t\t\t\"location\": \"\",\n\t\t\t\t\"message\": \"\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"ts\": 1691643973015,\n\t\t\t\"isRunning\": false,\n\t\t\t\"isPlanned\": false,\n\t\t\t\"msg\": {\n\t\t\t\t\"category\": \"\",\n\t\t\t\t\"location\": \"\",\n\t\t\t\t\"message\": \"\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"ts\": 1691643982018,\n\t\t\t\"isRunning\": true,\n\t\t\t\"isPlanned\": false,\n\t\t\t\"msg\": {\n\t\t\t\t\"category\": \"\",\n\t\t\t\t\"location\": \"\",\n\t\t\t\t\"message\": \"\"\n\t\t\t}\n\t\t}\n\t];\n\tlet data_array = [];\n\n\tfunction progress_data_handel(shift_data, shift_start, shift_end) {\n\t\tlet pgrgress_context = $scope.machineData['progress']['ctx'];\n\t\tconsole.log('max', pgrgress_context.options.scales.x.max);\n\t\tconsole.log(\"----\", shift_data, shift_start, shift_end);\n\t\t// pgrgress_context.options.scales.x.min = parseInt(shift_start); \n\t\t// pgrgress_context.options.scales.x.max = parseInt(shift_end); \n\t\t// pgrgress_context.update();\n\t\tlet status = ' '\n\n\t\tfunction calculate(isRunning, isPlanned) {\n\t\t\tif (isRunning == false && isPlanned == false) {\n\t\t\t\t// unplanned break\n\t\t\t\tstatus = \"Unplanned Break\";\n\t\t\t\treturn 'red';\n\t\t\t} else if (isRunning == true && isPlanned == false || isRunning == true && isPlanned == true) {\n\t\t\t\t// running      \n\t\t\t\tstatus = \"Running\"\n\t\t\t\treturn 'green';\n\n\t\t\t} else if (isRunning == false && isPlanned == true) {\n\t\t\t\tstatus = \"Planned Break\"\n\t\t\t\treturn 'orange';\n\t\t\t}\n\t\t}\n\n\t\tshift_data.forEach((data, index) => {\n\n\t\t\tstatus = calculate(data.isRunning, data.isPlanned) == 'green' ? 'Running' : calculate(data.isRunning, data.isPlanned) == 'red' ? 'Unplanned Break' : 'Planned Break';\n\t\t\tlet msg = data.msg.message == \"\" ? ' ' : data.msg.message;\n\t\t\tlet x_obj = {\n\t\t\t\tlabel: [status, msg, data.ts],\n\t\t\t\tdata: [shift_data[index + 1]?.ts - data.ts],\n\t\t\t\tborderWidth: 1,\n\t\t\t\t// borderColor: data.isRunning == true && data.isPlanned == false || data.isRunning == true && data.isPlanned == true ? 'green' : data.isRunning == false && data.isPlanned == true ? 'blue' : 'red',\n\t\t\t\tborderColor: calculate(data.isRunning, data.isPlanned),\n\t\t\t\t// backgroundColor: data.isPlanned == false && data.isRunning == true ? 'red' : 'green',\n\t\t\t\tbackgroundColor: calculate(data.isRunning, data.isPlanned),\n\t\t\t}\n\t\t\tdata_array.push(x_obj)\n\t\t});\n\t\tconsole.log(\"data_array\", data_array);\n\n\t\tpgrgress_context.update();\n\t}\n\n\tconst chart_data = {\n\t\tlabels: ' ',\n\t\tdatasets: data_array\n\t};\n\n\tconst progress_chart_config = {\n\t\ttype: 'bar',\n\t\tdata: chart_data,\n\t\toptions: {\n\t\t\tindexAxis: 'y',\n\n\t\t\tscales: {\n\t\t\t\ty: {\n\n\t\t\t\t\tbeginAtZero: false,\n\t\t\t\t\tticks: {\n\t\t\t\t\t\tdisplay: true\n\t\t\t\t\t},\n\t\t\t\t\tgrid: {\n\t\t\t\t\t\tdisplay: false,\n\t\t\t\t\t},\n\t\t\t\t\tstacked: true,\n\t\t\t\t},\n\t\t\t\tx: {\n\t\t\t\t\tbeginAtZero: false,\n\t\t\t\t\tticks: {\n\t\t\t\t\t\tdisplay: false\n\t\t\t\t\t},\n\t\t\t\t\t// ticks: {\n\t\t\t\t\t//     callback: function (value, index, values) {\n\t\t\t\t\t//         return moment(value).format('h:mm a');\n\t\t\t\t\t//     }\n\t\t\t\t\t// },\n\t\t\t\t\tgrid: {\n\t\t\t\t\t\tdisplay: false,\n\t\t\t\t\t},\n\t\t\t\t\t// min:1691627400000,\n\t\t\t\t\t// max: 1691654400000, \n\t\t\t\t\tstacked: true,\n\t\t\t\t\t// type: 'time',\n\t\t\t\t\t// time: {\n\t\t\t\t\t//     displayFormats: {\n\t\t\t\t\t//         quarter: 'MMM YYYY'\n\t\t\t\t\t//     }\n\t\t\t\t\t// }\n\n\t\t\t\t\t// type: 'time',\n\t\t\t\t\t// time: {\n\t\t\t\t\t//   // Luxon format string\n\t\t\t\t\t//   tooltipFormat: 'DD T'\n\t\t\t\t\t// },\n\t\t\t\t\t// title: { \n\t\t\t\t\t//   display: true,\n\t\t\t\t\t//   text: 'Date'\n\t\t\t\t\t// }\n\t\t\t\t}\n\t\t\t},\n\t\t\tresponsive: true,\n\t\t\tmaintainAspectRatio: false,\n\t\t\tplugins: {\n\t\t\t\tlegend: {\n\t\t\t\t\tdisplay: false\n\t\t\t\t},\n\t\t\t\ttitle: {\n\t\t\t\t\tdisplay: true,\n\t\t\t\t\ttext: 'Shift Progress',\n\t\t\t\t\talign: 'start'\n\t\t\t\t},\n\t\t\t\ttooltip: {\n\t\t\t\t\tenabled: false,\n\t\t\t\t\tposition: 'nearest',\n\t\t\t\t\texternal: externalTooltipHandler,\n\n\t\t\t\t},\n\t\t\t\tzoom: {\n\t\t\t\t\tpan: {\n\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\tmode: \"x\",\n\t\t\t\t\t\tthreshold: 100,\n\t\t\t\t\t},\n\t\t\t\t\tzoom: {\n\t\t\t\t\t\twheel: {\n\t\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\t\t// speed: 0.1,\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tchartAreaBorder: {\n\t\t\t\t\tborderColor: 'darkgray',\n\t\t\t\t\tborderWidth: 2,\n\t\t\t\t\tborderDash: [5, 0],\n\t\t\t\t\tborderDashOffset: 2,\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t// plugins: [chartAreaBorder]\n\t};\n\n\tconst progress_ctx = document.getElementById('progressChart');\n\t$scope.machineData['progress']['ctx'] = new Chart(progress_ctx, progress_chart_config);\n\n\tfunction doubleClick() {\n\t\tconsole.log(\"click\");\n\t\t$scope.machineData['progress']['ctx'].resetZoom();\n\t}\n\n\tprogress_ctx.ondblclick = doubleClick;\n\n\tlet link = 'https://syngenta-ctg.syncross.ai/nrdapi/shiftoeeinfo?start_ts=1691604000000&end_ts=1691690400000&entity_id=d40240f0-fa18-11ed-875f-535e61749edf&shift_start=1691627400000';\n\n\t$scope.http = {\n\t\tmethod: self.ctx.http,\n\t\tbaseUrl: link,\n\t\tconfig: {\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\"X-Authorization\": \"Bearer \" + localStorage.getItem('jwt_token')\n\t\t\t}\n\t\t}\n\t};\n\n\tfunction chartValueUpdate(name, context, r) {\n\t\tcontext.options.plugins.stackedText_plugines.titleVaue = capitalizeFirstLetter(name);\n\t\tlet percantageValue = Math.trunc(Number(r[name]) * 100);\n\t\tlet doughnutValue = percantageValue;\n\t\tif (percantageValue > 100) {\n\t\t\tdoughnutValue = 100;\n\t\t}\n\t\tlet doughnutColor = ''\n\t\tif (percantageValue >= 75) {\n\t\t\tdoughnutColor = \"green\";\n\t\t} else if (percantageValue < 75 && percantageValue >= 50) {\n\t\t\tdoughnutColor = \"orange\";\n\t\t} else {\n\t\t\tdoughnutColor = \"red\";\n\t\t}\n\n\t\tcontext.options.plugins.stackedText_plugines.doughnutTargetValue = percantageValue;\n\t\tcontext.data.datasets[0].data[0] = doughnutValue;\n\t\tcontext.data.datasets[0].data[1] = 100 - doughnutValue;\n\t\tcontext.data.datasets[0].backgroundColor[0] = doughnutColor;\n\t\tcontext.data.datasets[0].borderColor[0] = doughnutColor\n\n\t\tfunction capitalizeFirstLetter(string) {\n\t\t\treturn string.charAt(0).toUpperCase() + string.slice(1);\n\t\t}\n\t\tcontext.update();\n\t}\n\n\t$scope.http.method.get($scope.http.baseUrl, $scope.http.config).subscribe(function(r) {\n\t\tconsole.log(\"r\", r)\n\n\n\t\tlet oee_context = $scope.machineData['oee']['ctx'];\n\n\n\t\tchartValueUpdate('oee', oee_context, r)\n\t\t//  oee_context.options.plugins.stackedText_plugines.titleVaue= 'OEE';\n\t\t//  oee_context.options.plugins.stackedText_plugines.doughnutTargetValue= r.oee;\n\t\t//  oee_context.data.datasets[0].data[0]=r.oee;\n\t\t//  oee_context.data.datasets[0].data[1]=1-r.oee;\n\t\t//  oee_context.update();\n\n\t\tlet availability_context = $scope.machineData['availability']['ctx'];\n\t\tchartValueUpdate('availability', availability_context, r)\n\n\n\t\tlet performance_context = $scope.machineData['performance']['ctx'];\n\t\tchartValueUpdate('performance', performance_context, r)\n\n\t\tlet quality_context = $scope.machineData['quality']['ctx'];\n\t\tchartValueUpdate('quality', quality_context, r)\n\n\t\tlet meter_context = $scope.machineData['meter']['ctx'];\n\t\tmeter_context.options.plugins.gaugeText.prod_perh = Number(r.prodn_rateph);\n\t\tmeter_context.options.plugins.gaugeText.prod_terph = Number(r.prodn_targetph);\n\t\tlet niddle_target = Number(r.prodn_rateph) / Number(r.prodn_targetph);\n\t\tmeter_context.data.datasets[0].needleValue = niddle_target * 100;\n\t\tmeter_context.update();\n\n\t\tdocument.getElementById('production').innerHTML = r.good_count;\n\t\tdocument.getElementById('reject').innerHTML = r.reject_count;\n\t\tdocument.getElementById('plannedShutdown').innerHTML = moment(parseInt(r.break_time)).format(' h:mm:ss');\n\t\tdocument.getElementById('downtime').innerHTML = moment(parseInt(r.down_time)).format(' h:mm:ss');\n\t\tprogress_data_handel(r.breakdown, r.shift_start, r.shift_end);\n\n\t\tself.ctx.detectChanges();\n\t}, function(e) {\n\t\tconsole.log('Fail')\n\t});\n\tconsole.log(\"Machine Data\", $scope.machineData)\n}\n\nself.onDataUpdated = function() {\n\n}\n\nself.onResize = function() {\n\n}\n\nself.onDestroy = function() {}",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Overview\"}"
    },
    "bundleAlias" : "syngenta_widger",
    "createdTime" : 1691385869451,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "aec5b5b0-34e2-11ee-b8ae-9d6138fe9e87"
    },
    "tenantId" : {
      "entityType" : "TENANT",
      "id" : "6a594940-e4c5-11ed-8f65-1f1c5e01f03a"
    }
  }, {
    "alias" : "production",
    "name" : "Production",
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"
      } ],
      "templateHtml" : "<div style=\"width: 100%; height:100%;\">\r\n    <canvas id=\"productionChart\"></canvas>\r\n</div>",
      "templateCss" : "#container {\n    overflow: auto;\n}\n\n.tbDatasource-container {\n    margin: 5px;\n    padding: 8px;\n}\n\n.tbDatasource-title {\n    font-size: 1.200rem;\n    font-weight: 500;\n    padding-bottom: 10px;\n}\n\n.tbDatasource-table {\n    width: 100%;\n    box-shadow: 0 0 10px #ccc;\n    border-collapse: collapse;\n    white-space: nowrap;\n    font-size: 1.000rem;\n    color: #757575;\n}\n\n.tbDatasource-table td {\n    position: relative;\n    border-top: 1px solid rgba(0, 0, 0, 0.12);\n    border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n    padding: 0px 18px;\n    box-sizing: border-box;\n}",
      "controllerScript" : "self.onInit = function() {\n    let $scope =self.ctx.$scope;\n    \n    const shift_data = [{ \"ts\": 1691022600000, \"isRunning\": false, \"isPlanned\": false, \"msg\": { \"category\": \"Operational\", \"location\": \"Filling Machine Problem\", \"message\": \"CW Late Entry\" } }, { \"ts\": 1691023601247, \"isRunning\": true, \"isPlanned\": false, \"msg\": { \"category\": \"\", \"location\": \"\", \"message\": \"\" } }, { \"ts\": 1691031504523, \"isRunning\": false, \"isPlanned\": false, \"msg\": { \"category\": \"\", \"location\": \"\", \"message\": \"Minor delay\" } }, { \"ts\": 1691031507522, \"isRunning\": true, \"isPlanned\": false, \"msg\": { \"category\": \"\", \"location\": \"\", \"message\": \"\" } }, { \"ts\": 1691031510516, \"isRunning\": false, \"isPlanned\": false, \"msg\": { \"category\": \"\", \"location\": \"\", \"message\": \"Minor delay\" } }, { \"ts\": 1691031600000, \"isRunning\": false, \"isPlanned\": true, \"msg\": { \"category\": \"Fixed Break\", \"location\": \"Shift Rules\", \"message\": \"Breakfast\" } }, { \"ts\": 1691032800000, \"isRunning\": false, \"isPlanned\": false, \"msg\": { \"category\": \"\", \"location\": \"\", \"message\": \"\" } }, { \"ts\": 1691033593655, \"isRunning\": true, \"isPlanned\": false, \"msg\": { \"category\": \"\", \"location\": \"\", \"message\": \"\" } }, { \"ts\": 1691035200000, \"isRunning\": false, \"isPlanned\": true, \"msg\": { \"category\": \"Fixed Break\", \"location\": \"Shift Rules\", \"message\": \"Maintenance\" } }, { \"ts\": 1691035800000, \"isRunning\": true, \"isPlanned\": true, \"msg\": { \"category\": \"\", \"location\": \"\", \"message\": \"\" } }, { \"ts\": 1691036136033, \"isRunning\": false, \"isPlanned\": false, \"msg\": { \"category\": \"\", \"location\": \"\", \"message\": \"Minor delay\" } }, { \"ts\": 1691036184070, \"isRunning\": true, \"isPlanned\": false, \"msg\": { \"category\": \"\", \"location\": \"\", \"message\": \"\" } }, { \"ts\": 1691036574352, \"isRunning\": false, \"isPlanned\": false, \"msg\": { \"category\": \"\", \"location\": \"\", \"message\": \"Minor delay\" } }, { \"ts\": 1691036598286, \"isRunning\": true, \"isPlanned\": false, \"msg\": { \"category\": \"\", \"location\": \"\", \"message\": \"\" } }, { \"ts\": 1691036685342, \"isRunning\": false, \"isPlanned\": false, \"msg\": { \"category\": \"\", \"location\": \"\", \"message\": \"Minor delay\" } }, { \"ts\": 1691036706343, \"isRunning\": true, \"isPlanned\": false, \"msg\": { \"category\": \"\", \"location\": \"\", \"message\": \"\" } }, { \"ts\": 1691038687473, \"isRunning\": false, \"isPlanned\": false, \"msg\": { \"category\": \"\", \"location\": \"\", \"message\": \"Minor delay\" } }, { \"ts\": 1691038852558, \"isRunning\": true, \"isPlanned\": false, \"msg\": { \"category\": \"\", \"location\": \"\", \"message\": \"\" } }, { \"ts\": 1691039960161, \"isRunning\": false, \"isPlanned\": false, \"msg\": { \"category\": \"\", \"location\": \"\", \"message\": \"\" } }, { \"ts\": 1691039978227, \"isRunning\": true, \"isPlanned\": false, \"msg\": { \"category\": \"\", \"location\": \"\", \"message\": \"\" } }];\n    let data_array = [];\n    let status = ' '\n    function calculate(isRunning, isPlanned) {\n        if (isRunning == false && isPlanned == false) {\n            // unplanned break\n            status = \"Unplanned Break\";\n            return 'red';\n        } else if (isRunning == true && isPlanned == false || isRunning == true && isPlanned == true) {\n            // running      \n            status = \"Running\"\n            return 'green';\n\n        } else if (isRunning == false && isPlanned == true) {\n            status = \"Planned Break\"\n            return 'yellow';\n        }\n    }\n    shift_data.forEach((data, index) => {\n        // console.log('time', shift_data[index + 1]?.ts - data.ts);\n        status = calculate(data.isRunning, data.isPlanned) == 'green' ? 'Running' : calculate(data.isRunning, data.isPlanned) == 'red' ? 'Unplanned Break' : 'Planned Break';\n        let msg = data.msg.message == \"\" ? ' ' : data.msg.message;\n        let x_obj = {\n            label: [status, msg, data.ts],\n            data: [10],\n            borderWidth: 1,\n            // borderColor: data.isRunning == true && data.isPlanned == false || data.isRunning == true && data.isPlanned == true ? 'green' : data.isRunning == false && data.isPlanned == true ? 'blue' : 'red',\n            borderColor: calculate(data.isRunning, data.isPlanned),\n            // backgroundColor: data.isPlanned == false && data.isRunning == true ? 'red' : 'green',\n            backgroundColor: calculate(data.isRunning, data.isPlanned),\n        }\n        data_array.push(x_obj)\n    });\n    \n    const chart_data = {\n        labels: ['x','y'],\n        datasets: data_array\n    };\n    const production_chart_config = {\n        type: 'bar',\n        data: {\n          labels: [\"sat\",\"sun\",\"mon\",'Tue'],\n          datasets: [\n            {\n              label: 'Dataset 1',\n              data: [110,30,15,15,110],\n              backgroundColor:  ['green'],\n            },\n            {\n              label: 'Dataset 2',\n              data:[80,30,50,22],\n              backgroundColor:  ['blue'],\n            },\n            \n          ]\n        },\n        options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n                title: {\n                    display: false,\n                },\n            },\n            responsive: true,\n            scales: {\n                x: {\n                    stacked: true,\n                },\n                y: {\n                    stacked: true,\n                    min: 0,\n                }\n            }\n        }\n    };\n    const production_ctx = document.getElementById('productionChart');\n    new Chart(production_ctx, production_chart_config);\n}\n\nself.onDataUpdated = function() {\n    \n}\n\nself.onResize = function() {\n    \n}\n\nself.onDestroy = function() {\n}\n",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Production\"}"
    },
    "bundleAlias" : "syngenta_widger",
    "createdTime" : 1691651283285,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "a5bec850-374c-11ee-a7ff-9d6138fe9e87"
    },
    "tenantId" : {
      "entityType" : "TENANT",
      "id" : "6a594940-e4c5-11ed-8f65-1f1c5e01f03a"
    }
  }, {
    "alias" : "report_table",
    "name" : "Report Table",
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ ],
      "templateHtml" : "<table>\n    <thead>\n        <tr>\n            <th *ngFor=\"let title of tableHeader\">{{title}}</th>\n        </tr>\n    </thead>\n    <tbody *ngFor=\"let row of tableData | keyvalue; let i = index\">\n        <tr>\n            <td [attr.rowspan]=\"row.value.length+1\">{{row.key}}</td> \n            <td>{{row.value[0]?.line}}</td>\n            <td>{{row.value[0]?.sku}}</td>\n            <td>{{row.value[0]?.fg_q}}</td>\n            <td>{{row.value[0]?.fg_q_t}}</td>\n            <td>{{row.value[0]?.m_b}}</td>\n            <td>{{row.value[0]?.oee}}</td>\n            <td>{{row.value[0]?.remark}}</td>\n        </tr>\n        <tr *ngFor=\"let data of row.value; let i = index\">\n            <td *ngIf=\"i!=0\">{{data.line}}</td>\n            <td *ngIf=\"i!=0\">{{data.sku}}</td>\n            <td *ngIf=\"i!=0\">{{data.fg_q}}</td>\n            <td *ngIf=\"i!=0\">{{data.fg_q_t}}</td>\n            <td *ngIf=\"i!=0\">{{data.m_b}}</td>\n            <td *ngIf=\"i!=0\">{{data.oee}}</td>\n            <td *ngIf=\"i!=0\">{{data.remark}}</td>\n        </tr>\n        \n    </tbody>\n        <tr>\n            <th colspan=\"2\">Comments:</th>\n            <th colspan=\"6\"></th>\n        </tr>\n</table>",
      "templateCss" : "table {\r\n            font-family: arial, sans-serif;\r\n            border-collapse: collapse;\r\n            width: 100%;\r\n        }\r\n\r\n        td,\r\n        th {\r\n            border: 1px solid #dddddd;\r\n            text-align: left;\r\n            padding: 8px;\r\n        }\r\n\r\n        /*tr:nth-child(even) {*/\r\n        /*    background-color: #dddddd;*/\r\n        /*}*/\r\n        \r\n        tr {\r\n            background-color: white;\r\n        }\r\n\r\n\r\n        /* border */\r\n        table,\r\n        th,\r\n        td {\r\n            border: 1px solid black;\r\n            border-collapse: collapse;\r\n        }",
      "controllerScript" : "self.onInit = function() {\n    let $scope=self.ctx.$scope;\n    \n    $scope.tableHeader=['Section','Line Name','Product & SKU','FG Quantity','FG Quantity(Ton)','Major Breakdown(More then 10 minutes)','OEE','Remarks'];\n    \n    $scope.tableData={\n        \"Solid\":[\n            // {\"line\":\"Grozin\",\"sku\":\"Grozin 1 Kg:\",\"fg_q\":678,\"fg_q_t\":6.78,\"m_b\":\"\",\"oee\":0,\"remark\":\"\"},\n            // {\"line\":\"Mespack\",\"sku\":\"Virtako 30g:\",\"fg_q\":259,\"fg_q_t\":0.1548,\"m_b\":\"\",\"oee\":0,\"remark\":\"Target Completed\"},\n            // {\"line\":\"FFS-6\",\"sku\":\"Actara 5g:\",\"fg_q\":59,\"fg_q_t\":0.59,\"m_b\":\"\",\"oee\":0,\"remark\":\"\"},\n        ], \n        \"Liquid\":[\n            // {\"line\":\"Serac\",\"sku\":\"Karate 50 ml:\",\"fg_q\":590,\"fg_q_t\":1.475,\"m_b\":\"(Labelling machine adjustment:20min Labelling machine adjustment:20min Labelling machine adjustment:20min Labelling machine adjustment:20min Labelling machine adjustment:20min Labelling machine adjustment:20min)\",\"oee\":0,\"remark\":\"\"},\n            // {\"line\":\"SC-2\",\"sku\":\"Amistar Top 100 ml:\",\"fg_q\":630,\"fg_q_t\":1.26,\"m_b\":\"\",\"oee\":0,\"remark\":\"\"},\n            // {\"line\":\"SC-1\",\"sku\":\"Filia 500 ml:\",\"fg_q\":657,\"fg_q_t\":3.285,\"m_b\":\"(Drum stirring delay:40min)\",\"oee\":0,\"remark\":\"\"},\n            ] \n    }\n    \n    let link = 'https://syngenta-ctg.syncross.ai/nrdapi/shiftoeeinfo?shift_start=1691541000000';\n\n\t$scope.http = {\n\t\tmethod: self.ctx.http,\n\t\tbaseUrl: link,\n\t\tconfig: {\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\"X-Authorization\": \"Bearer \" + localStorage.getItem('jwt_token')\n\t\t\t}\n\t\t}\n\t};\n\t\n\t$scope.http.method.get($scope.http.baseUrl, $scope.http.config).subscribe(function(r) {\n\t    console.log(\"r\",r)\n\t    for(let data of r){\n\t        let solidObject={\n    \t        \"line\":data.entity_label, \n    \t        \"sku\":data.prodt_name,\n    \t        \"fg_q\":0,\n    \t        \"fg_q_t\":0,\n    \t        \"m_b\":\"\",\n    \t        \"oee\":data.oee,\n    \t        \"remark\":\"\"\n    \t    }\n\n    \t    if(data.entity_section === \"solid\"){  \n    \t        console.log(\"Solid\")\n    \t        $scope.tableData['Solid'].push(solidObject)\n    \t    }else{\n    \t        console.log(\"Liquid\");\n    \t        $scope.tableData['Liquid'].push(solidObject) \n    \t    }\n\t    }\n\t    \n\t    console.log(\"--\",$scope.tableData['Solid']); \n\t    self.ctx.detectChanges(); \n\t});\n}\n\nself.onDataUpdated = function() {\n    \n}\n\nself.onResize = function() {\n   \n}\n\nself.onDestroy = function() {\n}\n",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Report Table\"}"
    },
    "bundleAlias" : "syngenta_widger",
    "createdTime" : 1692538119957,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "7997e450-3f5d-11ee-8550-9dfc54296dc5"
    },
    "tenantId" : {
      "entityType" : "TENANT",
      "id" : "6a594940-e4c5-11ed-8f65-1f1c5e01f03a"
    }
  }, {
    "alias" : "shift_progress_stacked",
    "name" : "Shift Progress Stacked",
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-zoom/2.0.1/chartjs-plugin-zoom.min.js"
      } ],
      "templateHtml" : "<div style=\"width:100%; height:100%\" [style.background-color]=\"backgroundColor\" [style.color]=\"txtColor\">\n    <canvas id=\"progressBarChart\"></canvas>\n</div>",
      "templateCss" : "#container {\n    overflow: auto;\n}\n\n.tbDatasource-container {\n    margin: 5px;\n    padding: 8px;\n}\n\n.tbDatasource-title {\n    font-size: 1.200rem;\n    font-weight: 500;\n    padding-bottom: 10px;\n}\n\n.tbDatasource-table {\n    width: 100%;\n    box-shadow: 0 0 10px #ccc;\n    border-collapse: collapse;\n    white-space: nowrap;\n    font-size: 1.000rem;\n    color: #757575;\n}\n\n.tbDatasource-table td {\n    position: relative;\n    border-top: 1px solid rgba(0, 0, 0, 0.12);\n    border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n    padding: 0px 18px;\n    box-sizing: border-box;\n}",
      "controllerScript" : "self.onInit = function() {\n    let $scope = self.ctx.$scope;\n    let settings = self.ctx.settings || {};\n    console.log(\"settings\",self.ctx.settings);\n    $scope.backgroundColor=self.ctx.widgetConfig.backgroundColor;\n\t$scope.txtColor=self.ctx.widgetConfig.color;\n\t\n\t\n\tconst getOrCreateTooltip = (chart) => {\n\t\tlet tooltipEl = chart.canvas.parentNode.querySelector('div');\n\n\t\tif (!tooltipEl) {\n\t\t\ttooltipEl = document.createElement('div');\n\t\t\ttooltipEl.style.background = 'rgba(0, 0, 0, 0.7)';\n\t\t\ttooltipEl.style.borderRadius = '3px';\n\t\t\ttooltipEl.style.color = 'white';\n\t\t\ttooltipEl.style.opacity = 1;\n\t\t\ttooltipEl.style.pointerEvents = 'none';\n\t\t\ttooltipEl.style.position = 'absolute';\n\t\t\ttooltipEl.style.transform = 'translate(-50%, 0)';\n\t\t\ttooltipEl.style.transition = 'all .1s ease';\n\n\t\t\tconst table = document.createElement('table');\n\t\t\ttable.style.margin = '0px';\n\n\t\t\ttooltipEl.appendChild(table);\n\t\t\tchart.canvas.parentNode.appendChild(tooltipEl);\n\t\t}\n\n\t\treturn tooltipEl;\n\t};\n\n\tconst externalTooltipHandler = (context) => {\n\t\t// Tooltip Element\n\t\tconst {\n\t\t\tchart,\n\t\t\ttooltip\n\t\t} = context;\n\t\tconst tooltipEl = getOrCreateTooltip(chart);\n\t\tlet labelString = context.tooltip.$context.tooltip.$context\n\t\t\t.tooltip.body[0].lines[0].split(\":\")[0];\n\t\tlet stat = labelString.split(\",\")[0];\n\t\tlet msg = labelString.split(',')[1];\n\t\tlet time = labelString.split(',')[2];\n\t\ttime = moment(parseInt(time)).format('h:mma')\n\n\t\t// Hide if no tooltip\n\t\tif (tooltip.opacity === 0) {\n\t\t\ttooltipEl.style.opacity = 0;\n\t\t\treturn;\n\t\t}\n\n\t\t// Set Text\n\t\tif (tooltip.body) {\n\t\t\tconst titleLines = tooltip.title || [];\n\t\t\tconst bodyLines = tooltip.body.map(b => b.lines);\n\n\t\t\tconst tableHead = document.createElement('thead');\n\n\t\t\ttitleLines.forEach(title => {\n\t\t\t\tconst tr = document.createElement('tr');\n\t\t\t\ttr.style.borderWidth = 0;\n\n\t\t\t\tconst th = document.createElement('th');\n\t\t\t\tth.style.borderWidth = 0;\n\t\t\t\tconst text = document.createTextNode(title);\n\t\t\t\tth.innerHTML = stat;\n\t\t\t\tth.appendChild(text);\n\t\t\t\ttr.appendChild(th);\n\t\t\t\ttableHead.appendChild(tr);\n\t\t\t});\n\n\t\t\tconst tableBody = document.createElement('tbody');\n\t\t\tbodyLines.forEach((body, i) => {\n\t\t\t\tconst colors = tooltip.labelColors[i];\n\n\t\t\t\tconst span = document.createElement('span');\n\t\t\t\tspan.style.background = colors.backgroundColor;\n\t\t\t\tspan.style.borderColor = colors.borderColor;\n\t\t\t\tspan.style.borderWidth = '2px';\n\t\t\t\tspan.style.marginRight = '10px';\n\t\t\t\tspan.style.height = '10px';\n\t\t\t\tspan.style.width = '10px';\n\t\t\t\tspan.style.display = 'inline-block';\n\n\t\t\t\tconst tr = document.createElement('tr');\n\t\t\t\ttr.style.backgroundColor = 'inherit';\n\t\t\t\ttr.style.borderWidth = 0;\n\n\t\t\t\tconst td = document.createElement('td');\n\t\t\t\ttd.style.borderWidth = 0;\n\n\t\t\t\tlet av = Number(body[0].split(':')[1].replaceAll(',', ''))\n\n\t\t\t\tav = moment(av).format('h:mm')\n\n\t\t\t\tlet arr = av.split(\":\")\n\n\n\t\t\t\tlet x = av.split(\":\")[0];\n\t\t\t\tif (x => 6) {\n\t\t\t\t\tx = x - 6;\n\t\t\t\t}\n\t\t\t\tarr[0] = x;\n\t\t\t\tarr = arr.toString()\n\t\t\t\tarr = arr.replaceAll(',', ':')\n\t\t\t\tconst text = document.createTextNode(time + \" \" + msg + \" \" + arr + 'm');\n\t\t\t\ttd.appendChild(span);\n\t\t\t\ttd.appendChild(text);\n\t\t\t\ttr.appendChild(td);\n\t\t\t\ttableBody.appendChild(tr);\n\t\t\t});\n\n\t\t\tconst tableRoot = tooltipEl.querySelector('table');\n\n\t\t\t// Remove old children\n\t\t\twhile (tableRoot.firstChild) {\n\t\t\t\ttableRoot.firstChild.remove();\n\t\t\t}\n\n\t\t\t// Add new children\n\t\t\ttableRoot.appendChild(tableHead);\n\t\t\ttableRoot.appendChild(tableBody);\n\t\t}\n\n\t\tconst {\n\t\t\toffsetLeft: positionX,\n\t\t\toffsetTop: positionY\n\t\t} = chart.canvas;\n\n\t\t// Display, position, and set styles for font\n\t\ttooltipEl.style.opacity = 1;\n\t\ttooltipEl.style.left = positionX + tooltip.caretX + 'px';\n\t\ttooltipEl.style.top = positionY + 20 + tooltip.caretY + 'px';\n\t\ttooltipEl.style.font = tooltip.options.bodyFont.string;\n\t\ttooltipEl.style.padding = tooltip.options.padding + 'px ' + tooltip.options.padding + 'px';\n\t};\n\t\n// \tconst shift_data = [{\n// \t\t\t\"ts\": 1691627400000,\n// \t\t\t\"isRunning\": false,\n// \t\t\t\"isPlanned\": false,\n// \t\t\t\"msg\": {\n// \t\t\t\t\"category\": \"\",\n// \t\t\t\t\"location\": \"\",\n// \t\t\t\t\"message\": \"\"\n// \t\t\t}\n// \t\t},\n// \t\t{\n// \t\t\t\"ts\": 1691627791324,\n// \t\t\t\"isRunning\": true,\n// \t\t\t\"isPlanned\": false,\n// \t\t\t\"msg\": {\n// \t\t\t\t\"category\": \"\",\n// \t\t\t\t\"location\": \"\",\n// \t\t\t\t\"message\": \"\"\n// \t\t\t}\n// \t\t},\n// \t\t{\n// \t\t\t\"ts\": 1691627854368,\n// \t\t\t\"isRunning\": false,\n// \t\t\t\"isPlanned\": false,\n// \t\t\t\"msg\": {\n// \t\t\t\t\"category\": \"\",\n// \t\t\t\t\"location\": \"\",\n// \t\t\t\t\"message\": \"\"\n// \t\t\t}\n// \t\t},\n// \t\t{\n// \t\t\t\"ts\": 1691627947404,\n// \t\t\t\"isRunning\": true,\n// \t\t\t\"isPlanned\": false,\n// \t\t\t\"msg\": {\n// \t\t\t\t\"category\": \"\",\n// \t\t\t\t\"location\": \"\",\n// \t\t\t\t\"message\": \"\"\n// \t\t\t}\n// \t\t},\n// \t\t{\n// \t\t\t\"ts\": 1691628148519,\n// \t\t\t\"isRunning\": false,\n// \t\t\t\"isPlanned\": false,\n// \t\t\t\"msg\": {\n// \t\t\t\t\"category\": \"\",\n// \t\t\t\t\"location\": \"\",\n// \t\t\t\t\"message\": \"\"\n// \t\t\t}\n// \t\t},\n// \t\t{\n// \t\t\t\"ts\": 1691628199542,\n// \t\t\t\"isRunning\": true,\n// \t\t\t\"isPlanned\": false,\n// \t\t\t\"msg\": {\n// \t\t\t\t\"category\": \"\",\n// \t\t\t\t\"location\": \"\",\n// \t\t\t\t\"message\": \"\"\n// \t\t\t}\n// \t\t},\n// \t\t{\n// \t\t\t\"ts\": 1691633221422,\n// \t\t\t\"isRunning\": false,\n// \t\t\t\"isPlanned\": false,\n// \t\t\t\"msg\": {\n// \t\t\t\t\"category\": \"\",\n// \t\t\t\t\"location\": \"\",\n// \t\t\t\t\"message\": \"\"\n// \t\t\t}\n// \t\t},\n// \t\t{\n// \t\t\t\"ts\": 1691633275441,\n// \t\t\t\"isRunning\": true,\n// \t\t\t\"isPlanned\": false,\n// \t\t\t\"msg\": {\n// \t\t\t\t\"category\": \"\",\n// \t\t\t\t\"location\": \"\",\n// \t\t\t\t\"message\": \"\"\n// \t\t\t}\n// \t\t},\n// \t\t{\n// \t\t\t\"ts\": 1691636397032,\n// \t\t\t\"isRunning\": false,\n// \t\t\t\"isPlanned\": false,\n// \t\t\t\"msg\": {\n// \t\t\t\t\"category\": \"\",\n// \t\t\t\t\"location\": \"\",\n// \t\t\t\t\"message\": \"\"\n// \t\t\t}\n// \t\t},\n// \t\t{\n// \t\t\t\"ts\": 1691636400000,\n// \t\t\t\"isRunning\": false,\n// \t\t\t\"isPlanned\": true,\n// \t\t\t\"msg\": {\n// \t\t\t\t\"category\": \"Fixed Break\",\n// \t\t\t\t\"location\": \"Shift Rules\",\n// \t\t\t\t\"message\": \"Breakfast\"\n// \t\t\t}\n// \t\t},\n// \t\t{\n// \t\t\t\"ts\": 1691637600000,\n// \t\t\t\"isRunning\": false,\n// \t\t\t\"isPlanned\": false,\n// \t\t\t\"msg\": {\n// \t\t\t\t\"category\": \"\",\n// \t\t\t\t\"location\": \"\",\n// \t\t\t\t\"message\": \"\"\n// \t\t\t}\n// \t\t},\n// \t\t{\n// \t\t\t\"ts\": 1691638222094,\n// \t\t\t\"isRunning\": true,\n// \t\t\t\"isPlanned\": false,\n// \t\t\t\"msg\": {\n// \t\t\t\t\"category\": \"\",\n// \t\t\t\t\"location\": \"\",\n// \t\t\t\t\"message\": \"\"\n// \t\t\t}\n// \t\t},\n// \t\t{\n// \t\t\t\"ts\": 1691638282151,\n// \t\t\t\"isRunning\": false,\n// \t\t\t\"isPlanned\": false,\n// \t\t\t\"msg\": {\n// \t\t\t\t\"category\": \"\",\n// \t\t\t\t\"location\": \"\",\n// \t\t\t\t\"message\": \"\"\n// \t\t\t}\n// \t\t},\n// \t\t{\n// \t\t\t\"ts\": 1691638363179,\n// \t\t\t\"isRunning\": true,\n// \t\t\t\"isPlanned\": false,\n// \t\t\t\"msg\": {\n// \t\t\t\t\"category\": \"\",\n// \t\t\t\t\"location\": \"\",\n// \t\t\t\t\"message\": \"\"\n// \t\t\t}\n// \t\t},\n// \t\t{\n// \t\t\t\"ts\": 1691639551840,\n// \t\t\t\"isRunning\": false,\n// \t\t\t\"isPlanned\": false,\n// \t\t\t\"msg\": {\n// \t\t\t\t\"category\": \"\",\n// \t\t\t\t\"location\": \"\",\n// \t\t\t\t\"message\": \"\"\n// \t\t\t}\n// \t\t},\n// \t\t{\n// \t\t\t\"ts\": 1691639572763,\n// \t\t\t\"isRunning\": true,\n// \t\t\t\"isPlanned\": false,\n// \t\t\t\"msg\": {\n// \t\t\t\t\"category\": \"\",\n// \t\t\t\t\"location\": \"\",\n// \t\t\t\t\"message\": \"\"\n// \t\t\t}\n// \t\t},\n// \t\t{\n// \t\t\t\"ts\": 1691640000000,\n// \t\t\t\"isRunning\": false,\n// \t\t\t\"isPlanned\": true,\n// \t\t\t\"msg\": {\n// \t\t\t\t\"category\": \"Fixed Break\",\n// \t\t\t\t\"location\": \"Shift Rules\",\n// \t\t\t\t\"message\": \"Maintenance\"\n// \t\t\t}\n// \t\t},\n// \t\t{\n// \t\t\t\"ts\": 1691640600000,\n// \t\t\t\"isRunning\": false,\n// \t\t\t\"isPlanned\": false,\n// \t\t\t\"msg\": {\n// \t\t\t\t\"category\": \"\",\n// \t\t\t\t\"location\": \"\",\n// \t\t\t\t\"message\": \"\"\n// \t\t\t}\n// \t\t},\n// \t\t{\n// \t\t\t\"ts\": 1691642886442,\n// \t\t\t\"isRunning\": false,\n// \t\t\t\"isPlanned\": false,\n// \t\t\t\"msg\": {\n// \t\t\t\t\"category\": \"\",\n// \t\t\t\t\"location\": \"\",\n// \t\t\t\t\"message\": \"\"\n// \t\t\t}\n// \t\t},\n// \t\t{\n// \t\t\t\"ts\": 1691642934441,\n// \t\t\t\"isRunning\": true,\n// \t\t\t\"isPlanned\": false,\n// \t\t\t\"msg\": {\n// \t\t\t\t\"category\": \"\",\n// \t\t\t\t\"location\": \"\",\n// \t\t\t\t\"message\": \"\"\n// \t\t\t}\n// \t\t},\n// \t\t{\n// \t\t\t\"ts\": 1691643465716,\n// \t\t\t\"isRunning\": false,\n// \t\t\t\"isPlanned\": false,\n// \t\t\t\"msg\": {\n// \t\t\t\t\"category\": \"\",\n// \t\t\t\t\"location\": \"\",\n// \t\t\t\t\"message\": \"\"\n// \t\t\t}\n// \t\t},\n// \t\t{\n// \t\t\t\"ts\": 1691643492745,\n// \t\t\t\"isRunning\": true,\n// \t\t\t\"isPlanned\": false,\n// \t\t\t\"msg\": {\n// \t\t\t\t\"category\": \"\",\n// \t\t\t\t\"location\": \"\",\n// \t\t\t\t\"message\": \"\"\n// \t\t\t}\n// \t\t},\n// \t\t{\n// \t\t\t\"ts\": 1691643973015,\n// \t\t\t\"isRunning\": false,\n// \t\t\t\"isPlanned\": false,\n// \t\t\t\"msg\": {\n// \t\t\t\t\"category\": \"\",\n// \t\t\t\t\"location\": \"\",\n// \t\t\t\t\"message\": \"\"\n// \t\t\t}\n// \t\t},\n// \t\t{\n// \t\t\t\"ts\": 1691643982018,\n// \t\t\t\"isRunning\": true,\n// \t\t\t\"isPlanned\": false,\n// \t\t\t\"msg\": {\n// \t\t\t\t\"category\": \"\",\n// \t\t\t\t\"location\": \"\",\n// \t\t\t\t\"message\": \"\"\n// \t\t\t}\n// \t\t}\n// \t]; \n\tlet data_array = [];\n\n\tfunction progress_data_handel(shift_data, shift_start, shift_end) {\n\t\tconsole.log(\"----\", shift_data, shift_start, shift_end);\n\t\tlet status = ' '\n\n\t\tfunction calculate(isRunning, isPlanned) {\n\t\t\tif (isRunning == false && isPlanned == false) {\n\t\t\t\t// unplanned break\n\t\t\t\tstatus = \"Unplanned Break\";\n\t\t\t\treturn 'red';\n\t\t\t} else if (isRunning == true && isPlanned == false || isRunning == true && isPlanned == true) {\n\t\t\t\t// running      \n\t\t\t\tstatus = \"Running\"\n\t\t\t\treturn 'green';\n\n\t\t\t} else if (isRunning == false && isPlanned == true) {\n\t\t\t\tstatus = \"Planned Break\"\n\t\t\t\treturn 'orange';\n\t\t\t}\n\t\t}\n\n\t\tshift_data.forEach((data, index) => {\n\n\t\t\tstatus = calculate(data.isRunning, data.isPlanned) == 'green' ? 'Running' : calculate(data.isRunning, data.isPlanned) == 'red' ? 'Unplanned Break' : 'Planned Break';\n\t\t\tlet msg = data.msg.message == \"\" ? ' ' : data.msg.message;\n\t\t\tlet x_obj = {\n\t\t\t\tlabel: [status, msg, data.ts],\n\t\t\t\tdata: [shift_data[index + 1]?.ts - data.ts],\n\t\t\t\tborderWidth: 1,\n\t\t\t\t// borderColor: data.isRunning == true && data.isPlanned == false || data.isRunning == true && data.isPlanned == true ? 'green' : data.isRunning == false && data.isPlanned == true ? 'blue' : 'red',\n\t\t\t\tborderColor: calculate(data.isRunning, data.isPlanned),\n\t\t\t\t// backgroundColor: data.isPlanned == false && data.isRunning == true ? 'red' : 'green',\n\t\t\t\tbackgroundColor: calculate(data.isRunning, data.isPlanned),\n\t\t\t}\n\t\t\tdata_array.push(x_obj)\n\t\t});\n\t\tlet shift_min_value=new Date(Number(shift_start)).getMinutes();\n        pgrgress_context.options.scales.x.min =shift_min_value;\n        pgrgress_context.options.scales.x.max =Number(shift_end)-Number(shift_start);\n\t\tpgrgress_context.update();\n\t} \n    const chart_data = {\n\t\tlabels: ' ',\n\t\tdatasets: data_array\n\t};\n\n\tconst progress_chart_config = {\n\t\ttype: 'bar',\n\t\tdata: chart_data,\n\t\toptions: {\n\t\t\tindexAxis: 'y',\n\n\t\t\tscales: {\n\t\t\t\ty: {\n\n\t\t\t\t\tbeginAtZero: false,\n\t\t\t\t\tticks: {\n\t\t\t\t\t\tdisplay: true\n\t\t\t\t\t},\n\t\t\t\t\tgrid: {\n\t\t\t\t\t\tdisplay: false,\n\t\t\t\t\t},\n\t\t\t\t\tstacked: true,\n\t\t\t\t},\n\t\t\t\tx: {\n\t\t\t\t\tticks: {\n\t\t\t\t\t\tdisplay: false\n\t\t\t\t\t},\n\t\t\t\t\tticks: {\n\t\t\t\t\t    callback: function (value, index, values) {\n\t\t\t\t\t        return moment(value+1800000).format('h:mm a');\n\t\t\t\t\t    },\n\t\t\t\t\t    color: $scope.txtColor,\n\t\t\t\t\t},\n\t\t\t\t\tgrid: {\n\t\t\t\t\t\tdisplay: false,\n\t\t\t\t\t},\n\t\t\t\t\tmin:0, \n\t\t\t\t\tmax: 0, \n\t\t\t\t\tstacked: true,\n\t\t\t\t\t// type: 'time',\n\t\t\t\t\t// time: {\n\t\t\t\t\t//     displayFormats: { \n\t\t\t\t\t//         quarter: 'MMM YYYY' \n\t\t\t\t\t//     }\n\t\t\t\t\t// }\n\n\t\t\t\t\t// type: 'time',\n\t\t\t\t\t// time: {\n\t\t\t\t\t//   // Luxon format string\n\t\t\t\t\t//   tooltipFormat: 'DD T'\n\t\t\t\t\t// },\n\t\t\t\t\t// title: { \n\t\t\t\t\t//   display: true,\n\t\t\t\t\t//   text: 'Date'\n\t\t\t\t\t// }\n\t\t\t\t}\n\t\t\t},\n\t\t\tresponsive: true,\n\t\t\tmaintainAspectRatio: false,\n\t\t\tplugins: {\n\t\t\t\tlegend: {\n\t\t\t\t\tdisplay: false\n\t\t\t\t},\n\t\t\t\ttitle: {\n\t\t\t\t\tdisplay: false,\n\t\t\t\t\ttext: 'Shift Progress',\n\t\t\t\t\talign: 'start',\n\t\t\t\t\tcolor:$scope.txtColor,\n\t\t\t\t},\n\t\t\t\ttooltip: {\n\t\t\t\t\tenabled: false,\n\t\t\t\t\tposition: 'nearest',\n\t\t\t\t\texternal: externalTooltipHandler,\n\n\t\t\t\t},\n\t\t\t\tzoom: {\n\t\t\t\t\tpan: {\n\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\tmode: \"x\",\n\t\t\t\t\t\tthreshold: 100,\n\t\t\t\t\t},\n\t\t\t\t\tzoom: {\n\t\t\t\t\t\twheel: {\n\t\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\t\t// speed: 0.1,\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tchartAreaBorder: {\n\t\t\t\t\tborderColor: 'darkgray',\n\t\t\t\t\tborderWidth: 2,\n\t\t\t\t\tborderDash: [5, 0],\n\t\t\t\t\tborderDashOffset: 2,\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t// plugins: [chartAreaBorder]\n\t};\n\t\n\tconst progress_ctx = document.getElementById('progressBarChart');\n\tlet pgrgress_context = new Chart(progress_ctx, progress_chart_config);\n\t\n\tfunction doubleClick() {\n\t\tconsole.log(\"click\");\n\t\tpgrgress_context.resetZoom();\n\t}\n\n\tprogress_ctx.ondblclick = doubleClick;\n\t\n\t\tlet link = 'https://syngenta-ctg.syncross.ai/nrdapi/shiftoeeinfo?start_ts=1691604000000&end_ts=1691690400000&entity_id=d40240f0-fa18-11ed-875f-535e61749edf&shift_start=1691627400000';\n\n\t$scope.http = {\n\t\tmethod: self.ctx.http,\n\t\tbaseUrl: link,\n\t\tconfig: {\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\"X-Authorization\": \"Bearer \" + localStorage.getItem('jwt_token')\n\t\t\t}\n\t\t}\n\t};\n\t\n\t$scope.http.method.get($scope.http.baseUrl, $scope.http.config).subscribe(function(r) {\n\t\tconsole.log(\"r\", r);\n\t\t\n\t\tprogress_data_handel(r.breakdown, r.shift_start, r.shift_end);\n\t});\n}\n\nself.onDataUpdated = function() {\n    \n    \n}\n\nself.onResize = function() {\n    \n}\n\nself.onDestroy = function() {\n}\n",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Shift Progress Stacked\"}"
    },
    "bundleAlias" : "syngenta_widger",
    "createdTime" : 1692162620907,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "32b7ebb0-3bf3-11ee-a5b1-9d6138fe9e87"
    },
    "tenantId" : {
      "entityType" : "TENANT",
      "id" : "6a594940-e4c5-11ed-8f65-1f1c5e01f03a"
    }
  }, {
    "alias" : "status_table",
    "name" : "status table",
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 4,
      "resources" : [ ],
      "templateHtml" : "\r\n\r\n\r\n    <div *ngIf=\"dataSource && tablePagination\" class=\"mat-elevation-z8\">\r\n        <section class=\"example-container mat-elevation-z8\" tabindex=\"0\" [style.height]=\"tableHeight+'px'\">\r\n        <table mat-table [dataSource]=\"dataSource.slice(tablePagination.getFrom(), tablePagination.getTo())\" class=\"mat-elevation-z8\">\r\n        \r\n          <!--- Note that these columns can be defined in any order.\r\n                The actual rendered columns are set as a property on the row definition\" -->\r\n        \r\n          <!-- Position Column -->\r\n          <tr matColumnDef=\"ts\">\r\n            <th mat-header-cell *matHeaderCellDef> No. </th>\r\n            <td mat-cell *matCellDef=\"let element\"> {{element.ts}} </td>\r\n          </tr>\r\n        \r\n          <!-- Name Column -->\r\n          <tr matColumnDef=\"isRunning\">\r\n            <th mat-header-cell *matHeaderCellDef> Name </th>\r\n            <td mat-cell *matCellDef=\"let element\"> {{element.isRunning}} </td>\r\n          </tr>\r\n        \r\n          <!-- Weight Column -->\r\n          <tr matColumnDef=\"isPlanned\">\r\n            <th mat-header-cell *matHeaderCellDef> Weight </th>\r\n            <td mat-cell *matCellDef=\"let element\"> {{element.isPlanned}} </td>\r\n          </tr>\r\n        \r\n          <!-- Symbol Column -->\r\n          <tr matColumnDef=\"action\">\r\n            <th mat-header-cell *matHeaderCellDef> Action </th>\r\n            <td mat-cell *matCellDef=\"let element\"> <button mat-icon-button (click)=\"deleteParentBundle(element)\"><mat-icon>edit</mat-icon></button> </td>\r\n          </tr>\r\n        \r\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"></tr>\r\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n        </table>\r\n    </section>\r\n        <mat-paginator\r\n        [length]=\"dataSource.length\"\r\n        [pageSize]=\"tablePagination.pageSize\"\r\n        [pageSizeOptions]=\"tablePagination.pageSizeOptions\"\r\n        (page)=\"tablePagination.handler($event)\"\r\n        aria-label=\"Select page\"\r\n        showFirstLastButtons=\"true\"></mat-paginator>\r\n    \r\n    </div>\r\n",
      "templateCss" : "table {\r\n  width: 100%;\r\n}\r\n\r\n.example-container {\r\n  height: 600px;\r\n  overflow: auto;\r\n}\r\n\r\n\r\n/*-----------------Scroll Start-------------------*/\r\n/* width */\r\n::-webkit-scrollbar {\r\n  width: 10px;\r\n}\r\n\r\n/* Track */\r\n::-webkit-scrollbar-track {\r\n  box-shadow: inset 0 0 5px grey; \r\n  border-radius: 10px;\r\n}\r\n \r\n/* Handle */\r\n::-webkit-scrollbar-thumb {\r\n  background: red; \r\n  border-radius: 10px;\r\n}\r\n\r\n/* Handle on hover */\r\n::-webkit-scrollbar-thumb:hover {\r\n  background: #b30000; \r\n}\r\n/*-----------------Scroll End-------------------*/",
      "controllerScript" : "self.onInit = function() {\n\tlet $scope = self.ctx.$scope;\n\n\tconst tablePagination = {\n\t\tpageIndex: 0,\n\t\tpageSize: 10,\n\t\tpageSizeOptions: [10, 15, 20, 30],\n\t\thandler: (pagination) => {\n\t\t\tconst {\n\t\t\t\tpageIndex,\n\t\t\t\tpageSize\n\t\t\t} = pagination;\n\t\t\tif (pageSize !== undefined) {\n\t\t\t\ttablePagination.pageSize = pageSize;\n\t\t\t}\n\t\t\tif (pageIndex !== undefined) {\n\t\t\t\ttablePagination.pageIndex = pageIndex;\n\t\t\t}\n\t\t},\n\t\tgetFrom: () => {\n\t\t\tconst {\n\t\t\t\tpageIndex,\n\t\t\t\tpageSize\n\t\t\t} = tablePagination;\n\t\t\treturn pageIndex * pageSize;\n\t\t},\n\t\tgetTo: () => {\n\t\t\tconst {\n\t\t\t\tpageIndex,\n\t\t\t\tpageSize\n\t\t\t} = tablePagination;\n\t\t\treturn pageIndex * pageSize + pageSize;\n\t\t}\n\t};\n\t$scope.tablePagination = tablePagination;\n\n\tconst ELEMENT_DATA = [{\n\t\t\tposition: 1,\n\t\t\tname: 'Hydrogen',\n\t\t\tweight: 1.0079,\n\t\t\tsymbol: 'H'\n\t\t},\n\t\t{\n\t\t\tposition: 2,\n\t\t\tname: 'Helium',\n\t\t\tweight: 4.0026,\n\t\t\tsymbol: 'He'\n\t\t},\n\t\t{\n\t\t\tposition: 3,\n\t\t\tname: 'Lithium',\n\t\t\tweight: 6.941,\n\t\t\tsymbol: 'Li'\n\t\t},\n\t\t{\n\t\t\tposition: 4,\n\t\t\tname: 'Beryllium',\n\t\t\tweight: 9.0122,\n\t\t\tsymbol: 'Be'\n\t\t},\n\t\t{\n\t\t\tposition: 5,\n\t\t\tname: 'Boron',\n\t\t\tweight: 10.811,\n\t\t\tsymbol: 'B'\n\t\t},\n\t\t{\n\t\t\tposition: 6,\n\t\t\tname: 'Carbon',\n\t\t\tweight: 12.0107,\n\t\t\tsymbol: 'C'\n\t\t},\n\t\t{\n\t\t\tposition: 7,\n\t\t\tname: 'Nitrogen',\n\t\t\tweight: 14.0067,\n\t\t\tsymbol: 'N'\n\t\t},\n\t\t{\n\t\t\tposition: 8,\n\t\t\tname: 'Oxygen',\n\t\t\tweight: 15.9994,\n\t\t\tsymbol: 'O'\n\t\t},\n\t\t{\n\t\t\tposition: 9,\n\t\t\tname: 'Fluorine',\n\t\t\tweight: 18.9984,\n\t\t\tsymbol: 'F'\n\t\t},\n\t\t{\n\t\t\tposition: 10,\n\t\t\tname: 'Neon',\n\t\t\tweight: 20.1797,\n\t\t\tsymbol: 'Ne'\n\t\t},\n\t\t{\n\t\t\tposition: 11,\n\t\t\tname: 'Sodium',\n\t\t\tweight: 22.9897,\n\t\t\tsymbol: 'Na'\n\t\t},\n\t\t{\n\t\t\tposition: 12,\n\t\t\tname: 'Magnesium',\n\t\t\tweight: 24.305,\n\t\t\tsymbol: 'Mg'\n\t\t},\n\t\t{\n\t\t\tposition: 13,\n\t\t\tname: 'Aluminum',\n\t\t\tweight: 26.9815,\n\t\t\tsymbol: 'Al'\n\t\t},\n\t\t{\n\t\t\tposition: 14,\n\t\t\tname: 'Silicon',\n\t\t\tweight: 28.0855,\n\t\t\tsymbol: 'Si'\n\t\t},\n\t\t{\n\t\t\tposition: 15,\n\t\t\tname: 'Phosphorus',\n\t\t\tweight: 30.9738,\n\t\t\tsymbol: 'P'\n\t\t},\n\t\t{\n\t\t\tposition: 16,\n\t\t\tname: 'Sulfur',\n\t\t\tweight: 32.065,\n\t\t\tsymbol: 'S'\n\t\t},\n\t\t{\n\t\t\tposition: 17,\n\t\t\tname: 'Chlorine',\n\t\t\tweight: 35.453,\n\t\t\tsymbol: 'Cl'\n\t\t},\n\t\t{\n\t\t\tposition: 18,\n\t\t\tname: 'Argon',\n\t\t\tweight: 39.948,\n\t\t\tsymbol: 'Ar'\n\t\t},\n\t\t{\n\t\t\tposition: 19,\n\t\t\tname: 'Potassium',\n\t\t\tweight: 39.0983,\n\t\t\tsymbol: 'K'\n\t\t},\n\t\t{\n\t\t\tposition: 20,\n\t\t\tname: 'Calcium',\n\t\t\tweight: 40.078,\n\t\t\tsymbol: 'Ca'\n\t\t},\n\t];\n\n\n\t//  console.log(\"$scope.dataSource\", $scope.dataSource.length) \n\n\n\tlet link = 'https://syngenta-ctg.syncross.ai/nrdapi/shiftoeeinfo?start_ts=1691604000000&end_ts=1691690400000&entity_id=d40240f0-fa18-11ed-875f-535e61749edf&shift_start=1691627400000';\n\n\t$scope.http = {\n\t\tmethod: self.ctx.http,\n\t\tbaseUrl: link,\n\t\tconfig: {\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\"X-Authorization\": \"Bearer \" + localStorage.getItem('jwt_token')\n\t\t\t}\n\t\t}\n\t};\n\t$scope.displayedColumns = ['ts', 'isRunning', 'isPlanned', 'action'];\n\t$scope.dataSource = [];\n\n\n\n\n\n\n\t$scope.http.method.get($scope.http.baseUrl, $scope.http.config).subscribe(function(r) {\n\t\tconsole.log(\"r\", r.breakdown)\n\n\t\t$scope.dataSource = r.breakdown;\n\n\t\tself.ctx.detectChanges();\n\t});\n\n    $injector = self.ctx.$injector;\n    customDialog = $injector.get(self.ctx.servicesMap.get(\"customDialog\"));\n    $scope.deleteParentBundle = function(deletedBundleData){\n        //console.log('deleted-passed');\n        \n        html = `\n               <div aria-label=\"Info\" style=\"width: 500px\">\n                <mat-toolbar fxLayout=\"row\" color=\"primary\" >\n                    <div>Warning</div>\n                    <span fxFlex></span>\n                    <button mat-icon-button (click)=\"close()\">\n                        <mat-icon>close</mat-icon>\n                    </button>\n                </mat-toolbar>\n                <div mat-dialog-content>\n                <h4>Are you sure you want to delete ? </h4>\n                <mat-form-field style=\"width:100%\">\n                  <mat-label>Input</mat-label>\n                  <input matInput>\n                </mat-form-field>\n                <mat-form-field style=\"width:100%\">\n                  <mat-label>Select</mat-label>\n                  <mat-select>\n                    <mat-option value=\"one\">First option</mat-option>\n                    <mat-option value=\"two\">Second option</mat-option>\n                  </mat-select>\n                </mat-form-field>\n                <mat-form-field style=\"width:100%\">\n                  <mat-label>Textarea</mat-label>\n                  <textarea matInput></textarea>\n                </mat-form-field>\n        \n        \n        \n        \n                </div>\n                <button style='    margin-bottom: 20px;margin-left: 20px;'  mat-raised-button (click)=\"deleteconfirm()\">Yes</button>\n                <button style='    margin-bottom: 20px;margin-left: 20px;'  mat-raised-button (click)=\"closeDialog()\">No</button>\n            </div>`;\n\t\t\tdata = {};\n\t\t\tdata.html = html;\n\t\t\tdata.deleteBundle = deletedBundleData;\n\t\t\tcustomDialog.customDialog(html, InfoDialogControllerOfdelete, data).subscribe(function(res) {\n\t\t\t\tif(res) {}\n\t\t\t});\n    }\n    function InfoDialogControllerOfdelete(instance){\n        var deleteBundleData = instance.data.deleteBundle;\n        console.log('-----delete data');\n        console.log(deleteBundleData);\n        //delete\n        instance.closeDialog = function(){\n\t    instance.dialogRef.close(null);\n\t    }\n\t    \n\t    instance.deleteconfirm = function(){\n\t        console.log('yes clicked');\n\t         http.method.delete(http.baseUrl + '_master_bundle?id=eq.'+deleteBundleData.id, http.config).subscribe(function(r) {\n\t             //console.log(r);\n                 console.log('Delete.....');\n                //  window.updateTableData();\n                 self.onInit();\n                 self.ctx.detectChanges();\n                 instance.dialogRef.close(null);\n                 \n             },(function(e){\n                 console.log('error.....');\n                })\n             );\n\t    }\n\t    \n\t    instance.close = function(){\n\t        instance.dialogRef.close(null);\n\t    }\n    }\n\n\tconsole.log(\"Height: \", self.ctx.height)\n\n\t// let clientHeight = document.getElementById('header-div').clientHeight;\n\t// let offsetHeight = document.getElementById('header-div').offsetHeight;\n\t// console.log('clientHeight',clientHeight);\n\t// console.log('offsetHeight',offsetHeight);\n\t$scope.tableHeight = self.ctx.height - (+56);\n\tself.ctx.detectChanges();\n}\n\nself.onDataUpdated = function() {\n\n}\n\nself.onResize = function() {\n\n}\n\nself.onDestroy = function() {}",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"status table\"}"
    },
    "bundleAlias" : "syngenta_widger",
    "createdTime" : 1691668457726,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "a28281e0-3774-11ee-a7ff-9d6138fe9e87"
    },
    "tenantId" : {
      "entityType" : "TENANT",
      "id" : "6a594940-e4c5-11ed-8f65-1f1c5e01f03a"
    }
  } ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}