{
  "entityType" : "WIDGETS_BUNDLE",
  "entity" : {
    "alias" : "joint_js",
    "description" : null,
    "externalId" : null,
    "id" : {
      "entityType" : "WIDGETS_BUNDLE",
      "id" : "7498f240-76db-11ee-8a88-9d6138fe9e87"
    },
    "image" : null,
    "name" : "joint js",
    "title" : "joint js"
  },
  "widgets" : [ {
    "alias" : "hello_world",
    "name" : "Hello world",
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 10.5,
      "sizeY" : 6,
      "resources" : [ {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.4/jquery.js"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.js"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.4.1/backbone.js"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/jointjs/3.7.5/joint.js"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/jointjs/3.7.5/joint.css"
      } ],
      "templateHtml" : "<div id=\"myholder\"></div>",
      "templateCss" : "#container {\n    overflow: auto;\n}\n\n.tbDatasource-container {\n    margin: 5px;\n    padding: 8px;\n}\n\n.tbDatasource-title {\n    font-size: 1.200rem;\n    font-weight: 500;\n    padding-bottom: 10px;\n}\n\n.tbDatasource-table {\n    width: 100%;\n    box-shadow: 0 0 10px #ccc;\n    border-collapse: collapse;\n    white-space: nowrap;\n    font-size: 1.000rem;\n    color: #757575;\n}\n\n.tbDatasource-table td {\n    position: relative;\n    border-top: 1px solid rgba(0, 0, 0, 0.12);\n    border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n    padding: 0px 18px;\n    box-sizing: border-box;\n}",
      "controllerScript" : "self.onInit = function() {\n    var namespace = joint.shapes;\n                \n        var graph = new joint.dia.Graph({}, { cellNamespace: namespace });\n\n        var paper = new joint.dia.Paper({\n            el: document.getElementById('myholder'),\n            model: graph,\n            width: 600,\n            height: 300,\n            gridSize: 10,\n            cellViewNamespace: namespace,\n            background:{\n                color: 'rgba(0, 255, 0, 0.3)'\n            },\n            drawGrid: true,\n        });\n        // zoom in and out.\n        // paper.scale(0.5,0.5);  \n        // move the view.\n        // paper.translate(300,50);\n        \n        var rect = new joint.shapes.standard.Rectangle();\n        rect.position(100, 30);\n        rect.resize(100, 40);\n        rect.attr({\n            body: {\n                fill: 'blue',\n                rx: 5,\n                ry: 5,\n                strokeWidth: 2\n            },\n            label: {\n                text: 'Hello',\n                fill: 'white',\n                fontSize: 18,\n                fontWeight: 'bold',\n                fontVariant: 'small-caps'\n            }\n        });\n        rect.addTo(graph);\n\n        var rect2 = rect.clone();\n        rect2.translate(300, 0);\n        rect2.attr('label/text', 'World!');\n        rect2.addTo(graph);\n\n        var link = new joint.shapes.standard.Link();\n        link.source(rect);\n        link.target(rect2);\n        link.addTo(graph);\n        \n        // ---------------\n        \n        var rect3 = new joint.shapes.standard.Rectangle();\n        rect3.position(100, 130);\n        rect3.resize(100, 40);\n        rect3.attr({\n            body: {\n                fill: '#E74C3C',\n                rx: 20,\n                ry: 20,\n                strokeWidth: 0\n            },\n            label: {\n                text: 'Hello',\n                fill: '#ECF0F1',\n                fontSize: 11,\n                fontVariant: 'small-caps'\n            }\n        });\n        rect3.addTo(graph);\n\n        var rect4 = new joint.shapes.standard.Rectangle();\n        rect4.position(400, 130);\n        rect4.resize(100, 40);\n        rect4.attr({\n            body: {\n                fill: '#8E44AD',\n                strokeWidth: 0\n            },\n            label: {\n                text: 'World!',\n                fill: 'white',\n                fontSize: 13\n            }\n        });\n        rect4.addTo(graph);\n\n        var link2 = new joint.shapes.standard.Link();\n        link2.source(rect3);\n        link2.target(rect4);\n        link2.attr({\n            line: { // selector for the visible <path> SVGElement\n                stroke: 'pink' // SVG attribute and value\n            }\n        });\n        link2.addTo(graph);\n        \n        // ----------------\n        \n        var rect5 = new joint.shapes.standard.Rectangle();\n        rect5.position(100, 230);\n        rect5.resize(100, 40);\n        rect5.attr({\n            body: {\n                fill: '#2ECC71',\n                strokeDasharray: '10,2'\n            },\n            label: {\n                text: 'Hello',\n                fill: 'black',\n                fontSize: 13\n            }\n        });\n        rect5.addTo(graph);\n\n        var rect6 = new joint.shapes.standard.Rectangle();\n        rect6.position(400, 230);\n        rect6.resize(100, 40);\n        rect6.attr({\n            body: {\n                fill: '#F39C12',\n                rx: 20,\n                ry: 20,\n                strokeDasharray: '10,2'\n            },\n            label: {\n                text: 'World!',\n                fill: 'gray',\n                fontSize: 18,\n                fontWeight: 'bold',\n                fontVariant: 'small-caps',\n                textShadow: '1px 1px 1px black'\n            }\n        });\n        rect6.addTo(graph);\n\n        var link3 = new joint.shapes.standard.Link();\n        link3.source(rect5);\n        link3.target(rect6);\n        link3.addTo(graph);\n        link3.attr('line/stroke', 'orange');\n        \n        // var link4 = new joint.shapes.standard.Link();\n        // console.log(link4);\n        // link4.prop('source', { x: 250, y: 300 });\n        // link4.prop('target', { x: 200, y: 350 });\n        // link4.prop('vertices', [{ x: 250, y: 400 }]);\n        // link4.attr('root/title', 'joint.shapes.standard.Link');\n        // link4.attr('line/stroke', '#fe854f');\n\n        // link4.attr({\n        //     line: {\n        //         sourceMarker: { // hour hand\n        //             'type': 'path',\n        //             'd': 'M 10 -10 0 0 10 10 Z',\n        //         },\n        //         targetMarker: { // minute hand\n        //             'type': 'path',\n        //             'stroke': 'green',\n        //             'stroke-width': 2,\n        //             'fill': 'yellow',\n        //             'd': 'M 10 -10 0 0 10 10 Z'\n        //         },\n                \n        //     }\n        // });\n        \n        // link4.addTo(graph);\n        // link4.attr('line/stroke', 'orange');\n        \n\n        \n}\n\nself.onDataUpdated = function() {\n    \n}\n\nself.onResize = function() {\n    \n}\n\nself.onDestroy = function() {\n}\n",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Hello world\"}"
    },
    "bundleAlias" : "joint_js",
    "createdTime" : 1698814192740,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "187b4240-7872-11ee-b19f-9d6138fe9e87"
    },
    "tenantId" : {
      "entityType" : "TENANT",
      "id" : "6a594940-e4c5-11ed-8f65-1f1c5e01f03a"
    }
  }, {
    "alias" : "link",
    "name" : "Link",
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 10.5,
      "sizeY" : 6,
      "resources" : [ {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.4/jquery.js"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.js"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.4.1/backbone.js"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/jointjs/3.7.5/joint.js"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/jointjs/3.7.5/joint.css"
      } ],
      "templateHtml" : "<div id=\"myholder\"></div>",
      "templateCss" : "#container {\n    overflow: auto;\n}\n\n.tbDatasource-container {\n    margin: 5px;\n    padding: 8px;\n}\n\n.tbDatasource-title {\n    font-size: 1.200rem;\n    font-weight: 500;\n    padding-bottom: 10px;\n}\n\n.tbDatasource-table {\n    width: 100%;\n    box-shadow: 0 0 10px #ccc;\n    border-collapse: collapse;\n    white-space: nowrap;\n    font-size: 1.000rem;\n    color: #757575;\n}\n\n.tbDatasource-table td {\n    position: relative;\n    border-top: 1px solid rgba(0, 0, 0, 0.12);\n    border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n    padding: 0px 18px;\n    box-sizing: border-box;\n}",
      "controllerScript" : "self.onInit = function() {\n    var namespace = joint.shapes;\n\n    var graph = new joint.dia.Graph({}, { cellNamespace: namespace });\n\n    var paper = new joint.dia.Paper({\n        el: document.getElementById('myholder'),\n        model: graph,\n        width: 600,\n        height: 300,\n        gridSize: 10,\n        drawGrid: true,\n        background: {\n            color: 'rgba(0, 255, 0, 0.3)'\n        },\n        cellViewNamespace: namespace\n    });\n\n    var rect = new joint.shapes.standard.Rectangle();\n    rect.position(100, 30);\n    rect.resize(100, 40);\n    rect.attr({\n        body: {\n            fill: 'blue'\n        },\n        label: {\n            text: 'Hello',\n            fill: 'white'\n        }\n    });\n    rect.addTo(graph);\n\n    var rect2 = new joint.shapes.standard.Rectangle();\n    rect2.position(400, 30);\n    rect2.resize(100, 40);\n    rect2.attr({\n        body: {\n            fill: '#2C3E50',\n            rx: 5,\n            ry: 5,\n            strokeWidth: 2\n        },\n        label: {\n            text: 'World!',\n            fill: '#3498DB',\n            fontSize: 18,\n            fontWeight: 'bold',\n            fontVariant: 'small-caps'\n        }\n    });\n    rect2.addTo(graph);\n\n    var link = new joint.shapes.standard.Link();\n    link.source(rect);\n    link.target(rect2);\n    link.attr({\n        line: {\n            stroke: 'blue',\n            strokeWidth: 1,\n            sourceMarker: {\n                'type': 'path',\n                'stroke': 'black',\n                'fill': 'red',\n                'd': 'M 10 -5 0 0 10 5 Z'\n            },\n            targetMarker: {\n                'type': 'path',\n                'stroke': 'black',\n                'fill': 'yellow',\n                'd': 'M 10 -5 0 0 10 5 Z'\n            }\n        }\n    });\n    link.labels([{\n        attrs: {\n            text: {\n                text: 'Hello, World!'\n            }\n        }\n    }]);\n    link.addTo(graph);\n\n    var rect3 = new joint.shapes.standard.Rectangle();\n    rect3.position(100, 130);\n    rect3.resize(100, 40);\n    rect3.attr({\n        body: {\n            fill: '#E74C3C',\n            rx: 20,\n            ry: 20,\n            strokeWidth: 0\n        },\n        label: {\n            text: 'Hello',\n            fill: '#ECF0F1',\n            fontSize: 11,\n            fontVariant: 'small-caps'\n        }\n    });\n    rect3.addTo(graph);\n\n    var rect4 = new joint.shapes.standard.Rectangle();\n    rect4.position(400, 130);\n    rect4.resize(100, 40);\n    rect4.attr({\n        body: {\n            fill: '#8E44AD',\n            strokeWidth: 0\n        },\n        label: {\n            text: 'World!',\n            fill: 'white',\n            fontSize: 13\n        }\n    });\n    rect4.addTo(graph);\n\n    var link2 = new joint.shapes.standard.Link();\n    link2.source(rect3);\n    link2.target(rect4);\n    link2.vertices([\n        new g.Point(250, 100),\n        new g.Point(300, 150),\n        new g.Point(350, 200)\n    ]);\n    link2.router('orthogonal');\n    link2.connector('rounded');\n    link2.attr({\n        line: {\n            stroke: 'gray',\n            strokeWidth: 4,\n            strokeDasharray: '4 2',\n            sourceMarker: {\n                'type': 'image',\n                'xlink:href': 'https://cdn3.iconfinder.com/data/icons/49handdrawing/24x24/left.png',\n                'width': 24,\n                'height': 24,\n                'y': -12\n            },\n            targetMarker: {\n                'type': 'image',\n                'xlink:href': 'https://cdn3.iconfinder.com/data/icons/49handdrawing/24x24/left.png',\n                'width': 24,\n                'height': 24,\n                'y': -12\n            }\n        }\n    });\n    link2.addTo(graph);\n\n    var link3 = new joint.shapes.standard.Link();\n    link3.source(rect3);\n    link3.target(rect4);\n    link3.connector('jumpover', { size: 10 });\n    link3.addTo(graph);\n\n    var rect5 = new joint.shapes.standard.Rectangle();\n    rect5.position(100, 230);\n    rect5.resize(100, 40);\n    rect5.attr({\n        body: {\n            fill: '#2ECC71',\n            strokeDasharray: '10,2'\n        },\n        label: {\n            text: 'Hello',\n            fill: 'black',\n            fontSize: 13\n        }\n    });\n    rect5.addTo(graph);\n\n    var rect6 = new joint.shapes.standard.Rectangle();\n    rect6.position(400, 230);\n    rect6.resize(100, 40);\n    rect6.attr({\n        body: {\n            fill: '#F39C12',\n            rx: 20,\n            ry: 20,\n            strokeDasharray: '1,1'\n        },\n        label: {\n            text: 'World!',\n            fill: 'gray',\n            fontSize: 18,\n            fontWeight: 'bold',\n            fontVariant: 'small-caps',\n            textShadow: '1px 1px 1px black'\n        }\n    });\n    rect6.addTo(graph);\n\n    var link4 = new joint.shapes.standard.Link();\n    link4.source(rect5);\n    link4.target(rect6);\n    link4.attr({\n        line: {\n            stroke: '#3498DB',\n            strokeWidth: 3,\n            strokeDasharray: '5 5',\n            strokeDashoffset: 7.5,\n            sourceMarker: {\n                'type': 'path',\n                'stroke': 'none',\n                'fill': '#3498DB',\n                'd': 'M 20 -10 0 0 20 10 Z \\\n                    M 40 -10 20 0 40 10 Z'\n            },\n            targetMarker: {\n                'type': 'path',\n                'stroke': 'none',\n                'fill': '#3498DB',\n                'd': 'M 7.5 -10 2.5 -10 2.5 10 7.5 10 Z \\\n                    M 17.5 -10 12.5 -10 12.5 10 17.5 10 Z \\\n                    M 40 -10 20 0 40 10 Z'\n            }\n        }\n    });\n    link4.addTo(graph);\n}\n\nself.onDataUpdated = function() {\n    \n}\n\nself.onResize = function() {\n    \n}\n\nself.onDestroy = function() {\n}\n",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Link\"}"
    },
    "bundleAlias" : "joint_js",
    "createdTime" : 1698825415207,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "3997d370-788c-11ee-b19f-9d6138fe9e87"
    },
    "tenantId" : {
      "entityType" : "TENANT",
      "id" : "6a594940-e4c5-11ed-8f65-1f1c5e01f03a"
    }
  }, {
    "alias" : "project_design",
    "name" : "Project Design",
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.4/jquery.js"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.js"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.4.1/backbone.js"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/jointjs/3.7.5/joint.js"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/jointjs/3.7.5/joint.css"
      } ],
      "templateHtml" : "<div id=\"paper-container\"></div>\r\n<div id=\"toolbar-container\"></div>\r\n",
      "templateCss" : ":root {\r\n  --accent-color: #0075f2;\r\n  --text-color: #131e29;\r\n  --liquid-color: #f6f740;\r\n}\r\n\r\n/* Switch */\r\n\r\n.jj-switch {\r\n  font-family: sans-serif;\r\n  font-size: 14px;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: white;\r\n  border: 1px solid #cad8e3;\r\n  position: static;\r\n  padding: 3px;\r\n  box-sizing: border-box;\r\n  border-radius: 4px;\r\n  color: var(--text-color);\r\n}\r\n\r\n.jj-switch-label {\r\n  width: 100%;\r\n  text-align: center;\r\n  margin: 0 0 2px 0;\r\n}\r\n\r\n.jj-switch-on {\r\n  background: var(--accent-color);\r\n  color: #dde6ed;\r\n  border-radius: 4px 0 0 4px;\r\n  border: 1px solid var(--accent-color);\r\n  width: 50%;\r\n  height: 22px;\r\n}\r\n\r\n.jj-switch-off {\r\n  background: #131e29;\r\n  color: #dde6ed;\r\n  border-radius: 0 4px 4px 0;\r\n  border: 1px solid #131e29;\r\n  width: 50%;\r\n  height: 22px;\r\n}\r\n.jj-switch-on:disabled,\r\n.jj-switch-off:disabled {\r\n  background: #f2f5f8;\r\n  color: #cad8e3;\r\n  border: 1px solid #cad8e3;\r\n}\r\n\r\n/* Checkbox */\r\n\r\n.jj-checkbox {\r\n  width: 100%;\r\n  height: 100%;\r\n  background: white;\r\n  border: 1px solid #cad8e3;\r\n  position: static;\r\n  box-sizing: border-box;\r\n  border-radius: 4px;\r\n}\r\n\r\n.jj-checkbox-input {\r\n  accent-color: var(--accent-color);\r\n}\r\n\r\n/* Slider */\r\n\r\n.jj-slider {\r\n  font-family: sans-serif;\r\n  font-size: 14px;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: white;\r\n  border: 1px solid #cad8e3;\r\n  position: static;\r\n  box-sizing: border-box;\r\n  border-radius: 4px;\r\n  padding: 3px;\r\n  color: var(--text-color);\r\n}\r\n\r\n.jj-slider-input {\r\n  accent-color: var(--accent-color);\r\n}\r\n\r\n.jj-slider-label {\r\n  width: 100%;\r\n  text-align: center;\r\n  white-space: pre;\r\n}\r\n\r\n.jj-slider-output {\r\n  width: 100%;\r\n  text-align: center;\r\n  white-space: pre;\r\n  display: block;\r\n  font-size: 11px;\r\n  color: #40668c;\r\n}\r\n\r\n/* Application */\r\n\r\n#paper-container {\r\n  position: absolute;\r\n  inset: 0 0 0 0;\r\n}\r\n\r\n#logo {\r\n  position: absolute;\r\n  top: 20px;\r\n  right: 0;\r\n}\r\n\r\n#toolbar-container {\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 10px;\r\n  font-family: sans-serif;\r\n  color: var(--text-color);\r\n  accent-color: var(--accent-color);\r\n}\r\n\r\n#toolbar-container [data-name=\"title\"] {\r\n  font-weight: 900;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* default chart JS configureation CSS End */",
      "controllerScript" : "self.onInit = function() {\n    \n    \n}\n\nself.onDataUpdated = function() {\n   \n}\n\nself.onResize = function() {\n    \n}\n\nself.onDestroy = function() {\n}\n",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Project Design\"}"
    },
    "bundleAlias" : "joint_js",
    "createdTime" : 1699246476457,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "95a7c990-7c60-11ee-bcfb-9d6138fe9e87"
    },
    "tenantId" : {
      "entityType" : "TENANT",
      "id" : "6a594940-e4c5-11ed-8f65-1f1c5e01f03a"
    }
  }, {
    "alias" : "scada",
    "name" : "SCADA",
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 12,
      "sizeY" : 10,
      "resources" : [ {
        "url" : "https://resources.jointjs.com/demos/rappid/build/package/rappid.css"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.4.0/backbone-min.js"
      }, {
        "url" : "https://resources.jointjs.com/demos/rappid/build/package/rappid.js"
      } ],
      "templateHtml" : "<div id=\"paper-container\"></div>\r\n<div id=\"toolbar-container\"></div>\r\n",
      "templateCss" : "/*------------- JOINT JS STSRT------------*/\r\n:root {\r\n  --accent-color: #0075f2;\r\n  --text-color: #131e29;\r\n  --liquid-color: #f6f740;\r\n}\r\n\r\n/* Switch */\r\n\r\n.jj-switch {\r\n  font-family: sans-serif;\r\n  font-size: 14px;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: white;\r\n  border: 1px solid #cad8e3;\r\n  position: static;\r\n  padding: 3px;\r\n  box-sizing: border-box;\r\n  border-radius: 4px;\r\n  color: var(--text-color);\r\n}\r\n\r\n.jj-switch-label {\r\n  width: 100%;\r\n  text-align: center;\r\n  margin: 0 0 2px 0;\r\n}\r\n\r\n.jj-switch-on {\r\n  background: var(--accent-color);\r\n  color: #dde6ed;\r\n  border-radius: 4px 0 0 4px;\r\n  border: 1px solid var(--accent-color);\r\n  width: 50%;\r\n  height: 22px;\r\n}\r\n\r\n.jj-switch-off {\r\n  background: #131e29;\r\n  color: #dde6ed;\r\n  border-radius: 0 4px 4px 0;\r\n  border: 1px solid #131e29;\r\n  width: 50%;\r\n  height: 22px;\r\n}\r\n.jj-switch-on:disabled,\r\n.jj-switch-off:disabled {\r\n  background: #f2f5f8;\r\n  color: #cad8e3;\r\n  border: 1px solid #cad8e3;\r\n}\r\n\r\n/* Checkbox */\r\n\r\n.jj-checkbox {\r\n  width: 100%;\r\n  height: 100%;\r\n  background: white;\r\n  border: 1px solid #cad8e3;\r\n  position: static;\r\n  box-sizing: border-box;\r\n  border-radius: 4px;\r\n}\r\n\r\n.jj-checkbox-input {\r\n  accent-color: var(--accent-color);\r\n}\r\n\r\n/* Slider */\r\n\r\n.jj-slider {\r\n  font-family: sans-serif;\r\n  font-size: 14px;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: white;\r\n  border: 1px solid #cad8e3;\r\n  position: static;\r\n  box-sizing: border-box;\r\n  border-radius: 4px;\r\n  padding: 3px;\r\n  color: var(--text-color);\r\n}\r\n\r\n.jj-slider-input {\r\n  accent-color: var(--accent-color);\r\n}\r\n\r\n.jj-slider-label {\r\n  width: 100%;\r\n  text-align: center;\r\n  white-space: pre;\r\n}\r\n\r\n.jj-slider-output {\r\n  width: 100%;\r\n  text-align: center;\r\n  white-space: pre;\r\n  display: block;\r\n  font-size: 11px;\r\n  color: #40668c;\r\n}\r\n\r\n/* Application */\r\n\r\n#paper-container {\r\n  position: absolute;\r\n  inset: 0 0 0 0;\r\n}\r\n\r\n#logo {\r\n  position: absolute;\r\n  top: 20px;\r\n  right: 0;\r\n}\r\n\r\n#toolbar-container {\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 10px;\r\n  font-family: sans-serif;\r\n  color: var(--text-color);\r\n  accent-color: var(--accent-color);\r\n}\r\n\r\n#toolbar-container [data-name=\"title\"] {\r\n  font-weight: 900;\r\n}\r\n\r\n/*----------- JOINT JS END-------------*/",
      "controllerScript" : "self.onInit = function() {\n\tconst {\n\t\tdia,\n\t\tshapes,\n\t\tutil,\n\t\tui\n\t} = joint;\n\tconsole.log(\"-\", joint);\n\tconst paperContainerEl = document.getElementById(\"paper-container\");\n\tconst toolbarContainerEl = document.getElementById(\"toolbar-container\");\n\n\t// Custom view flags\n\tconst POWER_FLAG = \"POWER\";\n\tconst LIGHT_FLAG = \"LIGHT\";\n\tconst FLOW_FLAG = \"FLOW\";\n\tconst OPEN_FLAG = \"OPEN\";\n\n\t// Constants\n\tconst LIQUID_COLOR = \"#0EAD69\";\n\tconst MAX_LIQUID_COLOR = \"#ED2637\";\n\tconst MIN_LIQUID_COLOR = \"#FFD23F\";\n\tconst START_LIQUID = 70;\n\tconst PRESSURE_COLOR = \"#1446A0\";\n\tconst MAX_PRESSURE_COLOR = \"#ED2637\";\n\n\tdocument.documentElement.style.setProperty(\"--liquid-color\", LIQUID_COLOR);\n\n\t// Pump metrics\n\tconst r = 30;\n\tconst d = 10;\n\tconst l = (3 * r) / 4;\n\tconst step = 20;\n\tconsole.log(\"dia\", joint);\n\n\tclass Motor extends dia.Element {\n\t\tdefaults() {\n\t\t\treturn {\n\t\t\t\t...super.defaults,\n\t\t\t\ttype: \"Motor\",\n\t\t\t\tsize: {\n\t\t\t\t\twidth: 50,\n\t\t\t\t\theight: 80\n\t\t\t\t},\n\t\t\t\tattrs: {\n\t\t\t\t\tbody: {\n\t\t\t\t\t\twidth: 'calc(w)',\n\t\t\t\t\t\theight: 'calc(h)',\n\t\t\t\t\t\tstroke: 'black',\n\t\t\t\t\t\trx: 10,\n\t\t\t\t\t\try: 20,\n\t\t\t\t\t\tfill: {\n\t\t\t\t\t\t\ttype: \"linearGradient\",\n\t\t\t\t\t\t\tstops: [{\n\t\t\t\t\t\t\t\t\toffset: \"0%\",\n\t\t\t\t\t\t\t\t\tcolor: \"gray\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\toffset: \"30%\",\n\t\t\t\t\t\t\t\t\tcolor: \"white\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\toffset: \"70%\",\n\t\t\t\t\t\t\t\t\tcolor: \"white\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\toffset: \"100%\",\n\t\t\t\t\t\t\t\t\tcolor: \"gray\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tlabel: {\n\t\t\t\t\t\ttext: \"Motor Name\",\n\t\t\t\t\t\ttextAnchor: \"middle\",\n\t\t\t\t\t\ttextVerticalAnchor: \"bottom\",\n\t\t\t\t\t\tx: \"calc(w / 2)\",\n\t\t\t\t\t\ty: -10,\n\t\t\t\t\t\tfontSize: 14,\n\t\t\t\t\t\tfontFamily: \"sans-serif\",\n\t\t\t\t\t\tfill: \"#350100\"\n\t\t\t\t\t},\n\t\t\t\t\tstrip: { // tupi\n\t\t\t\t\t\td: \"M 0,0 H calc(w) V calc(h/8) H 0 Z\",\n\t\t\t\t\t\ttransform: \"translate(0, calc(h / 5))\",\n\t\t\t\t\t\tstroke: \"#333\",\n\t\t\t\t\t\tstrokeWidth: 1,\n\t\t\t\t\t\trx: 5,\n\t\t\t\t\t\try: 5,\n\t\t\t\t\t\tfill: \"none\"\n\t\t\t\t\t},\n\t\t\t\t\trotor: {\n\t\t\t\t\t\td: \"M 0 0 H calc(w /6) V calc(h/4) H 0 Z\",\n\t\t\t\t\t\ttransform: \"translate(calc(w / 2.5) , calc(h))\",\n\t\t\t\t\t\tstroke: \"#333\",\n\t\t\t\t\t\tstrokeWidth: 2,\n\t\t\t\t\t\trx: 5,\n\t\t\t\t\t\try: 5,\n\t\t\t\t\t\tfill: \"none\"\n\t\t\t\t\t},\n\t\t\t\t\tckt: {\n\t\t\t\t\t\twidth: 'calc(w/2)',\n\t\t\t\t\t\theight: 'calc(h/2)',\n\t\t\t\t\t\ttransform: \"translate(calc(w / 4) , calc(h/2.6))\",\n\t\t\t\t\t\tstroke: \"#333\",\n\t\t\t\t\t\tstrokeWidth: 2,\n\t\t\t\t\t\trx: 5,\n\t\t\t\t\t\try: 5,\n\t\t\t\t\t\tfill: \"none\"\n\t\t\t\t\t},\n\t\t\t\t\tr_status: {\n\t\t\t\t\t\twidth: 'calc(w/4)',\n\t\t\t\t\t\theight: 'calc(h/6)',\n\t\t\t\t\t\ttransform: \"translate(calc(w / 2.7) , calc(h/2.6))\",\n\t\t\t\t\t\tstroke: \"#333\",\n\t\t\t\t\t\tstrokeWidth: 1,\n\t\t\t\t\t\trx: 5,\n\t\t\t\t\t\try: 5,\n\t\t\t\t\t\tfill: \"red\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\tpreinitialize() {\n\t\t\tthis.markup = util.svg /* xml */ `\n            <text @selector=\"label\" />\n            <rect @selector=\"body\" />\n            <path @selector=\"strip\" />\n            <rect @selector=\"ckt\" />\n            <rect @selector=\"r_status\" />\n            <path @selector=\"rotor\" />\n        `;\n\t\t}\n\n\t}\n\n\tclass Pump extends dia.Element {\n\t\tdefaults() {\n\t\t\treturn {\n\t\t\t\t...super.defaults,\n\t\t\t\ttype: \"Pump\",\n\t\t\t\tsize: {\n\t\t\t\t\twidth: 100,\n\t\t\t\t\theight: 100\n\t\t\t\t},\n\t\t\t\tpower: 0,\n\t\t\t\tattrs: {\n\t\t\t\t\troot: {\n\t\t\t\t\t\tmagnetSelector: \"body\"\n\t\t\t\t\t},\n\t\t\t\t\tbody: {\n\t\t\t\t\t\trx: \"calc(w / 2)\",\n\t\t\t\t\t\try: \"calc(h / 2)\",\n\t\t\t\t\t\tcx: \"calc(w / 2)\",\n\t\t\t\t\t\tcy: \"calc(h / 2)\",\n\t\t\t\t\t\tstroke: \"gray\",\n\t\t\t\t\t\tstrokeWidth: 2,\n\t\t\t\t\t\tfill: \"lightgray\"\n\t\t\t\t\t},\n\t\t\t\t\tlabel: {\n\t\t\t\t\t\ttext: \"Pump\",\n\t\t\t\t\t\ttextAnchor: \"middle\",\n\t\t\t\t\t\ttextVerticalAnchor: \"top\",\n\t\t\t\t\t\tx: \"calc(0.5*w)\",\n\t\t\t\t\t\ty: \"calc(h+10)\",\n\t\t\t\t\t\tfontSize: 14,\n\t\t\t\t\t\tfontFamily: \"sans-serif\",\n\t\t\t\t\t\tfill: \"#350100\"\n\t\t\t\t\t},\n\t\t\t\t\trotorGroup: {\n\t\t\t\t\t\ttransform: \"translate(calc(w/2),calc(h/2))\",\n\t\t\t\t\t\tevent: \"element:power:click\",\n\t\t\t\t\t\tcursor: \"pointer\"\n\t\t\t\t\t},\n\t\t\t\t\trotorFrame: {\n\t\t\t\t\t\tr: 40,\n\t\t\t\t\t\tfill: \"#eee\",\n\t\t\t\t\t\tstroke: \"#666\",\n\t\t\t\t\t\tstrokeWidth: 2\n\t\t\t\t\t},\n\t\t\t\t\trotorBackground: {\n\t\t\t\t\t\tr: 34,\n\t\t\t\t\t\tfill: \"#777\",\n\t\t\t\t\t\tstroke: \"#222\",\n\t\t\t\t\t\tstrokeWidth: 1,\n\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\ttransition: \"fill 0.5s ease-in-out\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\trotor: {\n\t\t\t\t\t\t// d: `M ${a} ${a} ${b} ${r} -${b} ${r} -${a} ${a} -${r} ${b} -${r} -${b} -${a} -${a} -${b} -${r} ${b} -${r} ${a} -${a} ${r} -${b} ${r} ${b} Z`,\n\t\t\t\t\t\td: `M 0 0 V ${r} l ${-d} ${-l} Z M 0 0 V ${-r} l ${d} ${l} Z M 0 0 H ${r} l ${-l} ${d} Z M 0 0 H ${-r} l ${l} ${-d} Z`,\n\t\t\t\t\t\tstroke: \"#222\",\n\t\t\t\t\t\tstrokeWidth: 3,\n\t\t\t\t\t\tfill: \"#bbb\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tports: {\n\t\t\t\t\tgroups: {\n\t\t\t\t\t\tpipes: {\n\t\t\t\t\t\t\tposition: {\n\t\t\t\t\t\t\t\tname: \"line\",\n\t\t\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\t\t\tstart: {\n\t\t\t\t\t\t\t\t\t\tx: \"calc(w / 2)\",\n\t\t\t\t\t\t\t\t\t\ty: \"calc(h)\"\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tend: {\n\t\t\t\t\t\t\t\t\t\tx: \"calc(w / 2)\",\n\t\t\t\t\t\t\t\t\t\ty: 0\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmarkup: util.svg`\n                            <rect @selector=\"pipeBody\" />\n                            <rect @selector=\"pipeEnd\" />\n                        `,\n\t\t\t\t\t\t\tsize: {\n\t\t\t\t\t\t\t\twidth: 80,\n\t\t\t\t\t\t\t\theight: 30\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tattrs: {\n\t\t\t\t\t\t\t\tportRoot: {\n\t\t\t\t\t\t\t\t\tmagnetSelector: \"pipeEnd\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tpipeBody: {\n\t\t\t\t\t\t\t\t\twidth: \"calc(w)\",\n\t\t\t\t\t\t\t\t\theight: \"calc(h)\",\n\t\t\t\t\t\t\t\t\ty: \"calc(h / -2)\",\n\t\t\t\t\t\t\t\t\tfill: {\n\t\t\t\t\t\t\t\t\t\ttype: \"linearGradient\",\n\t\t\t\t\t\t\t\t\t\tstops: [{\n\t\t\t\t\t\t\t\t\t\t\t\toffset: \"0%\",\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: \"gray\"\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\toffset: \"30%\",\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: \"white\"\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\toffset: \"70%\",\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: \"white\"\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\toffset: \"100%\",\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: \"gray\"\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\tattrs: {\n\t\t\t\t\t\t\t\t\t\t\tx1: \"0%\",\n\t\t\t\t\t\t\t\t\t\t\ty1: \"0%\",\n\t\t\t\t\t\t\t\t\t\t\tx2: \"0%\",\n\t\t\t\t\t\t\t\t\t\t\ty2: \"100%\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tpipeEnd: {\n\t\t\t\t\t\t\t\t\twidth: 10,\n\t\t\t\t\t\t\t\t\theight: \"calc(h+6)\",\n\t\t\t\t\t\t\t\t\ty: \"calc(h / -2 - 3)\",\n\t\t\t\t\t\t\t\t\tstroke: \"gray\",\n\t\t\t\t\t\t\t\t\tstrokeWidth: 3,\n\t\t\t\t\t\t\t\t\tfill: \"white\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\titems: [{\n\t\t\t\t\t\t\tid: \"left\",\n\t\t\t\t\t\t\tgroup: \"pipes\",\n\t\t\t\t\t\t\tz: 1,\n\t\t\t\t\t\t\tattrs: {\n\t\t\t\t\t\t\t\tpipeBody: {\n\t\t\t\t\t\t\t\t\tx: \"calc(-1 * w)\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tpipeEnd: {\n\t\t\t\t\t\t\t\t\tx: \"calc(-1 * w)\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: \"right\",\n\t\t\t\t\t\t\tgroup: \"pipes\",\n\t\t\t\t\t\t\tz: 0,\n\t\t\t\t\t\t\tattrs: {\n\t\t\t\t\t\t\t\tpipeEnd: {\n\t\t\t\t\t\t\t\t\tx: \"calc(w - 10)\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tpreinitialize() {\n\t\t\tthis.markup = util.svg /* xml */ `\n            <ellipse @selector=\"body\" />\n            <g @selector=\"rotorGroup\">\n                <circle @selector=\"rotorFrame\" />\n                <circle @selector=\"rotorBackground\" />\n                <path @selector=\"rotor\" />\n            </g>\n            <text @selector=\"label\" />\n        `;\n\t\t}\n\n\t\tget power() {\n\t\t\treturn this.get(\"power\") || 0;\n\t\t}\n\n\t\tset power(value) {\n\t\t\tthis.set(\"power\", value);\n\t\t}\n\t}\n\tconst PumpView = dia.ElementView.extend({\n\t\tpresentationAttributes: dia.ElementView.addPresentationAttributes({\n\t\t\tpower: [POWER_FLAG]\n\t\t}),\n\n\t\tinitFlag: [dia.ElementView.Flags.RENDER, POWER_FLAG],\n\n\t\tpowerAnimation: null,\n\n\t\tconfirmUpdate(...args) {\n\t\t\tlet flags = dia.ElementView.prototype.confirmUpdate.call(this, ...args);\n\t\t\tif (this.hasFlag(flags, POWER_FLAG)) {\n\t\t\t\tthis.togglePower();\n\t\t\t\tflags = this.removeFlag(flags, POWER_FLAG);\n\t\t\t}\n\t\t\treturn flags;\n\t\t},\n\n\t\tgetSpinAnimation() {\n\t\t\tlet {\n\t\t\t\tspinAnimation\n\t\t\t} = this;\n\t\t\tif (spinAnimation) return spinAnimation;\n\t\t\tconst [rotorEl] = this.findBySelector(\"rotor\");\n\t\t\t// It's important to use start and end frames to make it work in Safari.\n\t\t\tconst keyframes = {\n\t\t\t\ttransform: [\"rotate(0deg)\", \"rotate(360deg)\"]\n\t\t\t};\n\t\t\tspinAnimation = rotorEl.animate(keyframes, {\n\t\t\t\tfill: \"forwards\",\n\t\t\t\tduration: 1000,\n\t\t\t\titerations: Infinity\n\t\t\t});\n\t\t\tthis.spinAnimation = spinAnimation;\n\t\t\treturn spinAnimation;\n\t\t},\n\n\t\ttogglePower() {\n\t\t\tconst {\n\t\t\t\tmodel\n\t\t\t} = this;\n\t\t\tthis.getSpinAnimation().playbackRate = model.power;\n\t\t}\n\t});\n\n\tclass PumpFan extends dia.Element {\n\t\tdefaults() {\n\t\t\treturn {\n\t\t\t\t...super.defaults,\n\t\t\t\ttype: \"PumpFan\",\n\t\t\t\tsize: {\n\t\t\t\t\twidth: 100,\n\t\t\t\t\theight: 100\n\t\t\t\t},\n\t\t\t\tpower: 0,\n\t\t\t\tattrs: {\n\t\t\t\t\troot: {\n\t\t\t\t\t\tmagnetSelector: \"body\"\n\t\t\t\t\t},\n\t\t\t\t\t// body: {\n\t\t\t\t\t//   rx: \"calc(w / 2)\",\n\t\t\t\t\t//   ry: \"calc(h / 2)\",\n\t\t\t\t\t//   cx: \"calc(w / 2)\",\n\t\t\t\t\t//   cy: \"calc(h / 2)\",\n\t\t\t\t\t//   stroke: \"gray\",\n\t\t\t\t\t//   strokeWidth: 2,\n\t\t\t\t\t//   fill: \"lightgray\"\n\t\t\t\t\t// },\n\t\t\t\t\t// label: {\n\t\t\t\t\t//   text: \"Pump\",\n\t\t\t\t\t//   textAnchor: \"middle\",\n\t\t\t\t\t//   textVerticalAnchor: \"top\",\n\t\t\t\t\t//   x: \"calc(0.5*w)\",\n\t\t\t\t\t//   y: \"calc(h+10)\",\n\t\t\t\t\t//   fontSize: 14,\n\t\t\t\t\t//   fontFamily: \"sans-serif\",\n\t\t\t\t\t//   fill: \"#350100\"\n\t\t\t\t\t// },\n\t\t\t\t\trotorGroup: {\n\t\t\t\t\t\ttransform: \"translate(calc(w/2),calc(h/2))\",\n\t\t\t\t\t\tevent: \"element:power:click\",\n\t\t\t\t\t\tcursor: \"pointer\"\n\t\t\t\t\t},\n\t\t\t\t\t// rotorFrame: {\n\t\t\t\t\t//   r: 40,\n\t\t\t\t\t//   fill: \"#eee\",\n\t\t\t\t\t//   stroke: \"#666\",\n\t\t\t\t\t//   strokeWidth: 2\n\t\t\t\t\t// },\n\t\t\t\t\t// rotorBackground: {\n\t\t\t\t\t//   r: 34,\n\t\t\t\t\t//   fill: \"#777\",\n\t\t\t\t\t//   stroke: \"#222\",\n\t\t\t\t\t//   strokeWidth: 1,\n\t\t\t\t\t//   style: {\n\t\t\t\t\t//     transition: \"fill 0.5s ease-in-out\"\n\t\t\t\t\t//   }\n\t\t\t\t\t// },\n\t\t\t\t\trotor: {\n\t\t\t\t\t\t// d: `M ${a} ${a} ${b} ${r} -${b} ${r} -${a} ${a} -${r} ${b} -${r} -${b} -${a} -${a} -${b} -${r} ${b} -${r} ${a} -${a} ${r} -${b} ${r} ${b} Z`,\n\t\t\t\t\t\td: `M 0 0 V ${r} l ${-d} ${-l} Z M 0 0 V ${-r} l ${d} ${l} Z M 0 0 H ${r} l ${-l} ${d} Z M 0 0 H ${-r} l ${l} ${-d} Z`,\n\t\t\t\t\t\tstroke: \"#222\",\n\t\t\t\t\t\tstrokeWidth: 3,\n\t\t\t\t\t\tfill: \"#bbb\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t//   ports: {\n\t\t\t\t//     groups: {\n\t\t\t\t//       pipes: {\n\t\t\t\t//         position: {\n\t\t\t\t//           name: \"line\",\n\t\t\t\t//           args: {\n\t\t\t\t//             start: { x: \"calc(w / 2)\", y: \"calc(h)\" },\n\t\t\t\t//             end: { x: \"calc(w / 2)\", y: 0 }\n\t\t\t\t//           }\n\t\t\t\t//         },\n\t\t\t\t//         markup: util.svg`\n\t\t\t\t//                         <rect @selector=\"pipeBody\" />\n\t\t\t\t//                         <rect @selector=\"pipeEnd\" />\n\t\t\t\t//                     `,\n\t\t\t\t//         size: { width: 80, height: 30 },\n\t\t\t\t//         attrs: {\n\t\t\t\t//           portRoot: {\n\t\t\t\t//             magnetSelector: \"pipeEnd\"\n\t\t\t\t//           },\n\t\t\t\t//           pipeBody: {\n\t\t\t\t//             width: \"calc(w)\",\n\t\t\t\t//             height: \"calc(h)\",\n\t\t\t\t//             y: \"calc(h / -2)\",\n\t\t\t\t//             fill: {\n\t\t\t\t//               type: \"linearGradient\",\n\t\t\t\t//               stops: [\n\t\t\t\t//                 { offset: \"0%\", color: \"gray\" },\n\t\t\t\t//                 { offset: \"30%\", color: \"white\" },\n\t\t\t\t//                 { offset: \"70%\", color: \"white\" },\n\t\t\t\t//                 { offset: \"100%\", color: \"gray\" }\n\t\t\t\t//               ],\n\t\t\t\t//               attrs: {\n\t\t\t\t//                 x1: \"0%\",\n\t\t\t\t//                 y1: \"0%\",\n\t\t\t\t//                 x2: \"0%\",\n\t\t\t\t//                 y2: \"100%\"\n\t\t\t\t//               }\n\t\t\t\t//             }\n\t\t\t\t//           },\n\t\t\t\t//           pipeEnd: {\n\t\t\t\t//             width: 10,\n\t\t\t\t//             height: \"calc(h+6)\",\n\t\t\t\t//             y: \"calc(h / -2 - 3)\",\n\t\t\t\t//             stroke: \"gray\",\n\t\t\t\t//             strokeWidth: 3,\n\t\t\t\t//             fill: \"white\"\n\t\t\t\t//           }\n\t\t\t\t//         }\n\t\t\t\t//       }\n\t\t\t\t//     },\n\t\t\t\t//     items: [\n\t\t\t\t//       {\n\t\t\t\t//         id: \"left\",\n\t\t\t\t//         group: \"pipes\",\n\t\t\t\t//         z: 1,\n\t\t\t\t//         attrs: {\n\t\t\t\t//           pipeBody: {\n\t\t\t\t//             x: \"calc(-1 * w)\"\n\t\t\t\t//           },\n\t\t\t\t//           pipeEnd: {\n\t\t\t\t//             x: \"calc(-1 * w)\"\n\t\t\t\t//           }\n\t\t\t\t//         }\n\t\t\t\t//       },\n\t\t\t\t//       {\n\t\t\t\t//         id: \"right\",\n\t\t\t\t//         group: \"pipes\",\n\t\t\t\t//         z: 0,\n\t\t\t\t//         attrs: {\n\t\t\t\t//           pipeEnd: {\n\t\t\t\t//             x: \"calc(w - 10)\"\n\t\t\t\t//           }\n\t\t\t\t//         }\n\t\t\t\t//       }\n\t\t\t\t//     ]\n\t\t\t\t//   }\n\t\t\t};\n\t\t}\n\n\t\tpreinitialize() {\n\t\t\tthis.markup = util.svg /* xml */ `\n            <ellipse @selector=\"body\" />\n            <g @selector=\"rotorGroup\">\n                <circle @selector=\"rotorFrame\" />\n                <circle @selector=\"rotorBackground\" />\n                <path @selector=\"rotor\" />\n            </g>\n            <text @selector=\"label\" />\n        `;\n\t\t}\n\n\t\tget power() {\n\t\t\treturn this.get(\"power\") || 0;\n\t\t}\n\n\t\tset power(value) {\n\t\t\tthis.set(\"power\", value);\n\t\t}\n\t}\n\n\tconst PumpFanView = dia.ElementView.extend({\n\t\tpresentationAttributes: dia.ElementView.addPresentationAttributes({\n\t\t\tpower: [POWER_FLAG]\n\t\t}),\n\n\t\tinitFlag: [dia.ElementView.Flags.RENDER, POWER_FLAG],\n\n\t\tpowerAnimation: null,\n\n\t\tconfirmUpdate(...args) {\n\t\t\tlet flags = dia.ElementView.prototype.confirmUpdate.call(this, ...args);\n\t\t\tif (this.hasFlag(flags, POWER_FLAG)) {\n\t\t\t\tthis.togglePower();\n\t\t\t\tflags = this.removeFlag(flags, POWER_FLAG);\n\t\t\t}\n\t\t\treturn flags;\n\t\t},\n\n\t\tgetSpinAnimation() {\n\t\t\tlet {\n\t\t\t\tspinAnimation\n\t\t\t} = this;\n\t\t\tif (spinAnimation) return spinAnimation;\n\t\t\tconst [rotorEl] = this.findBySelector(\"rotor\");\n\t\t\t// It's important to use start and end frames to make it work in Safari.\n\t\t\tconst keyframes = {\n\t\t\t\ttransform: [\"rotate(0deg)\", \"rotate(360deg)\"]\n\t\t\t};\n\t\t\tspinAnimation = rotorEl.animate(keyframes, {\n\t\t\t\tfill: \"forwards\",\n\t\t\t\tduration: 1000,\n\t\t\t\titerations: Infinity\n\t\t\t});\n\t\t\tthis.spinAnimation = spinAnimation;\n\t\t\treturn spinAnimation;\n\t\t},\n\n\t\ttogglePower() {\n\t\t\tconst {\n\t\t\t\tmodel\n\t\t\t} = this;\n\t\t\tthis.getSpinAnimation().playbackRate = model.power;\n\t\t}\n\t});\n\n\tclass ControlValve extends dia.Element {\n\t\tdefaults() {\n\t\t\treturn {\n\t\t\t\t...super.defaults,\n\t\t\t\ttype: \"ControlValve\",\n\t\t\t\tsize: {\n\t\t\t\t\twidth: 60,\n\t\t\t\t\theight: 60\n\t\t\t\t},\n\t\t\t\topen: 1,\n\t\t\t\tattrs: {\n\t\t\t\t\troot: {\n\t\t\t\t\t\tmagnetSelector: \"body\"\n\t\t\t\t\t},\n\t\t\t\t\tbody: {\n\t\t\t\t\t\trx: \"calc(w / 2)\",\n\t\t\t\t\t\try: \"calc(h / 2)\",\n\t\t\t\t\t\tcx: \"calc(w / 2)\",\n\t\t\t\t\t\tcy: \"calc(h / 2)\",\n\t\t\t\t\t\tstroke: \"gray\",\n\t\t\t\t\t\tstrokeWidth: 2,\n\t\t\t\t\t\tfill: {\n\t\t\t\t\t\t\ttype: \"radialGradient\",\n\t\t\t\t\t\t\tstops: [{\n\t\t\t\t\t\t\t\t\toffset: \"80%\",\n\t\t\t\t\t\t\t\t\tcolor: \"white\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\toffset: \"100%\",\n\t\t\t\t\t\t\t\t\tcolor: \"gray\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tliquid: {\n\t\t\t\t\t\t// We use path instead of rect to make it possible to animate\n\t\t\t\t\t\t// the stroke-dasharray to show the liquid flow.\n\t\t\t\t\t\td: \"M calc(w / 2 + 12) calc(h / 2) h -24\",\n\t\t\t\t\t\tstroke: LIQUID_COLOR,\n\t\t\t\t\t\tstrokeWidth: 24,\n\t\t\t\t\t\tstrokeDasharray: \"3,1\"\n\t\t\t\t\t},\n\t\t\t\t\tcover: {\n\t\t\t\t\t\tx: \"calc(w / 2 - 12)\",\n\t\t\t\t\t\ty: \"calc(h / 2 - 12)\",\n\t\t\t\t\t\twidth: 24,\n\t\t\t\t\t\theight: 24,\n\t\t\t\t\t\tstroke: \"#333\",\n\t\t\t\t\t\tstrokeWidth: 2,\n\t\t\t\t\t\tfill: \"#fff\"\n\t\t\t\t\t},\n\t\t\t\t\tcoverFrame: {\n\t\t\t\t\t\tx: \"calc(w / 2 - 15)\",\n\t\t\t\t\t\ty: \"calc(h / 2 - 15)\",\n\t\t\t\t\t\twidth: 30,\n\t\t\t\t\t\theight: 30,\n\t\t\t\t\t\tstroke: \"#777\",\n\t\t\t\t\t\tstrokeWidth: 2,\n\t\t\t\t\t\tfill: \"none\",\n\t\t\t\t\t\trx: 1,\n\t\t\t\t\t\try: 1\n\t\t\t\t\t},\n\t\t\t\t\tstem: { // tupi pipe\n\t\t\t\t\t\twidth: 10,\n\t\t\t\t\t\theight: 30,\n\t\t\t\t\t\tx: \"calc(w / 2 - 5)\",\n\t\t\t\t\t\ty: -30,\n\t\t\t\t\t\tstroke: \"#333\",\n\t\t\t\t\t\tstrokeWidth: 2,\n\t\t\t\t\t\tfill: \"#555\"\n\t\t\t\t\t},\n\t\t\t\t\tcontrol: { // tupi\n\t\t\t\t\t\td: \"M 0 0 C 0 -30 60 -30 60 0 Z\",\n\t\t\t\t\t\ttransform: \"translate(calc(w / 2 - 30), -20)\",\n\t\t\t\t\t\tstroke: \"#333\",\n\t\t\t\t\t\tstrokeWidth: 2,\n\t\t\t\t\t\trx: 5,\n\t\t\t\t\t\try: 5,\n\t\t\t\t\t\tfill: \"#666\"\n\t\t\t\t\t},\n\t\t\t\t\tlabel: {\n\t\t\t\t\t\ttext: \"Valve\",\n\t\t\t\t\t\ttextAnchor: \"middle\",\n\t\t\t\t\t\ttextVerticalAnchor: \"top\",\n\t\t\t\t\t\tx: \"calc(0.5*w)\",\n\t\t\t\t\t\ty: \"calc(h+10)\",\n\t\t\t\t\t\tfontSize: 14,\n\t\t\t\t\t\tfontFamily: \"sans-serif\",\n\t\t\t\t\t\tfill: \"#350100\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tports: {\n\t\t\t\t\tgroups: {\n\t\t\t\t\t\tpipes: {\n\t\t\t\t\t\t\tposition: {\n\t\t\t\t\t\t\t\tname: \"absolute\",\n\t\t\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\t\t\tx: \"calc(w / 2)\",\n\t\t\t\t\t\t\t\t\ty: \"calc(h / 2)\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmarkup: util.svg`\n                          <rect @selector=\"pipeBody\" />\n                          <rect @selector=\"pipeEnd\" />\n                      `,\n\t\t\t\t\t\t\tsize: {\n\t\t\t\t\t\t\t\twidth: 50,\n\t\t\t\t\t\t\t\theight: 30\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tattrs: {\n\t\t\t\t\t\t\t\tportRoot: {\n\t\t\t\t\t\t\t\t\tmagnetSelector: \"pipeEnd\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tpipeBody: {\n\t\t\t\t\t\t\t\t\twidth: \"calc(w)\",\n\t\t\t\t\t\t\t\t\theight: \"calc(h)\",\n\t\t\t\t\t\t\t\t\ty: \"calc(h / -2)\",\n\t\t\t\t\t\t\t\t\tfill: {\n\t\t\t\t\t\t\t\t\t\ttype: \"linearGradient\",\n\t\t\t\t\t\t\t\t\t\tstops: [{\n\t\t\t\t\t\t\t\t\t\t\t\toffset: \"0%\",\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: \"gray\"\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\toffset: \"30%\",\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: \"white\"\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\toffset: \"70%\",\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: \"white\"\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\toffset: \"100%\",\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: \"gray\"\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\tattrs: {\n\t\t\t\t\t\t\t\t\t\t\tx1: \"0%\",\n\t\t\t\t\t\t\t\t\t\t\ty1: \"0%\",\n\t\t\t\t\t\t\t\t\t\t\tx2: \"0%\",\n\t\t\t\t\t\t\t\t\t\t\ty2: \"100%\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tpipeEnd: {\n\t\t\t\t\t\t\t\t\twidth: 10,\n\t\t\t\t\t\t\t\t\theight: \"calc(h+6)\",\n\t\t\t\t\t\t\t\t\ty: \"calc(h / -2 - 3)\",\n\t\t\t\t\t\t\t\t\tstroke: \"gray\",\n\t\t\t\t\t\t\t\t\tstrokeWidth: 3,\n\t\t\t\t\t\t\t\t\tfill: \"white\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\titems: [{\n\t\t\t\t\t\t\tid: \"left\",\n\t\t\t\t\t\t\tgroup: \"pipes\",\n\t\t\t\t\t\t\tz: 0,\n\t\t\t\t\t\t\tattrs: {\n\t\t\t\t\t\t\t\tpipeBody: {\n\t\t\t\t\t\t\t\t\tx: \"calc(-1 * w)\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tpipeEnd: {\n\t\t\t\t\t\t\t\t\tx: \"calc(-1 * w)\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: \"right\",\n\t\t\t\t\t\t\tgroup: \"pipes\",\n\t\t\t\t\t\t\tz: 0,\n\t\t\t\t\t\t\tattrs: {\n\t\t\t\t\t\t\t\tpipeEnd: {\n\t\t\t\t\t\t\t\t\tx: \"calc(w - 10)\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tpreinitialize() {\n\t\t\tthis.markup = util.svg /* xml */ `\n          <rect @selector=\"stem\" />\n          <path @selector=\"control\" />\n          <ellipse @selector=\"body\" />\n          <rect @selector=\"coverFrame\" />\n          <path @selector=\"liquid\" />\n          <rect @selector=\"cover\" />\n          <text @selector=\"label\" />\n      `;\n\t\t}\n\t}\n\n\tconst ControlValveView = dia.ElementView.extend({\n\t\tpresentationAttributes: dia.ElementView.addPresentationAttributes({\n\t\t\topen: [OPEN_FLAG]\n\t\t}),\n\n\t\tinitFlag: [dia.ElementView.Flags.RENDER, OPEN_FLAG],\n\n\t\tframePadding: 6,\n\n\t\tliquidAnimation: null,\n\n\t\tconfirmUpdate(...args) {\n\t\t\tlet flags = dia.ElementView.prototype.confirmUpdate.call(this, ...args);\n\t\t\tthis.animateLiquid();\n\t\t\tif (this.hasFlag(flags, OPEN_FLAG)) {\n\t\t\t\tthis.updateCover();\n\t\t\t\tflags = this.removeFlag(flags, OPEN_FLAG);\n\t\t\t}\n\t\t\treturn flags;\n\t\t},\n\n\t\tupdateCover() {\n\t\t\tconst {\n\t\t\t\tmodel\n\t\t\t} = this;\n\t\t\tconst opening = Math.max(0, Math.min(1, model.get(\"open\") || 0));\n\t\t\tconst [coverEl] = this.findBySelector(\"cover\");\n\t\t\tconst [coverFrameEl] = this.findBySelector(\"coverFrame\");\n\t\t\tconst frameWidth =\n\t\t\t\tNumber(coverFrameEl.getAttribute(\"width\")) - this.framePadding;\n\t\t\tconst width = Math.round(frameWidth * (1 - opening));\n\t\t\tcoverEl.animate({\n\t\t\t\twidth: [`${width}px`]\n\t\t\t}, {\n\t\t\t\tfill: \"forwards\",\n\t\t\t\tduration: 200\n\t\t\t});\n\t\t},\n\n\t\tanimateLiquid() {\n\t\t\tif (this.liquidAnimation) return;\n\t\t\tconst [liquidEl] = this.findBySelector(\"liquid\");\n\t\t\tthis.liquidAnimation = liquidEl.animate({\n\t\t\t\t// 24 matches the length of the liquid path\n\t\t\t\tstrokeDashoffset: [0, 24]\n\t\t\t}, {\n\t\t\t\tfill: \"forwards\",\n\t\t\t\titerations: Infinity,\n\t\t\t\tduration: 3000\n\t\t\t});\n\t\t}\n\t});\n\n\tclass HandValve extends dia.Element {\n\t\tdefaults() {\n\t\t    \n\t\t\treturn {\n\t\t\t\t...super.defaults,\n\t\t\t\ttype: \"HandValve\",\n\t\t\t\tsize: {\n\t\t\t\t\twidth: 50,\n\t\t\t\t\theight: 50\n\t\t\t\t},\n\t\t\t\tpower: 0,\n\t\t\t\tattrs: {\n\t\t\t\t\troot: {\n\t\t\t\t\t\tmagnetSelector: \"body\"\n\t\t\t\t\t},\n\t\t\t\t\tbody: {\n\t\t\t\t\t\trx: \"calc(w / 2)\",\n\t\t\t\t\t\try: \"calc(h / 2)\",\n\t\t\t\t\t\tcx: \"calc(w / 2)\",\n\t\t\t\t\t\tcy: \"calc(h / 2)\",\n\t\t\t\t\t\tstroke: \"gray\",\n\t\t\t\t\t\tstrokeWidth: 2,\n\t\t\t\t\t\tfill: {\n\t\t\t\t\t\t\ttype: \"radialGradient\",\n\t\t\t\t\t\t\tstops: [{\n\t\t\t\t\t\t\t\t\toffset: \"70%\",\n\t\t\t\t\t\t\t\t\tcolor: \"white\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\toffset: \"100%\",\n\t\t\t\t\t\t\t\t\tcolor: \"gray\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tstem: {\n\t\t\t\t\t\twidth: 10,\n\t\t\t\t\t\theight: 30,\n\t\t\t\t\t\tx: \"calc(w / 2 - 5)\",\n\t\t\t\t\t\ty: -30,\n\t\t\t\t\t\tstroke: \"#333\",\n\t\t\t\t\t\tstrokeWidth: 2,\n\t\t\t\t\t\tfill: \"#555\"\n\t\t\t\t\t},\n\t\t\t\t\thandwheel: {\n\t\t\t\t\t\twidth: 60,\n\t\t\t\t\t\theight: 10,\n\t\t\t\t\t\tx: \"calc(w / 2 - 30)\",\n\t\t\t\t\t\ty: -30,\n\t\t\t\t\t\tstroke: \"#333\",\n\t\t\t\t\t\tstrokeWidth: 2,\n\t\t\t\t\t\trx: 5,\n\t\t\t\t\t\try: 5,\n\t\t\t\t\t\tfill: \"#666\"\n\t\t\t\t\t},\n\t\t\t\t\tlabel: {\n\t\t\t\t\t\ttext: \"Valve\",\n\t\t\t\t\t\ttextAnchor: \"middle\",\n\t\t\t\t\t\ttextVerticalAnchor: \"top\",\n\t\t\t\t\t\tx: \"calc(0.5*w)\",\n\t\t\t\t\t\ty: \"calc(h+10)\",\n\t\t\t\t\t\tfontSize: \"14\",\n\t\t\t\t\t\tfontFamily: \"sans-serif\",\n\t\t\t\t\t\tfill: \"#350100\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tports: {\n\t\t\t\t\tgroups: {\n\t\t\t\t\t\tpipes: {\n\t\t\t\t\t\t\tposition: {\n\t\t\t\t\t\t\t\tname: \"absolute\",\n\t\t\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\t\t\tx: \"calc(w / 2)\",\n\t\t\t\t\t\t\t\t\ty: \"calc(h / 2)\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmarkup: util.svg`\n                          <rect @selector=\"pipeBody\" />\n                          <rect @selector=\"pipeEnd\" />\n                      `,\n\t\t\t\t\t\t\tsize: {\n\t\t\t\t\t\t\t\twidth: 50,\n\t\t\t\t\t\t\t\theight: 30\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tattrs: {\n\t\t\t\t\t\t\t\tportRoot: {\n\t\t\t\t\t\t\t\t\tmagnetSelector: \"pipeEnd\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tpipeBody: {\n\t\t\t\t\t\t\t\t\twidth: \"calc(w)\",\n\t\t\t\t\t\t\t\t\theight: \"calc(h)\",\n\t\t\t\t\t\t\t\t\ty: \"calc(h / -2)\",\n\t\t\t\t\t\t\t\t\tfill: {\n\t\t\t\t\t\t\t\t\t\ttype: \"linearGradient\",\n\t\t\t\t\t\t\t\t\t\tstops: [{\n\t\t\t\t\t\t\t\t\t\t\t\toffset: \"0%\",\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: \"gray\"\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\toffset: \"30%\",\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: \"white\"\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\toffset: \"70%\",\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: \"white\"\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\toffset: \"100%\",\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: \"gray\"\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\tattrs: {\n\t\t\t\t\t\t\t\t\t\t\tx1: \"0%\",\n\t\t\t\t\t\t\t\t\t\t\ty1: \"0%\",\n\t\t\t\t\t\t\t\t\t\t\tx2: \"0%\",\n\t\t\t\t\t\t\t\t\t\t\ty2: \"100%\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tpipeEnd: {\n\t\t\t\t\t\t\t\t\twidth: 10,\n\t\t\t\t\t\t\t\t\theight: \"calc(h+6)\",\n\t\t\t\t\t\t\t\t\ty: \"calc(h / -2 - 3)\",\n\t\t\t\t\t\t\t\t\tstroke: \"gray\",\n\t\t\t\t\t\t\t\t\tstrokeWidth: 3,\n\t\t\t\t\t\t\t\t\tfill: \"white\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\titems: [{\n\t\t\t\t\t\t\tid: \"left\",\n\t\t\t\t\t\t\tgroup: \"pipes\",\n\t\t\t\t\t\t\tz: 0,\n\t\t\t\t\t\t\tattrs: {\n\t\t\t\t\t\t\t\tpipeBody: {\n\t\t\t\t\t\t\t\t\tx: \"calc(-1 * w)\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tpipeEnd: {\n\t\t\t\t\t\t\t\t\tx: \"calc(-1 * w)\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: \"right\",\n\t\t\t\t\t\t\tgroup: \"pipes\",\n\t\t\t\t\t\t\tz: 0,\n\t\t\t\t\t\t\tattrs: {\n\t\t\t\t\t\t\t\tpipeEnd: {\n\t\t\t\t\t\t\t\t\tx: \"calc(w - 10)\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tpreinitialize() {\n\t\t\tthis.markup = util.svg /* xml */ `\n          <rect @selector=\"stem\" />\n          <rect @selector=\"handwheel\" />\n          <ellipse @selector=\"body\" />\n          <text @selector=\"label\" />\n      `;\n\t\t}\n\t}\n\n\tclass LiquidTank extends dia.Element {\n\t\tdefaults() {\n\t\t\treturn {\n\t\t\t\t...super.defaults,\n\t\t\t\ttype: \"LiquidTank\",\n\t\t\t\tsize: {\n\t\t\t\t\twidth: 160,\n\t\t\t\t\theight: 300\n\t\t\t\t},\n\t\t\t\tattrs: {\n\t\t\t\t\troot: {\n\t\t\t\t\t\tmagnetSelector: \"body\"\n\t\t\t\t\t},\n\t\t\t\t\tlegs: {\n\t\t\t\t\t\tfill: \"none\",\n\t\t\t\t\t\tstroke: \"#350100\",\n\t\t\t\t\t\tstrokeWidth: 8,\n\t\t\t\t\t\tstrokeLinecap: \"round\",\n\t\t\t\t\t\td: \"M 20 calc(h) l -5 10 M calc(w - 20) calc(h) l 5 10\"\n\t\t\t\t\t},\n\t\t\t\t\tbody: {\n\t\t\t\t\t\tstroke: \"gray\",\n\t\t\t\t\t\tstrokeWidth: 4,\n\t\t\t\t\t\tx: 0,\n\t\t\t\t\t\ty: 0,\n\t\t\t\t\t\twidth: \"calc(w)\",\n\t\t\t\t\t\theight: \"calc(h)\",\n\t\t\t\t\t\trx: 120,\n\t\t\t\t\t\try: 10,\n\t\t\t\t\t\tfill: {\n\t\t\t\t\t\t\ttype: \"linearGradient\",\n\t\t\t\t\t\t\tstops: [{\n\t\t\t\t\t\t\t\t\toffset: \"0%\",\n\t\t\t\t\t\t\t\t\tcolor: \"gray\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\toffset: \"30%\",\n\t\t\t\t\t\t\t\t\tcolor: \"white\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\toffset: \"70%\",\n\t\t\t\t\t\t\t\t\tcolor: \"white\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\toffset: \"100%\",\n\t\t\t\t\t\t\t\t\tcolor: \"gray\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\ttop: {\n\t\t\t\t\t\tx: 0,\n\t\t\t\t\t\ty: 20,\n\t\t\t\t\t\twidth: \"calc(w)\",\n\t\t\t\t\t\theight: 20,\n\t\t\t\t\t\tfill: \"none\",\n\t\t\t\t\t\tstroke: \"gray\",\n\t\t\t\t\t\tstrokeWidth: 2\n\t\t\t\t\t},\n\t\t\t\t\tlabel: {\n\t\t\t\t\t\ttext: \"Tank 1\",\n\t\t\t\t\t\ttextAnchor: \"middle\",\n\t\t\t\t\t\ttextVerticalAnchor: \"top\",\n\t\t\t\t\t\tx: \"calc(w / 2)\",\n\t\t\t\t\t\ty: \"calc(h + 10)\",\n\t\t\t\t\t\tfontSize: 14,\n\t\t\t\t\t\tfontFamily: \"sans-serif\",\n\t\t\t\t\t\tfill: \"#350100\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tpreinitialize() {\n\t\t\tthis.markup = util.svg /* xml */ `\n            <path @selector=\"legs\"/>\n            <rect @selector=\"body\"/>\n            <rect @selector=\"top\"/>\n            <text @selector=\"label\" />\n        `;\n\t\t}\n\n\t\tget level() {\n\t\t\treturn this.get(\"level\") || 0;\n\t\t}\n\n\t\tset level(level) {\n\t\t\tconst newLevel = Math.max(0, Math.min(100, level));\n\t\t\tthis.set(\"level\", newLevel);\n\t\t}\n\t}\n\n\tconst LEVEL_FLAG = \"LEVEl\";\n\n\tconst PanelView = dia.ElementView.extend({\n\t\tpresentationAttributes: dia.ElementView.addPresentationAttributes({\n\t\t\tlevel: [LEVEL_FLAG],\n\t\t\tcolor: [LEVEL_FLAG]\n\t\t}),\n\n\t\tinitFlag: [dia.ElementView.Flags.RENDER, LEVEL_FLAG],\n\n\t\tconfirmUpdate(...args) {\n\t\t\tlet flags = dia.ElementView.prototype.confirmUpdate.call(this, ...args);\n\t\t\tif (this.hasFlag(flags, LEVEL_FLAG)) {\n\t\t\t\tthis.updateLevel();\n\t\t\t\tflags = this.removeFlag(flags, LEVEL_FLAG);\n\t\t\t}\n\t\t\treturn flags;\n\t\t},\n\n\t\tupdateLevel() {\n\t\t\tconst {\n\t\t\t\tmodel\n\t\t\t} = this;\n\t\t\tconst level = Math.max(0, Math.min(100, model.get(\"level\") || 0));\n\t\t\tconst color = model.get(\"color\") || \"red\";\n\t\t\tconst [liquidEl] = this.findBySelector(\"liquid\");\n\t\t\tconst [windowEl] = this.findBySelector(\"frame\");\n\t\t\tconst windowHeight = Number(windowEl.getAttribute(\"height\"));\n\t\t\tconst height = Math.round((windowHeight * level) / 100);\n\t\t\tliquidEl.animate({\n\t\t\t\theight: [`${height}px`],\n\t\t\t\tfill: [color]\n\t\t\t}, {\n\t\t\t\tfill: \"forwards\",\n\t\t\t\tduration: 1000\n\t\t\t});\n\t\t}\n\t});\n\n\tclass ConicTank extends dia.Element {\n\t\tdefaults() {\n\t\t\treturn {\n\t\t\t\t...super.defaults,\n\t\t\t\ttype: \"ConicTank\",\n\t\t\t\tsize: {\n\t\t\t\t\twidth: 160,\n\t\t\t\t\theight: 100\n\t\t\t\t},\n\t\t\t\tattrs: {\n\t\t\t\t\troot: {\n\t\t\t\t\t\tmagnetSelector: \"body\"\n\t\t\t\t\t},\n\t\t\t\t\tbody: {\n\t\t\t\t\t\tstroke: \"gray\",\n\t\t\t\t\t\tstrokeWidth: 4,\n\t\t\t\t\t\tx: 0,\n\t\t\t\t\t\ty: 0,\n\t\t\t\t\t\twidth: \"calc(w)\",\n\t\t\t\t\t\theight: \"calc(h)\",\n\t\t\t\t\t\trx: 120,\n\t\t\t\t\t\try: 10,\n\t\t\t\t\t\tfill: {\n\t\t\t\t\t\t\ttype: \"linearGradient\",\n\t\t\t\t\t\t\tstops: [{\n\t\t\t\t\t\t\t\t\toffset: \"0%\",\n\t\t\t\t\t\t\t\t\tcolor: \"gray\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\toffset: \"30%\",\n\t\t\t\t\t\t\t\t\tcolor: \"white\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\toffset: \"70%\",\n\t\t\t\t\t\t\t\t\tcolor: \"white\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\toffset: \"100%\",\n\t\t\t\t\t\t\t\t\tcolor: \"gray\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\ttop: {\n\t\t\t\t\t\tx: 0,\n\t\t\t\t\t\ty: 20,\n\t\t\t\t\t\twidth: \"calc(w)\",\n\t\t\t\t\t\theight: 20,\n\t\t\t\t\t\tfill: \"none\",\n\t\t\t\t\t\tstroke: \"gray\",\n\t\t\t\t\t\tstrokeWidth: 2\n\t\t\t\t\t},\n\t\t\t\t\tbottom: {\n\t\t\t\t\t\td: \"M 0 0 L calc(w) 0 L calc(w / 2 + 10) 70 h -20 Z\",\n\t\t\t\t\t\ttransform: \"translate(0, calc(h - 10))\",\n\t\t\t\t\t\tstroke: \"gray\",\n\t\t\t\t\t\tstrokeLinejoin: \"round\",\n\t\t\t\t\t\tstrokeWidth: 2,\n\t\t\t\t\t\tfill: {\n\t\t\t\t\t\t\ttype: \"linearGradient\",\n\t\t\t\t\t\t\tstops: [{\n\t\t\t\t\t\t\t\t\toffset: \"10%\",\n\t\t\t\t\t\t\t\t\tcolor: \"#aaa\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\toffset: \"30%\",\n\t\t\t\t\t\t\t\t\tcolor: \"#fff\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\toffset: \"90%\",\n\t\t\t\t\t\t\t\t\tcolor: \"#aaa\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tattrs: {\n\t\t\t\t\t\t\t\tgradientTransform: \"rotate(-10)\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tlabel: {\n\t\t\t\t\t\ttext: \"Tank 2\",\n\t\t\t\t\t\ttextAnchor: \"middle\",\n\t\t\t\t\t\ttextVerticalAnchor: \"bottom\",\n\t\t\t\t\t\tx: \"calc(w / 2)\",\n\t\t\t\t\t\ty: -10,\n\t\t\t\t\t\tfontSize: 14,\n\t\t\t\t\t\tfontFamily: \"sans-serif\",\n\t\t\t\t\t\tfill: \"#350100\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tpreinitialize() {\n\t\t\tthis.markup = util.svg /* xml */ `\n          <path @selector=\"bottom\"/>\n          <rect @selector=\"body\"/>\n          <rect @selector=\"top\"/>\n          <text @selector=\"label\" />\n      `;\n\t\t}\n\t}\n\n\tclass Panel extends dia.Element {\n\t\tdefaults() {\n\t\t\treturn {\n\t\t\t\t...super.defaults,\n\t\t\t\ttype: \"Panel\",\n\t\t\t\tsize: {\n\t\t\t\t\twidth: 100,\n\t\t\t\t\theight: 230\n\t\t\t\t},\n\t\t\t\tlevel: 0,\n\t\t\t\tattrs: {\n\t\t\t\t\troot: {\n\t\t\t\t\t\tmagnetSelector: \"panelBody\"\n\t\t\t\t\t},\n\t\t\t\t\tpanelBody: {\n\t\t\t\t\t\tx: 0,\n\t\t\t\t\t\ty: 0,\n\t\t\t\t\t\twidth: \"calc(w)\",\n\t\t\t\t\t\theight: \"calc(h)\",\n\t\t\t\t\t\trx: 1,\n\t\t\t\t\t\try: 1,\n\t\t\t\t\t\tfill: \"lightgray\",\n\t\t\t\t\t\tstroke: \"gray\",\n\t\t\t\t\t\tstrokeWidth: 1\n\t\t\t\t\t},\n\t\t\t\t\tpanelWindow: {\n\t\t\t\t\t\t// turn the panel over so that we can grow the liquid from the bottom\n\t\t\t\t\t\t// by increasing the height of the bar.\n\t\t\t\t\t\ttransform: \"translate(10, 10) rotate(180) translate(-40,-205)\"\n\t\t\t\t\t},\n\t\t\t\t\tpanelTicks: {\n\t\t\t\t\t\ttransform: \"translate(55, 15)\",\n\t\t\t\t\t\td: `M 0 0 h 8 M 0 ${step} h 8 M 0 ${step * 2} h 8 M 0 ${\n            step * 3\n          } h 8 M 0 ${step * 4} h 8 M 0 ${step * 5} h 8 M 0 ${\n            step * 6\n          } h 8 M 0 ${step * 7} h 8 M 0 ${step * 8} h 8 M 0 ${\n            step * 9\n          } h 8 M 0 ${step * 10} h 8`,\n\t\t\t\t\t\tfill: \"none\",\n\t\t\t\t\t\tstroke: \"black\",\n\t\t\t\t\t\tstrokeWidth: 2,\n\t\t\t\t\t\tstrokeLinecap: \"round\"\n\t\t\t\t\t},\n\t\t\t\t\tpanelValues: {\n\t\t\t\t\t\ttext: \"100\\n90\\n80\\n70\\n60\\n50\\n40\\n30\\n20\\n10\\n0\",\n\t\t\t\t\t\ttextAnchor: \"middle\",\n\t\t\t\t\t\ttextVerticalAnchor: \"top\",\n\t\t\t\t\t\tx: 80,\n\t\t\t\t\t\ty: 10,\n\t\t\t\t\t\tlineHeight: step,\n\t\t\t\t\t\tfontSize: 14,\n\t\t\t\t\t\tfontFamily: \"sans-serif\"\n\t\t\t\t\t},\n\t\t\t\t\tframe: {\n\t\t\t\t\t\twidth: 40,\n\t\t\t\t\t\theight: 200,\n\t\t\t\t\t\trx: 1,\n\t\t\t\t\t\try: 1,\n\t\t\t\t\t\tfill: \"none\",\n\t\t\t\t\t\tstroke: \"black\",\n\t\t\t\t\t\tstrokeWidth: 3\n\t\t\t\t\t},\n\t\t\t\t\tliquid: {\n\t\t\t\t\t\tx: 0,\n\t\t\t\t\t\ty: 0,\n\t\t\t\t\t\twidth: 40,\n\t\t\t\t\t\theight: 0,\n\t\t\t\t\t\tstroke: \"black\",\n\t\t\t\t\t\tstrokeWidth: 2,\n\t\t\t\t\t\tstrokeOpacity: 0.2,\n\t\t\t\t\t\tfill: MIN_LIQUID_COLOR\n\t\t\t\t\t},\n\t\t\t\t\tglass: {\n\t\t\t\t\t\tx: 0,\n\t\t\t\t\t\ty: 0,\n\t\t\t\t\t\twidth: 40,\n\t\t\t\t\t\theight: 200,\n\t\t\t\t\t\tfill: \"blue\",\n\t\t\t\t\t\tstroke: \"none\",\n\t\t\t\t\t\tfillOpacity: 0.1\n\t\t\t\t\t},\n\t\t\t\t\tlabel: {\n\t\t\t\t\t\ttext: \"Tank 1\",\n\t\t\t\t\t\ttextAnchor: \"middle\",\n\t\t\t\t\t\ttextVerticalAnchor: \"top\",\n\t\t\t\t\t\tx: \"calc(w / 2)\",\n\t\t\t\t\t\ty: \"calc(h + 10)\",\n\t\t\t\t\t\tfontSize: 20,\n\t\t\t\t\t\tfontFamily: \"sans-serif\",\n\t\t\t\t\t\tfill: \"#350100\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tpreinitialize() {\n\t\t\tthis.markup = util.svg /* xml */ `\n            <rect @selector=\"panelBody\"/>\n            <path @selector=\"panelTicks\"/>\n            <text @selector=\"panelValues\" />\n            <g @selector=\"panelWindow\">\n                <rect @selector=\"glass\"/>\n                <rect @selector=\"liquid\"/>\n                <rect @selector=\"frame\"/>\n            </g>\n      `;\n\t\t}\n\t}\n\n\tclass Pipe extends dia.Link {\n\t\tdefaults() {\n\t\t\treturn {\n\t\t\t\t...super.defaults,\n\t\t\t\ttype: \"Pipe\",\n\t\t\t\tz: -1,\n\t\t\t\trouter: {\n\t\t\t\t\tname: \"rightAngle\"\n\t\t\t\t},\n\t\t\t\tflow: 1,\n\t\t\t\tattrs: {\n\t\t\t\t\tliquid: {\n\t\t\t\t\t\tconnection: true,\n\t\t\t\t\t\tstroke: LIQUID_COLOR,\n\t\t\t\t\t\tstrokeWidth: 10,\n\t\t\t\t\t\tstrokeLinejoin: \"round\",\n\t\t\t\t\t\tstrokeLinecap: \"square\",\n\t\t\t\t\t\tstrokeDasharray: \"10,20\"\n\t\t\t\t\t},\n\t\t\t\t\tline: {\n\t\t\t\t\t\tconnection: true,\n\t\t\t\t\t\tstroke: \"#eee\",\n\t\t\t\t\t\tstrokeWidth: 10,\n\t\t\t\t\t\tstrokeLinejoin: \"round\",\n\t\t\t\t\t\tstrokeLinecap: \"round\"\n\t\t\t\t\t},\n\t\t\t\t\toutline: {\n\t\t\t\t\t\tconnection: true,\n\t\t\t\t\t\tstroke: \"#444\",\n\t\t\t\t\t\tstrokeWidth: 16,\n\t\t\t\t\t\tstrokeLinejoin: \"round\",\n\t\t\t\t\t\tstrokeLinecap: \"round\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tpreinitialize() {\n\t\t\tthis.markup = util.svg /* xml */ `\n            <path @selector=\"outline\" fill=\"none\"/>\n            <path @selector=\"line\" fill=\"none\"/>\n            <path @selector=\"liquid\" fill=\"none\"/>\n        `;\n\t\t}\n\t}\n\n\tconst PipeView = dia.LinkView.extend({\n\t\tpresentationAttributes: dia.LinkView.addPresentationAttributes({\n\t\t\tflow: [FLOW_FLAG]\n\t\t}),\n\n\t\tinitFlag: [...dia.LinkView.prototype.initFlag, FLOW_FLAG],\n\n\t\tflowAnimation: null,\n\n\t\tconfirmUpdate(...args) {\n\t\t\tlet flags = dia.LinkView.prototype.confirmUpdate.call(this, ...args);\n\t\t\tif (this.hasFlag(flags, FLOW_FLAG)) {\n\t\t\t\tthis.updateFlow();\n\t\t\t\tflags = this.removeFlag(flags, FLOW_FLAG);\n\t\t\t}\n\t\t\treturn flags;\n\t\t},\n\n\t\tgetFlowAnimation() {\n\t\t\tlet {\n\t\t\t\tflowAnimation\n\t\t\t} = this;\n\t\t\tif (flowAnimation) return flowAnimation;\n\t\t\tconst [liquidEl] = this.findBySelector(\"liquid\");\n\t\t\t// stroke-dashoffset = sum(stroke-dasharray) * n;\n\t\t\t// 90 = 10 + 20 + 10 + 20 + 10 + 20\n\t\t\tconst keyframes = {\n\t\t\t\tstrokeDashoffset: [90, 0]\n\t\t\t};\n\t\t\tflowAnimation = liquidEl.animate(keyframes, {\n\t\t\t\tfill: \"forwards\",\n\t\t\t\tduration: 1000,\n\t\t\t\titerations: Infinity\n\t\t\t});\n\t\t\tthis.flowAnimation = flowAnimation;\n\t\t\treturn flowAnimation;\n\t\t},\n\n\t\tupdateFlow() {\n\t\t\tconst {\n\t\t\t\tmodel\n\t\t\t} = this;\n\t\t\tconst flowRate = model.get(\"flow\") || 0;\n\t\t\tthis.getFlowAnimation().playbackRate = flowRate;\n\t\t\tconst [liquidEl] = this.findBySelector(\"liquid\");\n\t\t\tliquidEl.style.stroke = flowRate === 0 ? \"#ccc\" : \"\";\n\t\t}\n\t});\n\n\tclass Zone extends joint.dia.Element {\n\t\tdefaults() {\n\t\t\treturn {\n\t\t\t\t...super.defaults,\n\t\t\t\ttype: \"Zone\",\n\t\t\t\tsize: {\n\t\t\t\t\twidth: 120,\n\t\t\t\t\theight: 40\n\t\t\t\t},\n\t\t\t\tattrs: {\n\t\t\t\t\tbody: {\n\t\t\t\t\t\tfill: \"#ffffff\",\n\t\t\t\t\t\tstroke: \"#cad8e3\",\n\t\t\t\t\t\tstrokeWidth: 1,\n\t\t\t\t\t\td: \"M 0 calc(0.5*h) calc(0.5*h) 0 H calc(w) V calc(h) H calc(0.5*h) Z\"\n\t\t\t\t\t},\n\t\t\t\t\tlabel: {\n\t\t\t\t\t\tfontSize: 14,\n\t\t\t\t\t\tfontFamily: \"sans-serif\",\n\t\t\t\t\t\tfontWeight: \"bold\",\n\t\t\t\t\t\tfill: LIQUID_COLOR,\n\t\t\t\t\t\ttextVerticalAnchor: \"middle\",\n\t\t\t\t\t\ttextAnchor: \"middle\",\n\t\t\t\t\t\tx: \"calc(w / 2 + 10)\",\n\t\t\t\t\t\ty: \"calc(h / 2)\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tpreinitialize() {\n\t\t\tthis.markup = util.svg /* xml */ `\n            <path @selector=\"body\"/>\n            <text @selector=\"label\"/>\n        `;\n\t\t}\n\t}\n\n\tclass Join extends dia.Element {\n\t\tdefaults() {\n\t\t\treturn {\n\t\t\t\t...super.defaults,\n\t\t\t\ttype: \"Join\",\n\t\t\t\tsize: {\n\t\t\t\t\twidth: 30,\n\t\t\t\t\theight: 30\n\t\t\t\t},\n\t\t\t\tattrs: {\n\t\t\t\t\tbody: {\n\t\t\t\t\t\tfill: \"#eee\",\n\t\t\t\t\t\tstroke: \"#666\",\n\t\t\t\t\t\tstrokeWidth: 2,\n\t\t\t\t\t\td: \"M 10 0 H calc(w - 10) l 10 10 V calc(h - 10) l -10 10 H 10 l -10 -10 V 10 Z\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tpreinitialize() {\n\t\t\tthis.markup = util.svg /* xml */ `\n            <path @selector=\"body\"/>\n        `;\n\t\t}\n\t}\n\n\tconst namespace = {\n\t\t...shapes,\n\t\tZone,\n\t\tPipe,\n\t\tPipeView,\n\t\tLiquidTank,\n\t\tConicTank,\n\t\tPanel,\n\t\tPanelView,\n\t\tPump,\n\t\tPumpView,\n\t\tControlValve,\n\t\tControlValveView,\n\t\tHandValve,\n\t\tJoin,\n\t\tPumpFan,\n\t\tPumpFanView,\n\t\tMotor\n\t};\n\n\tconst graph = new dia.Graph({}, {\n\t\tcellNamespace: namespace\n\t});\n\n\tconst paper = new dia.Paper({\n\t\tmodel: graph,\n\t\twidth: \"100%\",\n\t\theight: \"100%\",\n\t\tasync: true,\n\t\tfrozen: true,\n\t\tsorting: dia.Paper.sorting.APPROX,\n\t\tbackground: {\n\t\t\tcolor: \"#F3F7F6\"\n\t\t},\n\t\tinteractive: {\n\t\t\tlinkMove: false,\n\t\t\tstopDelegation: false\n\t\t},\n\t\tcellViewNamespace: namespace,\n\t\tdefaultAnchor: {\n\t\t\tname: \"perpendicular\"\n\t\t}\n\t});\n\n\tpaperContainerEl.appendChild(paper.el);\n\n\t// Motor\n\tconst motor1 = new Motor({\n\t\t// angle: 45,\n\t\t// size:{\n\t\t//     width:200,\n\t\t//     height:200,\n\t\t// }\n\t});\n\tmotor1.addTo(graph);\n\tmotor1.position(100, 150);\n\tmotor1.attr('label/text', 'Fahim Motor');\n\t// motor1.resize(300,100);\n\n\t// Tanks\n\n\tconst tank1 = new LiquidTank({\n\t\tposition: {\n\t\t\tx: 50,\n\t\t\ty: 250\n\t\t}\n\t});\n\tconst panel1 = new Panel({\n\t\tposition: {\n\t\t\tx: 70,\n\t\t\ty: 300\n\t\t}\n\t});\n\n\tlet rectangle = new shapes.standard.Rectangle();\n\trectangle.resize(50, 80);\n\trectangle.position(50, 10);\n\trectangle.attr('root/tabindex', 1);\n\trectangle.attr('root/title', 'joint.shapes.standard.Rectangle');\n\t// rectangle.attr('body/fill', '#30d0c6');\n\trectangle.attr('body/rx', 10);\n\trectangle.attr('body/ry', 20);\n\trectangle.attr('body/fillOpacity', 0.5);\n\trectangle.attr('body/fill/type', 'linearGradient');\n\trectangle.attr('body/fill/stops', [{\n\t\toffset: \"0%\",\n\t\tcolor: \"gray\"\n\t}, {\n\t\toffset: \"30%\",\n\t\tcolor: \"white\"\n\t}, {\n\t\toffset: \"70%\",\n\t\tcolor: \"white\"\n\t}, {\n\t\toffset: \"100%\",\n\t\tcolor: \"gray\"\n\t}]);\n\trectangle.attr('label/text', 'Motor 1');\n\trectangle.attr('label/refY', '0%');\n\trectangle.attr('label/refY2', '-20');\n\trectangle.addTo(graph);\n\n\n\tlet motorStrip = new shapes.standard.Rectangle();\n\tmotorStrip.resize(50, 10);\n\tmotorStrip.position(50, 25);\n\tmotorStrip.attr('body/fill', 'none');\n\tmotorStrip.addTo(graph);\n\trectangle.embed(motorStrip);\n\n\tlet motorCkt = new shapes.standard.Rectangle();\n\tmotorCkt.resize(20, 38);\n\tmotorCkt.position(65, 42);\n\tmotorCkt.attr('body/fill', 'none');\n\tmotorCkt.addTo(graph);\n\trectangle.embed(motorCkt);\n\n\tlet motorRotor = new shapes.standard.Rectangle();\n\tmotorRotor.resize(10, 20);\n\tmotorRotor.position(70, 90);\n\tmotorRotor.attr('body/fill', 'none');\n\tmotorRotor.addTo(graph);\n\trectangle.embed(motorRotor);\n\n\tconsole.log(\"rectangle\", rectangle);\n\n\t// When the tank level changes, update the panel level and color.\n\tpanel1.listenTo(tank1, \"change:level\", (_, level) => {\n\t\tconst color =\n\t\t\tlevel > 80 ?\n\t\t\tMAX_LIQUID_COLOR :\n\t\t\tlevel < 20 ?\n\t\t\tMIN_LIQUID_COLOR :\n\t\t\tLIQUID_COLOR;\n\t\tpanel1.set({\n\t\t\tlevel,\n\t\t\tcolor\n\t\t});\n\t});\n\n\n// \ttank1.embed(rectangle);\n\ttank1.embed(motor1);\n\n\ttank1.addTo(graph);\n\tpanel1.addTo(graph);\n\ttank1.embed(panel1);\n\n\t// Tank 2\n\n\tconst tank2 = new ConicTank({\n\t\tposition: {\n\t\t\tx: 820,\n\t\t\ty: 200\n\t\t}\n\t});\n\n\ttank2.addTo(graph);\n\n\tconst pumpFan = new PumpFan({\n\t\tposition: {\n\t\t\tx: 850,\n\t\t\ty: 240\n\t\t}\n\t});\n\tconsole.log('tank2', tank2)\n\n\t// Only Fan View with control\n\n\tpumpFan.addTo(graph);\n\ttank2.embed(pumpFan)\n\tpumpFan.power = 1;\n\n\tvar cylinder = new shapes.standard.Cylinder();\n\tcylinder.resize(50, 80);\n\tcylinder.position(525, 75);\n\tcylinder.attr('root/tabindex', 7);\n\tcylinder.attr('root/title', 'joint.shapes.standard.Cylinder');\n\t// cylinder.attr('body/fill','none');\n\t// cylinder.attr('body/fillOpacity', 0.5);\n\tcylinder.attr('top/fill', 'none');\n\tcylinder.attr('top/fillOpacity', 0.8);\n\tcylinder.attr('label/text', 'Motor1');\n\tcylinder.attr('label/refX', '50%');\n\tcylinder.attr('label/refY', '0');\n\tcylinder.attr('label/refY2', -20);\n\tcylinder.attr('body/fill/type', 'linearGradient');\n\tcylinder.attr('body/fill/stops', [{\n\t\toffset: \"0%\",\n\t\tcolor: \"gray\"\n\t}, {\n\t\toffset: \"30%\",\n\t\tcolor: \"white\"\n\t}, {\n\t\toffset: \"70%\",\n\t\tcolor: \"white\"\n\t}, {\n\t\toffset: \"100%\",\n\t\tcolor: \"gray\"\n\t}]);\n\tconsole.log(\"cylinder\", cylinder);\n\tcylinder.addTo(graph);\n\n\t// var path = new shapes.standard.Path();\n\t// path.resize(100, 100);\n\t// path.position(50, 210);\n\t// path.attr('root/tabindex', 4);\n\t// path.attr('root/title', 'joint.shapes.standard.Path');\n\t// path.attr('label/text', 'Path');\n\t// path.attr('body/fill', '#30d0c6');\n\t// path.attr('body/fillOpacity', 0.5);\n\t// path.attr('body/refD', 'M0,0 0,20 20,20 Z');\n\t// path.addTo(graph);\n\n\n\n\n\n\t// Pumps\n\n\tconst pump1 = new Pump({\n\t\tposition: {\n\t\t\tx: 460,\n\t\t\ty: 250\n\t\t},\n\t\tattrs: {\n\t\t\tlabel: {\n\t\t\t\ttext: \"Pump 1\"\n\t\t\t}\n\t\t}\n\t});\n\n\tpump1.addTo(graph);\n\tpump1.power = 1;\n\n\tconst pump2 = new Pump({\n\t\tposition: {\n\t\t\tx: 460,\n\t\t\ty: 450\n\t\t},\n\t\tattrs: {\n\t\t\tlabel: {\n\t\t\t\ttext: \"Pump 2\"\n\t\t\t}\n\t\t}\n\t});\n\n\tpump2.addTo(graph);\n\tpump2.power = 0;\n\n\t// CTRL Valves\n\n\tconst controlValve1 = new ControlValve({\n\t\tposition: {\n\t\t\tx: 300,\n\t\t\ty: 295\n\t\t},\n\t\topen: 1,\n\t\tattrs: {\n\t\t\tlabel: {\n\t\t\t\ttext: \"CTRL Valve 1\"\n\t\t\t}\n\t\t}\n\t});\n\n\tcontrolValve1.addTo(graph);\n\n\tconst controlValve2 = new ControlValve({\n\t\tposition: {\n\t\t\tx: 300,\n\t\t\ty: 495\n\t\t},\n\t\topen: 0.25,\n\t\tattrs: {\n\t\t\tlabel: {\n\t\t\t\ttext: \"CTRL Valve 2\"\n\t\t\t}\n\t\t}\n\t});\n\n\tcontrolValve2.addTo(graph);\n\n\t// Zones\n\n\tconst zone1 = new Zone({\n\t\tposition: {\n\t\t\tx: 50,\n\t\t\ty: 600\n\t\t},\n\t\tattrs: {\n\t\t\tlabel: {\n\t\t\t\ttext: \"Zone 1\"\n\t\t\t}\n\t\t}\n\t});\n\n\tconst zone2 = new Zone({\n\t\tposition: {\n\t\t\tx: 865,\n\t\t\ty: 600\n\t\t},\n\t\tattrs: {\n\t\t\tlabel: {\n\t\t\t\ttext: \"Zone 2\"\n\t\t\t}\n\t\t}\n\t});\n\n\tgraph.addCells([zone1, zone2]);\n\n\t// Hand Valves\n\n\tconst handValve1 = new HandValve({\n\t\tposition: {\n\t\t\tx: 875,\n\t\t\ty: 450\n\t\t},\n\t\topen: 1,\n\t\tangle: 270,\n\t\tattrs: {\n\t\t\tlabel: {\n\t\t\t\ttext: \"Valve 1\"\n\t\t\t}\n\t\t}\n\t});\n\n\thandValve1.addTo(graph);\n\n\tconst handValve2 = new HandValve({\n\t\tposition: {\n\t\t\tx: 650,\n\t\t\ty: 250\n\t\t},\n\t\topen: 1,\n\t\tangle: 0,\n\t\tattrs: {\n\t\t\tlabel: {\n\t\t\t\ttext: \"Valve 2\"\n\t\t\t}\n\t\t}\n\t});\n\n\thandValve2.addTo(graph);\n\n\tconst handValve3 = new HandValve({\n\t\tposition: {\n\t\t\tx: 650,\n\t\t\ty: 450\n\t\t},\n\t\topen: 1,\n\t\tangle: 0,\n\t\tattrs: {\n\t\t\tlabel: {\n\t\t\t\ttext: \"Valve 3\"\n\t\t\t}\n\t\t}\n\t});\n\n\thandValve3.addTo(graph);\n\n\t// Joins\n\n\tconst join1 = new Join({\n\t\tposition: {\n\t\t\tx: 772,\n\t\t\ty: 460\n\t\t}\n\t});\n\n\tjoin1.addTo(graph);\n\n\tconst join2 = new Join({\n\t\tposition: {\n\t\t\tx: 810,\n\t\t\ty: 605\n\t\t}\n\t});\n\n\tjoin2.addTo(graph);\n\n\t// Pipes\n\n\tconst tank1Pipe1 = new Pipe({\n\t\tsource: {\n\t\t\tid: tank1.id,\n\t\t\tanchor: {\n\t\t\t\tname: \"right\",\n\t\t\t\targs: {\n\t\t\t\t\tdy: -25\n\t\t\t\t}\n\t\t\t},\n\t\t\tconnectionPoint: {\n\t\t\t\tname: \"anchor\"\n\t\t\t}\n\t\t},\n\t\ttarget: {\n\t\t\tid: controlValve1.id,\n\t\t\tport: \"left\",\n\t\t\tanchor: {\n\t\t\t\tname: \"left\"\n\t\t\t}\n\t\t}\n\t});\n\n\ttank1Pipe1.addTo(graph);\n\n\tconst tank1Pipe2 = new Pipe({\n\t\tsource: {\n\t\t\tid: tank1.id,\n\t\t\tanchor: {\n\t\t\t\tname: \"bottomRight\",\n\t\t\t\targs: {\n\t\t\t\t\tdy: -40\n\t\t\t\t}\n\t\t\t},\n\t\t\tconnectionPoint: {\n\t\t\t\tname: \"anchor\"\n\t\t\t}\n\t\t},\n\t\ttarget: {\n\t\t\tid: controlValve2.id,\n\t\t\tport: \"left\",\n\t\t\tanchor: {\n\t\t\t\tname: \"left\"\n\t\t\t},\n\t\t\tconnectionPoint: {\n\t\t\t\tname: \"anchor\"\n\t\t\t}\n\t\t}\n\t});\n\n\ttank1Pipe2.addTo(graph);\n\n\tconst tank2Pipe1 = new Pipe({\n\t\tsource: {\n\t\t\tid: tank2.id,\n\t\t\tselector: \"bottom\",\n\t\t\tanchor: {\n\t\t\t\tname: \"bottom\"\n\t\t\t},\n\t\t\tconnectionPoint: {\n\t\t\t\tname: \"anchor\"\n\t\t\t}\n\t\t},\n\t\ttarget: {\n\t\t\tid: handValve1.id,\n\t\t\tport: \"right\",\n\t\t\tanchor: {\n\t\t\t\tname: \"right\",\n\t\t\t\targs: {\n\t\t\t\t\trotate: true\n\t\t\t\t}\n\t\t\t},\n\t\t\tconnectionPoint: {\n\t\t\t\tname: \"anchor\"\n\t\t\t}\n\t\t}\n\t});\n\n\ttank2Pipe1.addTo(graph);\n\n\tconst ctrlValve1Pipe1 = new Pipe({\n\t\tsource: {\n\t\t\tid: controlValve1.id,\n\t\t\tport: \"right\",\n\t\t\tanchor: {\n\t\t\t\tname: \"right\"\n\t\t\t}\n\t\t},\n\t\ttarget: {\n\t\t\tid: pump1.id,\n\t\t\tport: \"left\",\n\t\t\tanchor: {\n\t\t\t\tname: \"left\"\n\t\t\t}\n\t\t}\n\t});\n\n\tctrlValve1Pipe1.addTo(graph);\n\n\tconst valve2Pipe1 = new Pipe({\n\t\tsource: {\n\t\t\tid: handValve2.id,\n\t\t\tport: \"right\",\n\t\t\tanchor: {\n\t\t\t\tname: \"right\",\n\t\t\t\targs: {\n\t\t\t\t\trotate: true\n\t\t\t\t}\n\t\t\t},\n\t\t\tconnectionPoint: {\n\t\t\t\tname: \"anchor\"\n\t\t\t}\n\t\t},\n\t\ttarget: {\n\t\t\tid: join1.id,\n\t\t\tanchor: {\n\t\t\t\tname: \"top\"\n\t\t\t},\n\t\t\tconnectionPoint: {\n\t\t\t\tname: \"anchor\"\n\t\t\t}\n\t\t}\n\t});\n\n\tvalve2Pipe1.addTo(graph);\n\n\tconst valve1Pipe1 = new Pipe({\n\t\tsource: {\n\t\t\tid: handValve1.id,\n\t\t\tport: \"left\",\n\t\t\tanchor: {\n\t\t\t\tname: \"left\",\n\t\t\t\targs: {\n\t\t\t\t\trotate: true\n\t\t\t\t}\n\t\t\t},\n\t\t\tconnectionPoint: {\n\t\t\t\tname: \"anchor\"\n\t\t\t}\n\t\t},\n\t\ttarget: {\n\t\t\tid: join2.id,\n\t\t\tanchor: {\n\t\t\t\tname: \"top\"\n\t\t\t},\n\t\t\tconnectionPoint: {\n\t\t\t\tname: \"anchor\"\n\t\t\t}\n\t\t}\n\t});\n\n\tvalve1Pipe1.addTo(graph);\n\n\tconst pump1Pipe1 = new Pipe({\n\t\tsource: {\n\t\t\tid: pump1.id,\n\t\t\tport: \"right\",\n\t\t\tanchor: {\n\t\t\t\tname: \"right\",\n\t\t\t\targs: {\n\t\t\t\t\trotate: true\n\t\t\t\t}\n\t\t\t},\n\t\t\tconnectionPoint: {\n\t\t\t\tname: \"anchor\"\n\t\t\t}\n\t\t},\n\t\ttarget: {\n\t\t\tid: handValve2.id,\n\t\t\tport: \"left\",\n\t\t\tanchor: {\n\t\t\t\tname: \"left\",\n\t\t\t\targs: {\n\t\t\t\t\trotate: true\n\t\t\t\t}\n\t\t\t},\n\t\t\tconnectionPoint: {\n\t\t\t\tname: \"anchor\"\n\t\t\t}\n\t\t}\n\t});\n\n\tpump1Pipe1.addTo(graph);\n\n\tconst valve3Pipe1 = new Pipe({\n\t\tsource: {\n\t\t\tid: handValve3.id,\n\t\t\tport: \"right\",\n\t\t\tanchor: {\n\t\t\t\tname: \"right\",\n\t\t\t\targs: {\n\t\t\t\t\trotate: true\n\t\t\t\t}\n\t\t\t},\n\t\t\tconnectionPoint: {\n\t\t\t\tname: \"anchor\"\n\t\t\t}\n\t\t},\n\t\ttarget: {\n\t\t\tid: join1.id,\n\t\t\tanchor: {\n\t\t\t\tname: \"left\"\n\t\t\t},\n\t\t\tconnectionPoint: {\n\t\t\t\tname: \"anchor\"\n\t\t\t}\n\t\t}\n\t});\n\n\tvalve3Pipe1.addTo(graph);\n\n\tconst pump2Pipe1 = new Pipe({\n\t\tsource: {\n\t\t\tid: pump2.id,\n\t\t\tport: \"right\",\n\t\t\tanchor: {\n\t\t\t\tname: \"right\",\n\t\t\t\targs: {\n\t\t\t\t\trotate: true\n\t\t\t\t}\n\t\t\t},\n\t\t\tconnectionPoint: {\n\t\t\t\tname: \"anchor\"\n\t\t\t}\n\t\t},\n\t\ttarget: {\n\t\t\tid: handValve3.id,\n\t\t\tport: \"left\",\n\t\t\tanchor: {\n\t\t\t\tname: \"left\",\n\t\t\t\targs: {\n\t\t\t\t\trotate: true\n\t\t\t\t}\n\t\t\t},\n\t\t\tconnectionPoint: {\n\t\t\t\tname: \"anchor\"\n\t\t\t}\n\t\t}\n\t});\n\n\tpump2Pipe1.addTo(graph);\n\n\tconst ctrlValve2Pipe1 = new Pipe({\n\t\tsource: {\n\t\t\tid: controlValve2.id,\n\t\t\tport: \"right\",\n\t\t\tanchor: {\n\t\t\t\tname: \"right\"\n\t\t\t}\n\t\t},\n\t\ttarget: {\n\t\t\tid: pump2.id,\n\t\t\tport: \"left\",\n\t\t\tanchor: {\n\t\t\t\tname: \"left\",\n\t\t\t\targs: {\n\t\t\t\t\trotate: true\n\t\t\t\t}\n\t\t\t},\n\t\t\tconnectionPoint: {\n\t\t\t\tname: \"anchor\"\n\t\t\t}\n\t\t}\n\t});\n\n\tctrlValve2Pipe1.addTo(graph);\n\n\tconst zone1Pipe1 = new Pipe({\n\t\tsource: {\n\t\t\tid: zone1.id,\n\t\t\tport: \"left\",\n\t\t\tanchor: {\n\t\t\t\tname: \"left\",\n\t\t\t\targs: {\n\t\t\t\t\trotate: true,\n\t\t\t\t\tdx: 10\n\t\t\t\t}\n\t\t\t},\n\t\t\tconnectionPoint: {\n\t\t\t\tname: \"anchor\"\n\t\t\t}\n\t\t},\n\t\ttarget: {\n\t\t\tid: tank1.id,\n\t\t\tanchor: {\n\t\t\t\tname: \"bottomLeft\",\n\t\t\t\targs: {\n\t\t\t\t\tdy: -30\n\t\t\t\t}\n\t\t\t},\n\t\t\tconnectionPoint: {\n\t\t\t\tname: \"anchor\"\n\t\t\t}\n\t\t}\n\t});\n\n\tzone1Pipe1.addTo(graph);\n\n\tconst join1Pipe1 = new Pipe({\n\t\tsource: {\n\t\t\tid: join1.id,\n\t\t\tanchor: {\n\t\t\t\tname: \"bottom\"\n\t\t\t},\n\t\t\tconnectionPoint: {\n\t\t\t\tname: \"anchor\"\n\t\t\t}\n\t\t},\n\t\ttarget: {\n\t\t\tid: join2.id,\n\t\t\tanchor: {\n\t\t\t\tname: \"left\"\n\t\t\t},\n\t\t\tconnectionPoint: {\n\t\t\t\tname: \"anchor\"\n\t\t\t}\n\t\t}\n\t});\n\n\tjoin1Pipe1.addTo(graph);\n\n\tconst join2Pipe1 = new Pipe({\n\t\tsource: {\n\t\t\tid: join2.id,\n\t\t\tanchor: {\n\t\t\t\tname: \"right\"\n\t\t\t},\n\t\t\tconnectionPoint: {\n\t\t\t\tname: \"anchor\"\n\t\t\t}\n\t\t},\n\t\ttarget: {\n\t\t\tid: zone2.id,\n\t\t\tanchor: {\n\t\t\t\tname: \"left\",\n\t\t\t\targs: {\n\t\t\t\t\tdx: 10\n\t\t\t\t}\n\t\t\t},\n\t\t\tconnectionPoint: {\n\t\t\t\tname: \"anchor\"\n\t\t\t}\n\t\t}\n\t});\n\n\tjoin2Pipe1.addTo(graph);\n\n\t// Charts\n\n\tconst maxPoints = 10;\n\tconst tankChart = new shapes.chart.Plot({\n\t\tposition: {\n\t\t\tx: 50,\n\t\t\ty: 50\n\t\t},\n\t\tsize: {\n\t\t\twidth: 300,\n\t\t\theight: 150\n\t\t},\n\t\tseries: [{\n\t\t\tname: \"level\",\n\t\t\tinterpolate: \"linear\",\n\t\t\tshowLegend: false,\n\t\t\tfillPadding: {\n\t\t\t\ttop: 10\n\t\t\t},\n\t\t\tdata: Array.from({\n\t\t\t\tlength: maxPoints\n\t\t\t}).map((_, i) => ({\n\t\t\t\tx: i,\n\t\t\t\ty: START_LIQUID\n\t\t\t}))\n\t\t}],\n\t\taxis: {\n\t\t\t\"y-axis\": {\n\t\t\t\tmin: 0,\n\t\t\t\tmax: 100,\n\t\t\t\tticks: 10\n\t\t\t},\n\t\t\t\"x-axis\": {\n\t\t\t\ttickFormat: function(t) {\n\t\t\t\t\tconst d = new Date(t * 1000);\n\t\t\t\t\treturn (\n\t\t\t\t\t\td.getMinutes().toString().padStart(2, \"0\") +\n\t\t\t\t\t\t\":\" +\n\t\t\t\t\t\td.getSeconds().toString().padStart(2, \"0\")\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tpadding: 0,\n\t\tmarkings: [{\n\t\t\t\tname: \"max\",\n\t\t\t\tstart: {\n\t\t\t\t\ty: 80\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: \"min\",\n\t\t\t\tend: {\n\t\t\t\t\ty: 20\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t// Historically, the chart shapes are defined without camel-cased attributes\n\t\tattrs: {\n\t\t\t\".\": {\n\t\t\t\t\"font-family\": \"sans-serif\"\n\t\t\t},\n\t\t\t\".level path\": {\n\t\t\t\tstroke: \"#0075f2\",\n\t\t\t\t\"stroke-width\": 1,\n\t\t\t\t\"stroke-opacity\": \"0.8\",\n\t\t\t\tfill: \"#0075f2\",\n\t\t\t\t\"fill-opacity\": \"0.3\"\n\t\t\t},\n\t\t\t\".marking.max rect\": {\n\t\t\t\tfill: MAX_LIQUID_COLOR,\n\t\t\t\theight: 3\n\t\t\t},\n\t\t\t\".marking.min rect\": {\n\t\t\t\tfill: MIN_LIQUID_COLOR,\n\t\t\t\theight: 3\n\t\t\t},\n\t\t\t\".point circle\": {\n\t\t\t\tfill: \"#0075f2\",\n\t\t\t\tstroke: \"none\",\n\t\t\t\topacity: 1\n\t\t\t},\n\t\t\t\".y-axis > path, .x-axis > path\": {\n\t\t\t\tstroke: \"#131e29\",\n\t\t\t\t\"stroke-width\": 2\n\t\t\t},\n\t\t\t\".background rect\": {\n\t\t\t\tfill: \"#999\",\n\t\t\t\t\"fill-opacity\": \"0.1\"\n\t\t\t}\n\t\t}\n\t});\n\n\ttankChart.addTo(graph);\n\n\tconst tankChartLink = new shapes.standard.Link({\n\t\tsource: {\n\t\t\tid: tankChart.id\n\t\t},\n\t\ttarget: {\n\t\t\tid: tank1.id\n\t\t},\n\t\tattrs: {\n\t\t\tline: {\n\t\t\t\tstrokeDasharray: \"5 5\",\n\t\t\t\ttargetMarker: null,\n\t\t\t\tstroke: \"#aaa\"\n\t\t\t}\n\t\t}\n\t});\n\n\ttankChartLink.addTo(graph);\n\n\tconst gauge1 = new shapes.chart.Knob({\n\t\tposition: {\n\t\t\tx: 380,\n\t\t\ty: 100\n\t\t},\n\t\tsize: {\n\t\t\twidth: 120,\n\t\t\theight: 120\n\t\t},\n\t\tmin: 0,\n\t\tmax: 10,\n\t\tstep: 0.1,\n\t\tvalue: 1,\n\t\tfill: PRESSURE_COLOR,\n\t\t// Historically, the chart shapes are defined without camel-cased attributes\n\t\tattrs: {\n\t\t\troot: {\n\t\t\t\t\"font-family\": \"sans-serif\"\n\t\t\t}\n\t\t},\n\t\tserieDefaults: {\n\t\t\tstartAngle: 90,\n\t\t\tlabel: \"Ⓟ bar\"\n\t\t},\n\t\tsliceDefaults: {\n\t\t\tlegendLabel: \"{value:.1f}\",\n\t\t\tonClickEffect: {\n\t\t\t\ttype: \"none\"\n\t\t\t}\n\t\t}\n\t});\n\n\tgauge1.addTo(graph);\n\n\tconst gauge1Link = new shapes.standard.Link({\n\t\tsource: {\n\t\t\tid: gauge1.id,\n\t\t\tanchor: {\n\t\t\t\tname: \"bottom\"\n\t\t\t}\n\t\t},\n\t\ttarget: {\n\t\t\tid: ctrlValve1Pipe1.id\n\t\t},\n\t\tz: -1,\n\t\tattrs: {\n\t\t\tline: {\n\t\t\t\tstrokeDasharray: \"5 5\",\n\t\t\t\ttargetMarker: {\n\t\t\t\t\ttype: \"circle\",\n\t\t\t\t\tr: 12,\n\t\t\t\t\tfill: \"#eee\",\n\t\t\t\t\tstroke: \"#666\",\n\t\t\t\t\t\"stroke-width\": 2\n\t\t\t\t},\n\t\t\t\tstroke: \"#aaa\"\n\t\t\t}\n\t\t}\n\t});\n\n\tgauge1Link.addTo(graph);\n\n\tconst gauge2 = gauge1.clone();\n\tconst gauge2Link = gauge1Link.clone();\n\n\tgauge2.position(380, 600);\n\n\tgauge2Link.source({\n\t\tid: gauge2.id,\n\t\tanchor: {\n\t\t\tname: \"bottom\"\n\t\t}\n\t});\n\tgauge2Link.target({\n\t\tid: ctrlValve2Pipe1.id\n\t});\n\n\tgauge2.addTo(graph);\n\tgauge2Link.addTo(graph);\n\n\t// Controls\n\t// A custom highlighters using the foreignObject element to embed HTML form controls\n\t// The styling is done in CSS\n\n\tconst PumpControl = dia.HighlighterView.extend({\n\t\tUPDATE_ATTRIBUTES: [\"power\"],\n\t\ttagName: \"g\",\n\t\tchildren: util.svg /* xml */ `\n        <foreignObject width=\"20\" height=\"20\">\n            <div class=\"jj-checkbox\" xmlns=\"http://www.w3.org/1999/xhtml\">\n                <input @selector=\"input\" class=\"jj-checkbox-input\" type=\"checkbox\" style=\"width: 14px; height: 14px; box-sizing: border-box; margin: 2px;\"/>\n            </div>\n        </foreignObject>\n    `,\n\t\tevents: {\n\t\t\t\"change input\": \"onChange\"\n\t\t},\n\t\tattributes: {\n\t\t\ttransform: \"translate(5, 5)\"\n\t\t},\n\t\thighlight: function(cellView) {\n\t\t\tthis.renderChildren();\n\t\t\tthis.childNodes.input.checked = Boolean(cellView.model.power);\n\t\t},\n\t\tonChange: function(evt) {\n\t\t\tthis.cellView.model.power = evt.target.checked ? 1 : 0;\n\t\t}\n\t});\n\n// \tconst MotorControl = dia.HighlighterView.extend({\n// \t\tUPDATE_ATTRIBUTES: [\"power\"],\n// \t\ttagName: \"g\",\n// \t\tchildren: util.svg /* xml */ `\n//         <foreignObject width=\"20\" height=\"20\">\n//             <div class=\"jj-checkbox\" xmlns=\"http://www.w3.org/1999/xhtml\">\n//                 <input @selector=\"input\" class=\"jj-checkbox-input\" type=\"checkbox\" style=\"width: 14px; height: 14px; box-sizing: border-box; margin: 2px;\"/>\n//             </div>\n//         </foreignObject>\n//     `,\n// \t\tevents: {\n// \t\t\t\"change input\": \"onChange\"\n// \t\t},\n// \t\tattributes: {\n// \t\t\ttransform: \"translate(5, 5)\"\n// \t\t},\n// \t\thighlight: function(cellView) {\n// \t\t\tthis.renderChildren();\n// \t\t\tthis.childNodes.input.checked = Boolean(cellView.model.power);\n// \t\t},\n// \t\tonChange: function(evt) {\n// \t\t\tthis.cellView.model.power = evt.target.checked ? 1 : 0;\n// \t\t}\n// \t});\n\n// \tMotorControl.add(rectangle, \"root\", \"selection\");\n\nconst ToggleMotor1Control = dia.HighlighterView.extend({\n\t\tUPDATE_ATTRIBUTES: [\"open\"],\n\t\tchildren: util.svg /* xml */ `\n        <foreignObject width=\"100\" height=\"50\">\n            <div class=\"jj-switch\" xmlns=\"http://www.w3.org/1999/xhtml\">\n                <div @selector=\"label\" class=\"jj-switch-label\" style=\"\"></div>\n                <button @selector=\"buttonOn\" class=\"jj-switch-on\">open</button>\n                <button @selector=\"buttonOff\" class=\"jj-switch-off\">close</button>\n            </div>\n        </foreignObject>\n    `,\n\t\tevents: {\n\t\t\t\"click button\": \"onButtonClick\"\n\t\t},\n\t\thighlight: function(cellView) {\n\t\t\tthis.renderChildren();\n\t\t\tconst {\n\t\t\t\tmodel\n\t\t\t} = cellView;\n\t\t\tconst {\n\t\t\t\tel,\n\t\t\t\tchildNodes\n\t\t\t} = this;\n\t\t\tconst size = model.size();\n\t\t\tconst isOpen = model.get(\"open\");\n\t\t\tel.setAttribute(\n\t\t\t\t\"transform\",\n\t\t\t\t`translate(${size.width / 2 - 50}, ${size.height + 10})`\n\t\t\t);\n\t\t\tchildNodes.buttonOn.disabled = !isOpen;\n\t\t\tchildNodes.buttonOff.disabled = isOpen;\n\t\t\tchildNodes.label.textContent = model.attr(\"label/text\");\n\t\t},\n\t\tonButtonClick: function(evt) {\n\t\t    console.log(\"HandValve clicked\");\n\t\t\tconst {\n\t\t\t\tmodel\n\t\t\t} = this.cellView;\n\t\t\tconst isOpen = model.get(\"open\");\n\t\t\tmodel.set(\"open\", !isOpen);\n\t\t}\n\t});\n\t\n\t\n\n\tconst ToggleValveControl = dia.HighlighterView.extend({\n\t\tUPDATE_ATTRIBUTES: [\"open\"],\n\t\tchildren: util.svg /* xml */ `\n        <foreignObject width=\"100\" height=\"50\">\n            <div class=\"jj-switch\" xmlns=\"http://www.w3.org/1999/xhtml\">\n                <div @selector=\"label\" class=\"jj-switch-label\" style=\"\"></div>\n                <button @selector=\"buttonOn\" class=\"jj-switch-on\">open</button>\n                <button @selector=\"buttonOff\" class=\"jj-switch-off\">close</button>\n            </div>\n        </foreignObject>\n    `,\n\t\tevents: {\n\t\t\t\"click button\": \"onButtonClick\"\n\t\t},\n\t\thighlight: function(cellView) {\n\t\t\tthis.renderChildren();\n\t\t\tconst {\n\t\t\t\tmodel\n\t\t\t} = cellView;\n\t\t\tconst {\n\t\t\t\tel,\n\t\t\t\tchildNodes\n\t\t\t} = this;\n\t\t\tconst size = model.size();\n\t\t\tconst isOpen = model.get(\"open\");\n\t\t\tel.setAttribute(\n\t\t\t\t\"transform\",\n\t\t\t\t`translate(${size.width / 2 - 50}, ${size.height + 10})`\n\t\t\t);\n\t\t\tchildNodes.buttonOn.disabled = !isOpen;\n\t\t\tchildNodes.buttonOff.disabled = isOpen;\n\t\t\tchildNodes.label.textContent = model.attr(\"label/text\");\n\t\t},\n\t\tonButtonClick: function(evt) {\n\t\t    console.log(\"HandValve clicked\");\n\t\t\tconst {\n\t\t\t\tmodel\n\t\t\t} = this.cellView;\n\t\t\tconst isOpen = model.get(\"open\");\n\t\t\tmodel.set(\"open\", !isOpen);\n\t\t}\n\t});\n\n\tconst SliderValveControl = dia.HighlighterView.extend({\n\t\tUPDATE_ATTRIBUTES: [\"open\"],\n\t\tchildren: util.svg /* xml */ `\n        <foreignObject width=\"100\" height=\"60\">\n            <div class=\"jj-slider\" xmlns=\"http://www.w3.org/1999/xhtml\">\n                <div @selector=\"label\" class=\"jj-slider-label\" style=\"\">Valve 4</div>\n                <input @selector=\"slider\" class=\"jj-slider-input\" type=\"range\" min=\"0\" max=\"100\" step=\"25\" style=\"width:100%;\"/>\n                <output @selector=\"value\" class=\"jj-slider-output\"></output>\n            </div>\n        </foreignObject>\n    `,\n\t\tevents: {\n\t\t\t\"input input\": \"onInput\"\n\t\t},\n\t\thighlight: function(cellView) {\n\t\t\tconst {\n\t\t\t\tname = \"\"\n\t\t\t} = this.options;\n\t\t\tconst {\n\t\t\t\tmodel\n\t\t\t} = cellView;\n\t\t\tconst size = model.size();\n\t\t\tif (!this.childNodes) {\n\t\t\t\t// Render the slider only once to allow the user to drag it.\n\t\t\t\tthis.renderChildren();\n\t\t\t\tthis.childNodes.slider.value = model.get(\"open\") * 100;\n\t\t\t}\n\t\t\tthis.el.setAttribute(\n\t\t\t\t\"transform\",\n\t\t\t\t`translate(${size.width / 2 - 50}, ${size.height + 10})`\n\t\t\t);\n\t\t\tthis.childNodes.label.textContent = name;\n\t\t\tthis.childNodes.value.textContent = this.getSliderTextValue(\n\t\t\t\tmodel.get(\"open\")\n\t\t\t);\n\t\t},\n\t\tgetSliderTextValue: function(value = 0) {\n\t\t\tif (value === 0) {\n\t\t\t\treturn \"Closed\";\n\t\t\t}\n\t\t\tif (value === 1) {\n\t\t\t\treturn \"Open\";\n\t\t\t}\n\t\t\treturn `${value * 100}% open`;\n\t\t},\n\t\tonInput: function(evt) {\n\t\t\tthis.cellView.model.set(\"open\", Number(evt.target.value) / 100);\n\t\t}\n\t});\n\n\t// Create all controls and add them to the graph\n\taddControls(paper);\n\n\t// Transform the paper so that the content fits the viewport\n\tpaper.transformToFitContent({\n\t\tuseModelGeometry: true,\n\t\tpadding: {\n\t\t\ttop: 80,\n\t\t\tbottom: 10,\n\t\t\thorizontal: 50\n\t\t},\n\t\thorizontalAlign: \"middle\",\n\t\tverticalAlign: \"top\"\n\t});\n\n\t// Start rendering the content and highlighters\n\tpaper.unfreeze();\n\n\t// Toolbar\n\n\tconst toolbar = new ui.Toolbar({\n\t\ttools: [{\n\t\t\t\ttype: \"label\",\n\t\t\t\tname: \"title\",\n\t\t\t\ttext: \"SCADA: Piping & Instrumentation Diagram\"\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"separator\"\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"checkbox\",\n\t\t\t\tname: \"controls\",\n\t\t\t\tlabel: \"Controls\",\n\t\t\t\tvalue: true\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"checkbox\",\n\t\t\t\tname: \"instrumentation\",\n\t\t\t\tlabel: \"Instrumentation\",\n\t\t\t\tvalue: true\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"separator\"\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"label\",\n\t\t\t\ttext: \"Color\"\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"color-picker\",\n\t\t\t\tname: \"color\",\n\t\t\t\tvalue: getComputedStyle(document.documentElement).getPropertyValue(\n\t\t\t\t\t\"--accent-color\"\n\t\t\t\t)\n\t\t\t}\n\t\t]\n\t});\n\n\ttoolbarContainerEl.appendChild(toolbar.el);\n\n\ttoolbar.render();\n\ttoolbar.on({\n\t\t\"controls:change\": (value) => {\n\t\t\tif (value) {\n\t\t\t\taddControls(paper);\n\t\t\t} else {\n\t\t\t\tremoveControls(paper);\n\t\t\t}\n\t\t},\n\t\t\"instrumentation:change\": (value) => {\n\t\t\tif (value) {\n\t\t\t\taddCharts(paper);\n\t\t\t} else {\n\t\t\t\tremoveCharts(paper);\n\t\t\t}\n\t\t},\n\t\t\"color:input\": (value) => {\n\t\t\tdocument.documentElement.style.setProperty(\"--accent-color\", value);\n\t\t}\n\t});\n\n\tfunction addControls(paper) {\n\t    \n\t\tconst graph = paper.model;\n\t\tgraph.getElements().forEach((cell) => {\n\t\t    console.log(\"-\",cell);\n\t\t\tswitch (cell.get(\"type\")) {\n\t\t\t\tcase \"ControlValve\":\n\t\t\t\t\tSliderValveControl.add(cell.findView(paper), \"root\", \"slider\", {\n\t\t\t\t\t\tname: cell.attr(\"label/text\")\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"HandValve\":\n\t\t\t\t    // console.log('cell.get(\"type\")',cell.get(\"type\"))\n\t\t\t\t    // console.log(\"cell.findView(paper)\",cell.findView(paper))\n\t\t\t\t\tToggleValveControl.add(cell.findView(paper), \"root\", \"button\");\n                    // ToggleMotor1Control.add(motor1.id, \"root\", \"button\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"Pump\":\n\t\t\t\t\tPumpControl.add(cell.findView(paper), \"root\", \"selection\");\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction removeControls(paper) {\n\t\tSliderValveControl.removeAll(paper);\n\t\tToggleValveControl.removeAll(paper);\n\t\tPumpControl.removeAll(paper);\n\t}\n\n\tfunction addCharts(paper) {\n\t\tpaper.options.viewport = null;\n\t}\n\n\tfunction removeCharts(paper) {\n\t\tconst chartTypes = [\"chart.Knob\", \"chart.Plot\", \"standard.Link\"];\n\t\tpaper.options.viewport = (view) => {\n\t\t\treturn !chartTypes.includes(view.model.get(\"type\"));\n\t\t};\n\t}\n\n\t// Simulation\n\t// A dummy system for the purpose of this demo\n\n\ttank1.level = START_LIQUID;\n\n\tlet extraLiquid = 0;\n\n\tsetInterval(function() {\n\t\tconst tank1Level = tank1.level;\n\t\tconst liquidIn = g.random(0, 15);\n\n\t\tlet newLevel = tank1Level + liquidIn;\n\t\tif (newLevel >= 100) {\n\t\t\textraLiquid += newLevel - 100;\n\t\t} else {\n\t\t\textraLiquid = 0;\n\t\t}\n\n\t\t// Tank 1 Instrumentation\n\t\ttankChart.addPoint({\n\t\t\t\tx: tankChart.lastPoint(\"level\").x + 1,\n\t\t\t\ty: tank1Level\n\t\t\t},\n\t\t\t\"level\", {\n\t\t\t\tmaxLen: maxPoints\n\t\t\t}\n\t\t);\n\n\t\t// Tank 1 Pipes\n\t\tconst tank1Pipe1Flow = tank1Level > 70 ? 1 : 0;\n\t\tconst tank1Pipe2Flow = tank1Level > 0 ? 1 : 0;\n\t\ttank1Pipe1.set(\"flow\", tank1Pipe1Flow);\n\t\ttank1Pipe2.set(\"flow\", tank1Pipe2Flow);\n\n\t\t// CTRL Valve 1\n\t\tconst ctrlValve1Open = controlValve1.get(\"open\");\n\t\tconst ctrlValve1Pipe1Flow = tank1Pipe1Flow * ctrlValve1Open;\n\t\tctrlValve1Pipe1.set(\"flow\", ctrlValve1Pipe1Flow);\n\t\t// CTRL Valve 2\n\t\tconst ctrlValve2Open = controlValve2.get(\"open\");\n\t\tconst ctrlValve2Pipe1Flow = tank1Pipe2Flow * ctrlValve2Open;\n\t\tctrlValve2Pipe1.set(\"flow\", ctrlValve2Pipe1Flow);\n\n\t\t// Pump 1\n\t\tconst pump1Power = pump1.power;\n\t\tconst pump1Pipe1Flow = ctrlValve1Pipe1Flow * (1 + 2 * pump1Power);\n\t\tpump1Pipe1.set(\"flow\", pump1Pipe1Flow);\n\n\t\t// Pump 2\n\t\tconst pump2Power = pump2.power;\n\t\tconst pump2Pipe1Flow = ctrlValve2Pipe1Flow * (1 + 2 * pump2Power);\n\t\tpump2Pipe1.set(\"flow\", pump2Pipe1Flow);\n\n\t\t// Hand Valve 2\n\t\tconst handValve2Open = Number(handValve2.get(\"open\"));\n\t\tconst handValve2Pipe1Flow = pump1Pipe1Flow * handValve2Open;\n\t\tvalve2Pipe1.set(\"flow\", handValve2Pipe1Flow);\n\n\t\t// Hand Valve 3\n\t\tconst handValve3Open = Number(handValve3.get(\"open\"));\n\t\tconst handValve3Pipe1Flow = pump2Pipe1Flow * handValve3Open;\n\t\tvalve3Pipe1.set(\"flow\", handValve3Pipe1Flow);\n\n\t\t// Join 1\n\t\tconst join1Pipe1Flow = handValve2Pipe1Flow + handValve3Pipe1Flow;\n\t\tjoin1Pipe1.set(\"flow\", join1Pipe1Flow);\n\n\t\t// Tank 2\n\t\tconst tank2Pipe1Flow = 0.5; // constant flow\n\t\ttank2Pipe1.set(\"flow\", tank2Pipe1Flow);\n\n\t\t// Hand Valve 1\n\t\tconst handValve1Open = Number(handValve1.get(\"open\"));\n\t\tconst handValve1Pipe1Flow = tank2Pipe1Flow * handValve1Open;\n\t\tvalve1Pipe1.set(\"flow\", handValve1Pipe1Flow);\n\n\t\t// Join 2\n\t\tconst join2Pipe1Flow = join1Pipe1Flow + handValve1Pipe1Flow;\n\t\tjoin2Pipe1.set(\"flow\", join2Pipe1Flow);\n\n\t\t// Tank1\n\t\tconst liquidOut = join2Pipe1Flow * 4;\n\t\ttank1.level = tank1Level + liquidIn - liquidOut;\n\n\t\t// Gauge 1\n\t\tlet pressure1 = ctrlValve1Pipe1Flow * 10;\n\t\tif (pressure1 > 0) {\n\t\t\tpressure1 += Math.min(30, extraLiquid * Math.max(1.1 - handValve2Open));\n\t\t\tif (handValve2Open === 0) {\n\t\t\t\tpressure1 += Math.max(0, tank1Level - 70) * 0.3;\n\t\t\t}\n\t\t}\n\t\tgauge1.transition(\"value\", pressure1 / 10);\n\t\tgauge1.transition(\n\t\t\t\"fill\",\n\t\t\tpressure1 > 30 ? MAX_PRESSURE_COLOR : PRESSURE_COLOR, {\n\t\t\t\tvalueFunction: util.interpolate.hexColor,\n\t\t\t\tduration: 1000\n\t\t\t}\n\t\t);\n\n\t\t// Gauge 2\n\t\tlet pressure2 = ctrlValve2Pipe1Flow * 10;\n\t\tif (pressure2 > 0) {\n\t\t\tpressure2 += Math.min(30, extraLiquid * Math.max(1.1 - handValve3Open));\n\t\t\tif (handValve3Open === 0) {\n\t\t\t\tpressure2 += tank1Level * 0.3;\n\t\t\t}\n\t\t}\n\t\tgauge2.transition(\"value\", pressure2 / 10);\n\t\tgauge2.transition(\n\t\t\t\"fill\",\n\t\t\tpressure2 > 30 ? MAX_PRESSURE_COLOR : PRESSURE_COLOR, {\n\t\t\t\tvalueFunction: util.interpolate.hexColor,\n\t\t\t\tduration: 1000\n\t\t\t}\n\t\t);\n\t}, 1000);\n}\n\nself.onDataUpdated = function() {\n\n}\n\nself.onResize = function() {\n\n}\n\nself.onDestroy = function() {}",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"SCADA\"}"
    },
    "bundleAlias" : "joint_js",
    "createdTime" : 1698639915459,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "53209130-76dc-11ee-8a88-9d6138fe9e87"
    },
    "tenantId" : {
      "entityType" : "TENANT",
      "id" : "6a594940-e4c5-11ed-8f65-1f1c5e01f03a"
    }
  }, {
    "alias" : "template_main",
    "name" : "Template Main",
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 11,
      "sizeY" : 11,
      "resources" : [ {
        "url" : "https://resources.jointjs.com/demos/rappid/build/package/rappid.css"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.4.0/backbone-min.js"
      }, {
        "url" : "https://resources.jointjs.com/demos/rappid/build/package/rappid.js"
      } ],
      "templateHtml" : "<div id=\"paper-container\"></div>\r\n<div id=\"toolbar-container\"></div>\r\n",
      "templateCss" : "/*------------- JOINT JS STSRT------------*/\r\n:root {\r\n  --accent-color: #0075f2;\r\n  --text-color: #131e29;\r\n  --liquid-color: #f6f740;\r\n}\r\n\r\n/* Switch */\r\n\r\n.jj-switch {\r\n  font-family: sans-serif;\r\n  font-size: 14px;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: white;\r\n  border: 1px solid #cad8e3;\r\n  position: static;\r\n  padding: 3px;\r\n  box-sizing: border-box;\r\n  border-radius: 4px;\r\n  color: var(--text-color);\r\n}\r\n\r\n.jj-switch-label {\r\n  width: 100%;\r\n  text-align: center;\r\n  margin: 0 0 2px 0;\r\n}\r\n\r\n.jj-switch-on {\r\n  background: var(--accent-color);\r\n  color: #dde6ed;\r\n  border-radius: 4px 0 0 4px;\r\n  border: 1px solid var(--accent-color);\r\n  width: 50%;\r\n  height: 22px;\r\n}\r\n\r\n.jj-switch-off {\r\n  background: #131e29;\r\n  color: #dde6ed;\r\n  border-radius: 0 4px 4px 0;\r\n  border: 1px solid #131e29;\r\n  width: 50%;\r\n  height: 22px;\r\n}\r\n.jj-switch-on:disabled,\r\n.jj-switch-off:disabled {\r\n  background: #f2f5f8;\r\n  color: #cad8e3;\r\n  border: 1px solid #cad8e3;\r\n}\r\n\r\n/* Checkbox */\r\n\r\n.jj-checkbox {\r\n  width: 100%;\r\n  height: 100%;\r\n  background: white;\r\n  border: 1px solid #cad8e3;\r\n  position: static;\r\n  box-sizing: border-box;\r\n  border-radius: 4px;\r\n}\r\n\r\n.jj-checkbox-input {\r\n  accent-color: var(--accent-color);\r\n}\r\n\r\n/* Slider */\r\n\r\n.jj-slider {\r\n  font-family: sans-serif;\r\n  font-size: 14px;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: white;\r\n  border: 1px solid #cad8e3;\r\n  position: static;\r\n  box-sizing: border-box;\r\n  border-radius: 4px;\r\n  padding: 3px;\r\n  color: var(--text-color);\r\n}\r\n\r\n.jj-slider-input {\r\n  accent-color: var(--accent-color);\r\n}\r\n\r\n.jj-slider-label {\r\n  width: 100%;\r\n  text-align: center;\r\n  white-space: pre;\r\n}\r\n\r\n.jj-slider-output {\r\n  width: 100%;\r\n  text-align: center;\r\n  white-space: pre;\r\n  display: block;\r\n  font-size: 11px;\r\n  color: #40668c;\r\n}\r\n\r\n/* Application */\r\n\r\n#paper-container {\r\n  position: absolute;\r\n  inset: 0 0 0 0;\r\n}\r\n\r\n#logo {\r\n  position: absolute;\r\n  top: 20px;\r\n  right: 0;\r\n}\r\n\r\n#toolbar-container {\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 10px;\r\n  font-family: sans-serif;\r\n  color: var(--text-color);\r\n  accent-color: var(--accent-color);\r\n}\r\n\r\n#toolbar-container [data-name=\"title\"] {\r\n  font-weight: 900;\r\n}\r\n\r\n/*----------- JOINT JS END-------------*/",
      "controllerScript" : "self.onInit = function() {\n    /*! JointJS+ v3.7.0 - HTML5 Diagramming Framework\n\nCopyright (c) 2023 client IO\n\n 2023-07-12\n\nThis Source Code Form is subject to the terms of the JointJS+ License\n, v. 2.0. If a copy of the JointJS+ License was not distributed with this\nfile, You can obtain one at https://www.jointjs.com/license\n or from the JointJS+ archive as was distributed by client IO. See the LICENSE file.*/\n\nconst { dia, shapes, util, ui } = joint;\n\nconst paperContainerEl = document.getElementById(\"paper-container\");\nconst toolbarContainerEl = document.getElementById(\"toolbar-container\");\n\n// Custom view flags\nconst POWER_FLAG = \"POWER\";\nconst LIGHT_FLAG = \"LIGHT\";\nconst FLOW_FLAG = \"FLOW\";\nconst OPEN_FLAG = \"OPEN\";\n\n// Constants\nconst LIQUID_COLOR = \"#0EAD69\";\nconst MAX_LIQUID_COLOR = \"#ED2637\";\nconst MIN_LIQUID_COLOR = \"#FFD23F\";\nconst START_LIQUID = 70;\nconst PRESSURE_COLOR = \"#1446A0\";\nconst MAX_PRESSURE_COLOR = \"#ED2637\";\n\ndocument.documentElement.style.setProperty(\"--liquid-color\", LIQUID_COLOR);\n\n// Pump metrics\nconst r = 30;\nconst d = 10;\nconst l = (3 * r) / 4;\nconst step = 20;\n\nclass Pump extends dia.Element {\n  defaults() {\n    return {\n      ...super.defaults,\n      type: \"Pump\",\n      size: {\n        width: 100,\n        height: 100\n      },\n      power: 0,\n      attrs: {\n        root: {\n          magnetSelector: \"body\"\n        },\n        body: {\n          rx: \"calc(w / 2)\",\n          ry: \"calc(h / 2)\",\n          cx: \"calc(w / 2)\",\n          cy: \"calc(h / 2)\",\n          stroke: \"gray\",\n          strokeWidth: 2,\n          fill: \"lightgray\"\n        },\n        label: {\n          text: \"Pump\",\n          textAnchor: \"middle\",\n          textVerticalAnchor: \"top\",\n          x: \"calc(0.5*w)\",\n          y: \"calc(h+10)\",\n          fontSize: 14,\n          fontFamily: \"sans-serif\",\n          fill: \"#350100\"\n        },\n        rotorGroup: {\n          transform: \"translate(calc(w/2),calc(h/2))\",\n          event: \"element:power:click\",\n          cursor: \"pointer\"\n        },\n        rotorFrame: {\n          r: 40,\n          fill: \"#eee\",\n          stroke: \"#666\",\n          strokeWidth: 2\n        },\n        rotorBackground: {\n          r: 34,\n          fill: \"#777\",\n          stroke: \"#222\",\n          strokeWidth: 1,\n          style: {\n            transition: \"fill 0.5s ease-in-out\"\n          }\n        },\n        rotor: {\n          // d: `M ${a} ${a} ${b} ${r} -${b} ${r} -${a} ${a} -${r} ${b} -${r} -${b} -${a} -${a} -${b} -${r} ${b} -${r} ${a} -${a} ${r} -${b} ${r} ${b} Z`,\n          d: `M 0 0 V ${r} l ${-d} ${-l} Z M 0 0 V ${-r} l ${d} ${l} Z M 0 0 H ${r} l ${-l} ${d} Z M 0 0 H ${-r} l ${l} ${-d} Z`,\n          stroke: \"#222\",\n          strokeWidth: 3,\n          fill: \"#bbb\"\n        }\n      },\n      ports: {\n        groups: {\n          pipes: {\n            position: {\n              name: \"line\",\n              args: {\n                start: { x: \"calc(w / 2)\", y: \"calc(h)\" },\n                end: { x: \"calc(w / 2)\", y: 0 }\n              }\n            },\n            markup: util.svg`\n                            <rect @selector=\"pipeBody\" />\n                            <rect @selector=\"pipeEnd\" />\n                        `,\n            size: { width: 80, height: 30 },\n            attrs: {\n              portRoot: {\n                magnetSelector: \"pipeEnd\"\n              },\n              pipeBody: {\n                width: \"calc(w)\",\n                height: \"calc(h)\",\n                y: \"calc(h / -2)\",\n                fill: {\n                  type: \"linearGradient\",\n                  stops: [\n                    { offset: \"0%\", color: \"gray\" },\n                    { offset: \"30%\", color: \"white\" },\n                    { offset: \"70%\", color: \"white\" },\n                    { offset: \"100%\", color: \"gray\" }\n                  ],\n                  attrs: {\n                    x1: \"0%\",\n                    y1: \"0%\",\n                    x2: \"0%\",\n                    y2: \"100%\"\n                  }\n                }\n              },\n              pipeEnd: {\n                width: 10,\n                height: \"calc(h+6)\",\n                y: \"calc(h / -2 - 3)\",\n                stroke: \"gray\",\n                strokeWidth: 3,\n                fill: \"white\"\n              }\n            }\n          }\n        },\n        items: [\n          {\n            id: \"left\",\n            group: \"pipes\",\n            z: 1,\n            attrs: {\n              pipeBody: {\n                x: \"calc(-1 * w)\"\n              },\n              pipeEnd: {\n                x: \"calc(-1 * w)\"\n              }\n            }\n          },\n          {\n            id: \"right\",\n            group: \"pipes\",\n            z: 0,\n            attrs: {\n              pipeEnd: {\n                x: \"calc(w - 10)\"\n              }\n            }\n          }\n        ]\n      }\n    };\n  }\n\n  preinitialize() {\n    this.markup = util.svg/* xml */ `\n            <ellipse @selector=\"body\" />\n            <g @selector=\"rotorGroup\">\n                <circle @selector=\"rotorFrame\" />\n                <circle @selector=\"rotorBackground\" />\n                <path @selector=\"rotor\" />\n            </g>\n            <text @selector=\"label\" />\n        `;\n  }\n\n  get power() {\n    return this.get(\"power\") || 0;\n  }\n\n  set power(value) {\n    this.set(\"power\", value);\n  }\n}\n\nconst PumpView = dia.ElementView.extend({\n  presentationAttributes: dia.ElementView.addPresentationAttributes({\n    power: [POWER_FLAG]\n  }),\n\n  initFlag: [dia.ElementView.Flags.RENDER, POWER_FLAG],\n\n  powerAnimation: null,\n\n  confirmUpdate(...args) {\n    let flags = dia.ElementView.prototype.confirmUpdate.call(this, ...args);\n    if (this.hasFlag(flags, POWER_FLAG)) {\n      this.togglePower();\n      flags = this.removeFlag(flags, POWER_FLAG);\n    }\n    return flags;\n  },\n\n  getSpinAnimation() {\n    let { spinAnimation } = this;\n    if (spinAnimation) return spinAnimation;\n    const [rotorEl] = this.findBySelector(\"rotor\");\n    // It's important to use start and end frames to make it work in Safari.\n    const keyframes = { transform: [\"rotate(0deg)\", \"rotate(360deg)\"] };\n    spinAnimation = rotorEl.animate(keyframes, {\n      fill: \"forwards\",\n      duration: 1000,\n      iterations: Infinity\n    });\n    this.spinAnimation = spinAnimation;\n    return spinAnimation;\n  },\n\n  togglePower() {\n    const { model } = this;\n    this.getSpinAnimation().playbackRate = model.power;\n  }\n});\n\nclass ControlValve extends dia.Element {\n  defaults() {\n    return {\n      ...super.defaults,\n      type: \"ControlValve\",\n      size: {\n        width: 60,\n        height: 60\n      },\n      open: 1,\n      attrs: {\n        root: {\n          magnetSelector: \"body\"\n        },\n        body: {\n          rx: \"calc(w / 2)\",\n          ry: \"calc(h / 2)\",\n          cx: \"calc(w / 2)\",\n          cy: \"calc(h / 2)\",\n          stroke: \"gray\",\n          strokeWidth: 2,\n          fill: {\n            type: \"radialGradient\",\n            stops: [\n              { offset: \"80%\", color: \"white\" },\n              { offset: \"100%\", color: \"gray\" }\n            ]\n          }\n        },\n        liquid: {\n          // We use path instead of rect to make it possible to animate\n          // the stroke-dasharray to show the liquid flow.\n          d: \"M calc(w / 2 + 12) calc(h / 2) h -24\",\n          stroke: LIQUID_COLOR,\n          strokeWidth: 24,\n          strokeDasharray: \"3,1\"\n        },\n        cover: {\n          x: \"calc(w / 2 - 12)\",\n          y: \"calc(h / 2 - 12)\",\n          width: 24,\n          height: 24,\n          stroke: \"#333\",\n          strokeWidth: 2,\n          fill: \"#fff\"\n        },\n        coverFrame: {\n          x: \"calc(w / 2 - 15)\",\n          y: \"calc(h / 2 - 15)\",\n          width: 30,\n          height: 30,\n          stroke: \"#777\",\n          strokeWidth: 2,\n          fill: \"none\",\n          rx: 1,\n          ry: 1\n        },\n        stem: {\n          width: 10,\n          height: 30,\n          x: \"calc(w / 2 - 5)\",\n          y: -30,\n          stroke: \"#333\",\n          strokeWidth: 2,\n          fill: \"#555\"\n        },\n        control: {\n          d: \"M 0 0 C 0 -30 60 -30 60 0 Z\",\n          transform: \"translate(calc(w / 2 - 30), -20)\",\n          stroke: \"#333\",\n          strokeWidth: 2,\n          rx: 5,\n          ry: 5,\n          fill: \"#666\"\n        },\n        label: {\n          text: \"Valve\",\n          textAnchor: \"middle\",\n          textVerticalAnchor: \"top\",\n          x: \"calc(0.5*w)\",\n          y: \"calc(h+10)\",\n          fontSize: 14,\n          fontFamily: \"sans-serif\",\n          fill: \"#350100\"\n        }\n      },\n      ports: {\n        groups: {\n          pipes: {\n            position: {\n              name: \"absolute\",\n              args: {\n                x: \"calc(w / 2)\",\n                y: \"calc(h / 2)\"\n              }\n            },\n            markup: util.svg`\n                          <rect @selector=\"pipeBody\" />\n                          <rect @selector=\"pipeEnd\" />\n                      `,\n            size: { width: 50, height: 30 },\n            attrs: {\n              portRoot: {\n                magnetSelector: \"pipeEnd\"\n              },\n              pipeBody: {\n                width: \"calc(w)\",\n                height: \"calc(h)\",\n                y: \"calc(h / -2)\",\n                fill: {\n                  type: \"linearGradient\",\n                  stops: [\n                    { offset: \"0%\", color: \"gray\" },\n                    { offset: \"30%\", color: \"white\" },\n                    { offset: \"70%\", color: \"white\" },\n                    { offset: \"100%\", color: \"gray\" }\n                  ],\n                  attrs: {\n                    x1: \"0%\",\n                    y1: \"0%\",\n                    x2: \"0%\",\n                    y2: \"100%\"\n                  }\n                }\n              },\n              pipeEnd: {\n                width: 10,\n                height: \"calc(h+6)\",\n                y: \"calc(h / -2 - 3)\",\n                stroke: \"gray\",\n                strokeWidth: 3,\n                fill: \"white\"\n              }\n            }\n          }\n        },\n        items: [\n          {\n            id: \"left\",\n            group: \"pipes\",\n            z: 0,\n            attrs: {\n              pipeBody: {\n                x: \"calc(-1 * w)\"\n              },\n              pipeEnd: {\n                x: \"calc(-1 * w)\"\n              }\n            }\n          },\n          {\n            id: \"right\",\n            group: \"pipes\",\n            z: 0,\n            attrs: {\n              pipeEnd: {\n                x: \"calc(w - 10)\"\n              }\n            }\n          }\n        ]\n      }\n    };\n  }\n\n  preinitialize() {\n    this.markup = util.svg/* xml */ `\n          <rect @selector=\"stem\" />\n          <path @selector=\"control\" />\n          <ellipse @selector=\"body\" />\n          <rect @selector=\"coverFrame\" />\n          <path @selector=\"liquid\" />\n          <rect @selector=\"cover\" />\n          <text @selector=\"label\" />\n      `;\n  }\n}\n\nconst ControlValveView = dia.ElementView.extend({\n  presentationAttributes: dia.ElementView.addPresentationAttributes({\n    open: [OPEN_FLAG]\n  }),\n\n  initFlag: [dia.ElementView.Flags.RENDER, OPEN_FLAG],\n\n  framePadding: 6,\n\n  liquidAnimation: null,\n\n  confirmUpdate(...args) {\n    let flags = dia.ElementView.prototype.confirmUpdate.call(this, ...args);\n    this.animateLiquid();\n    if (this.hasFlag(flags, OPEN_FLAG)) {\n      this.updateCover();\n      flags = this.removeFlag(flags, OPEN_FLAG);\n    }\n    return flags;\n  },\n\n  updateCover() {\n    const { model } = this;\n    const opening = Math.max(0, Math.min(1, model.get(\"open\") || 0));\n    const [coverEl] = this.findBySelector(\"cover\");\n    const [coverFrameEl] = this.findBySelector(\"coverFrame\");\n    const frameWidth =\n      Number(coverFrameEl.getAttribute(\"width\")) - this.framePadding;\n    const width = Math.round(frameWidth * (1 - opening));\n    coverEl.animate(\n      {\n        width: [`${width}px`]\n      },\n      {\n        fill: \"forwards\",\n        duration: 200\n      }\n    );\n  },\n\n  animateLiquid() {\n    if (this.liquidAnimation) return;\n    const [liquidEl] = this.findBySelector(\"liquid\");\n    this.liquidAnimation = liquidEl.animate(\n      {\n        // 24 matches the length of the liquid path\n        strokeDashoffset: [0, 24]\n      },\n      {\n        fill: \"forwards\",\n        iterations: Infinity,\n        duration: 3000\n      }\n    );\n  }\n});\n\nclass HandValve extends dia.Element {\n  defaults() {\n    return {\n      ...super.defaults,\n      type: \"HandValve\",\n      size: {\n        width: 50,\n        height: 50\n      },\n      power: 0,\n      attrs: {\n        root: {\n          magnetSelector: \"body\"\n        },\n        body: {\n          rx: \"calc(w / 2)\",\n          ry: \"calc(h / 2)\",\n          cx: \"calc(w / 2)\",\n          cy: \"calc(h / 2)\",\n          stroke: \"gray\",\n          strokeWidth: 2,\n          fill: {\n            type: \"radialGradient\",\n            stops: [\n              { offset: \"70%\", color: \"white\" },\n              { offset: \"100%\", color: \"gray\" }\n            ]\n          }\n        },\n        stem: {\n          width: 10,\n          height: 30,\n          x: \"calc(w / 2 - 5)\",\n          y: -30,\n          stroke: \"#333\",\n          strokeWidth: 2,\n          fill: \"#555\"\n        },\n        handwheel: {\n          width: 60,\n          height: 10,\n          x: \"calc(w / 2 - 30)\",\n          y: -30,\n          stroke: \"#333\",\n          strokeWidth: 2,\n          rx: 5,\n          ry: 5,\n          fill: \"#666\"\n        },\n        label: {\n          text: \"Valve\",\n          textAnchor: \"middle\",\n          textVerticalAnchor: \"top\",\n          x: \"calc(0.5*w)\",\n          y: \"calc(h+10)\",\n          fontSize: \"14\",\n          fontFamily: \"sans-serif\",\n          fill: \"#350100\"\n        }\n      },\n      ports: {\n        groups: {\n          pipes: {\n            position: {\n              name: \"absolute\",\n              args: {\n                x: \"calc(w / 2)\",\n                y: \"calc(h / 2)\"\n              }\n            },\n            markup: util.svg`\n                          <rect @selector=\"pipeBody\" />\n                          <rect @selector=\"pipeEnd\" />\n                      `,\n            size: { width: 50, height: 30 },\n            attrs: {\n              portRoot: {\n                magnetSelector: \"pipeEnd\"\n              },\n              pipeBody: {\n                width: \"calc(w)\",\n                height: \"calc(h)\",\n                y: \"calc(h / -2)\",\n                fill: {\n                  type: \"linearGradient\",\n                  stops: [\n                    { offset: \"0%\", color: \"gray\" },\n                    { offset: \"30%\", color: \"white\" },\n                    { offset: \"70%\", color: \"white\" },\n                    { offset: \"100%\", color: \"gray\" }\n                  ],\n                  attrs: {\n                    x1: \"0%\",\n                    y1: \"0%\",\n                    x2: \"0%\",\n                    y2: \"100%\"\n                  }\n                }\n              },\n              pipeEnd: {\n                width: 10,\n                height: \"calc(h+6)\",\n                y: \"calc(h / -2 - 3)\",\n                stroke: \"gray\",\n                strokeWidth: 3,\n                fill: \"white\"\n              }\n            }\n          }\n        },\n        items: [\n          {\n            id: \"left\",\n            group: \"pipes\",\n            z: 0,\n            attrs: {\n              pipeBody: {\n                x: \"calc(-1 * w)\"\n              },\n              pipeEnd: {\n                x: \"calc(-1 * w)\"\n              }\n            }\n          },\n          {\n            id: \"right\",\n            group: \"pipes\",\n            z: 0,\n            attrs: {\n              pipeEnd: {\n                x: \"calc(w - 10)\"\n              }\n            }\n          }\n        ]\n      }\n    };\n  }\n\n  preinitialize() {\n    this.markup = util.svg/* xml */ `\n          <rect @selector=\"stem\" />\n          <rect @selector=\"handwheel\" />\n          <ellipse @selector=\"body\" />\n          <text @selector=\"label\" />\n      `;\n  }\n}\nclass LiquidTank extends dia.Element {\n  defaults() {\n    return {\n      ...super.defaults,\n      type: \"LiquidTank\",\n      size: {\n        width: 160,\n        height: 300\n      },\n      attrs: {\n        root: {\n          magnetSelector: \"body\"\n        },\n        legs: {\n          fill: \"none\",\n          stroke: \"#350100\",\n          strokeWidth: 8,\n          strokeLinecap: \"round\",\n          d: \"M 20 calc(h) l -5 10 M calc(w - 20) calc(h) l 5 10\"\n        },\n        body: {\n          stroke: \"gray\",\n          strokeWidth: 4,\n          x: 0,\n          y: 0,\n          width: \"calc(w)\",\n          height: \"calc(h)\",\n          rx: 120,\n          ry: 10,\n          fill: {\n            type: \"linearGradient\",\n            stops: [\n              { offset: \"0%\", color: \"gray\" },\n              { offset: \"30%\", color: \"white\" },\n              { offset: \"70%\", color: \"white\" },\n              { offset: \"100%\", color: \"gray\" }\n            ]\n          }\n        },\n        top: {\n          x: 0,\n          y: 20,\n          width: \"calc(w)\",\n          height: 20,\n          fill: \"none\",\n          stroke: \"gray\",\n          strokeWidth: 2\n        },\n        label: {\n          text: \"Tank 1\",\n          textAnchor: \"middle\",\n          textVerticalAnchor: \"top\",\n          x: \"calc(w / 2)\",\n          y: \"calc(h + 10)\",\n          fontSize: 14,\n          fontFamily: \"sans-serif\",\n          fill: \"#350100\"\n        }\n      }\n    };\n  }\n\n  preinitialize() {\n    this.markup = util.svg/* xml */ `\n            <path @selector=\"legs\"/>\n            <rect @selector=\"body\"/>\n            <rect @selector=\"top\"/>\n            <text @selector=\"label\" />\n        `;\n  }\n\n  get level() {\n    return this.get(\"level\") || 0;\n  }\n\n  set level(level) {\n    const newLevel = Math.max(0, Math.min(100, level));\n    this.set(\"level\", newLevel);\n  }\n}\n\nconst LEVEL_FLAG = \"LEVEl\";\n\nconst PanelView = dia.ElementView.extend({\n  presentationAttributes: dia.ElementView.addPresentationAttributes({\n    level: [LEVEL_FLAG],\n    color: [LEVEL_FLAG]\n  }),\n\n  initFlag: [dia.ElementView.Flags.RENDER, LEVEL_FLAG],\n\n  confirmUpdate(...args) {\n    let flags = dia.ElementView.prototype.confirmUpdate.call(this, ...args);\n    if (this.hasFlag(flags, LEVEL_FLAG)) {\n      this.updateLevel();\n      flags = this.removeFlag(flags, LEVEL_FLAG);\n    }\n    return flags;\n  },\n\n  updateLevel() {\n    const { model } = this;\n    const level = Math.max(0, Math.min(100, model.get(\"level\") || 0));\n    const color = model.get(\"color\") || \"red\";\n    const [liquidEl] = this.findBySelector(\"liquid\");\n    const [windowEl] = this.findBySelector(\"frame\");\n    const windowHeight = Number(windowEl.getAttribute(\"height\"));\n    const height = Math.round((windowHeight * level) / 100);\n    liquidEl.animate(\n      {\n        height: [`${height}px`],\n        fill: [color]\n      },\n      {\n        fill: \"forwards\",\n        duration: 1000\n      }\n    );\n  }\n});\n\nclass ConicTank extends dia.Element {\n  defaults() {\n    return {\n      ...super.defaults,\n      type: \"ConicTank\",\n      size: {\n        width: 160,\n        height: 100\n      },\n      attrs: {\n        root: {\n          magnetSelector: \"body\"\n        },\n        body: {\n          stroke: \"gray\",\n          strokeWidth: 4,\n          x: 0,\n          y: 0,\n          width: \"calc(w)\",\n          height: \"calc(h)\",\n          rx: 120,\n          ry: 10,\n          fill: {\n            type: \"linearGradient\",\n            stops: [\n              { offset: \"0%\", color: \"gray\" },\n              { offset: \"30%\", color: \"white\" },\n              { offset: \"70%\", color: \"white\" },\n              { offset: \"100%\", color: \"gray\" }\n            ]\n          }\n        },\n        top: {\n          x: 0,\n          y: 20,\n          width: \"calc(w)\",\n          height: 20,\n          fill: \"none\",\n          stroke: \"gray\",\n          strokeWidth: 2\n        },\n        bottom: {\n          d: \"M 0 0 L calc(w) 0 L calc(w / 2 + 10) 70 h -20 Z\",\n          transform: \"translate(0, calc(h - 10))\",\n          stroke: \"gray\",\n          strokeLinejoin: \"round\",\n          strokeWidth: 2,\n          fill: {\n            type: \"linearGradient\",\n            stops: [\n              { offset: \"10%\", color: \"#aaa\" },\n              { offset: \"30%\", color: \"#fff\" },\n              { offset: \"90%\", color: \"#aaa\" }\n            ],\n            attrs: {\n              gradientTransform: \"rotate(-10)\"\n            }\n          }\n        },\n        label: {\n          text: \"Tank 2\",\n          textAnchor: \"middle\",\n          textVerticalAnchor: \"bottom\",\n          x: \"calc(w / 2)\",\n          y: -10,\n          fontSize: 14,\n          fontFamily: \"sans-serif\",\n          fill: \"#350100\"\n        }\n      }\n    };\n  }\n\n  preinitialize() {\n    this.markup = util.svg/* xml */ `\n          <path @selector=\"bottom\"/>\n          <rect @selector=\"body\"/>\n          <rect @selector=\"top\"/>\n          <text @selector=\"label\" />\n      `;\n  }\n}\n\nclass Panel extends dia.Element {\n  defaults() {\n    return {\n      ...super.defaults,\n      type: \"Panel\",\n      size: {\n        width: 100,\n        height: 230\n      },\n      level: 0,\n      attrs: {\n        root: {\n          magnetSelector: \"panelBody\"\n        },\n        panelBody: {\n          x: 0,\n          y: 0,\n          width: \"calc(w)\",\n          height: \"calc(h)\",\n          rx: 1,\n          ry: 1,\n          fill: \"lightgray\",\n          stroke: \"gray\",\n          strokeWidth: 1\n        },\n        panelWindow: {\n          // turn the panel over so that we can grow the liquid from the bottom\n          // by increasing the height of the bar.\n          transform: \"translate(10, 10) rotate(180) translate(-40,-205)\"\n        },\n        panelTicks: {\n          transform: \"translate(55, 15)\",\n          d: `M 0 0 h 8 M 0 ${step} h 8 M 0 ${step * 2} h 8 M 0 ${\n            step * 3\n          } h 8 M 0 ${step * 4} h 8 M 0 ${step * 5} h 8 M 0 ${\n            step * 6\n          } h 8 M 0 ${step * 7} h 8 M 0 ${step * 8} h 8 M 0 ${\n            step * 9\n          } h 8 M 0 ${step * 10} h 8`,\n          fill: \"none\",\n          stroke: \"black\",\n          strokeWidth: 2,\n          strokeLinecap: \"round\"\n        },\n        panelValues: {\n          text: \"100\\n90\\n80\\n70\\n60\\n50\\n40\\n30\\n20\\n10\\n0\",\n          textAnchor: \"middle\",\n          textVerticalAnchor: \"top\",\n          x: 80,\n          y: 10,\n          lineHeight: step,\n          fontSize: 14,\n          fontFamily: \"sans-serif\"\n        },\n        frame: {\n          width: 40,\n          height: 200,\n          rx: 1,\n          ry: 1,\n          fill: \"none\",\n          stroke: \"black\",\n          strokeWidth: 3\n        },\n        liquid: {\n          x: 0,\n          y: 0,\n          width: 40,\n          height: 0,\n          stroke: \"black\",\n          strokeWidth: 2,\n          strokeOpacity: 0.2,\n          fill: MIN_LIQUID_COLOR\n        },\n        glass: {\n          x: 0,\n          y: 0,\n          width: 40,\n          height: 200,\n          fill: \"blue\",\n          stroke: \"none\",\n          fillOpacity: 0.1\n        },\n        label: {\n          text: \"Tank 1\",\n          textAnchor: \"middle\",\n          textVerticalAnchor: \"top\",\n          x: \"calc(w / 2)\",\n          y: \"calc(h + 10)\",\n          fontSize: 20,\n          fontFamily: \"sans-serif\",\n          fill: \"#350100\"\n        }\n      }\n    };\n  }\n\n  preinitialize() {\n    this.markup = util.svg/* xml */ `\n            <rect @selector=\"panelBody\"/>\n            <path @selector=\"panelTicks\"/>\n            <text @selector=\"panelValues\" />\n            <g @selector=\"panelWindow\">\n                <rect @selector=\"glass\"/>\n                <rect @selector=\"liquid\"/>\n                <rect @selector=\"frame\"/>\n            </g>\n      `;\n  }\n}\n\nclass Pipe extends dia.Link {\n  defaults() {\n    return {\n      ...super.defaults,\n      type: \"Pipe\",\n      z: -1,\n      router: { name: \"rightAngle\" },\n      flow: 1,\n      attrs: {\n        liquid: {\n          connection: true,\n          stroke: LIQUID_COLOR,\n          strokeWidth: 10,\n          strokeLinejoin: \"round\",\n          strokeLinecap: \"square\",\n          strokeDasharray: \"10,20\"\n        },\n        line: {\n          connection: true,\n          stroke: \"#eee\",\n          strokeWidth: 10,\n          strokeLinejoin: \"round\",\n          strokeLinecap: \"round\"\n        },\n        outline: {\n          connection: true,\n          stroke: \"#444\",\n          strokeWidth: 16,\n          strokeLinejoin: \"round\",\n          strokeLinecap: \"round\"\n        }\n      }\n    };\n  }\n\n  preinitialize() {\n    this.markup = util.svg/* xml */ `\n            <path @selector=\"outline\" fill=\"none\"/>\n            <path @selector=\"line\" fill=\"none\"/>\n            <path @selector=\"liquid\" fill=\"none\"/>\n        `;\n  }\n}\n\nconst PipeView = dia.LinkView.extend({\n  presentationAttributes: dia.LinkView.addPresentationAttributes({\n    flow: [FLOW_FLAG]\n  }),\n\n  initFlag: [...dia.LinkView.prototype.initFlag, FLOW_FLAG],\n\n  flowAnimation: null,\n\n  confirmUpdate(...args) {\n    let flags = dia.LinkView.prototype.confirmUpdate.call(this, ...args);\n    if (this.hasFlag(flags, FLOW_FLAG)) {\n      this.updateFlow();\n      flags = this.removeFlag(flags, FLOW_FLAG);\n    }\n    return flags;\n  },\n\n  getFlowAnimation() {\n    let { flowAnimation } = this;\n    if (flowAnimation) return flowAnimation;\n    const [liquidEl] = this.findBySelector(\"liquid\");\n    // stroke-dashoffset = sum(stroke-dasharray) * n;\n    // 90 = 10 + 20 + 10 + 20 + 10 + 20\n    const keyframes = { strokeDashoffset: [90, 0] };\n    flowAnimation = liquidEl.animate(keyframes, {\n      fill: \"forwards\",\n      duration: 1000,\n      iterations: Infinity\n    });\n    this.flowAnimation = flowAnimation;\n    return flowAnimation;\n  },\n\n  updateFlow() {\n    const { model } = this;\n    const flowRate = model.get(\"flow\") || 0;\n    this.getFlowAnimation().playbackRate = flowRate;\n    const [liquidEl] = this.findBySelector(\"liquid\");\n    liquidEl.style.stroke = flowRate === 0 ? \"#ccc\" : \"\";\n  }\n});\n\nclass Zone extends joint.dia.Element {\n  defaults() {\n    return {\n      ...super.defaults,\n      type: \"Zone\",\n      size: {\n        width: 120,\n        height: 40\n      },\n      attrs: {\n        body: {\n          fill: \"#ffffff\",\n          stroke: \"#cad8e3\",\n          strokeWidth: 1,\n          d: \"M 0 calc(0.5*h) calc(0.5*h) 0 H calc(w) V calc(h) H calc(0.5*h) Z\"\n        },\n        label: {\n          fontSize: 14,\n          fontFamily: \"sans-serif\",\n          fontWeight: \"bold\",\n          fill: LIQUID_COLOR,\n          textVerticalAnchor: \"middle\",\n          textAnchor: \"middle\",\n          x: \"calc(w / 2 + 10)\",\n          y: \"calc(h / 2)\"\n        }\n      }\n    };\n  }\n\n  preinitialize() {\n    this.markup = util.svg/* xml */ `\n            <path @selector=\"body\"/>\n            <text @selector=\"label\"/>\n        `;\n  }\n}\n\nclass Join extends dia.Element {\n  defaults() {\n    return {\n      ...super.defaults,\n      type: \"Join\",\n      size: {\n        width: 30,\n        height: 30\n      },\n      attrs: {\n        body: {\n          fill: \"#eee\",\n          stroke: \"#666\",\n          strokeWidth: 2,\n          d:\n            \"M 10 0 H calc(w - 10) l 10 10 V calc(h - 10) l -10 10 H 10 l -10 -10 V 10 Z\"\n        }\n      }\n    };\n  }\n\n  preinitialize() {\n    this.markup = util.svg/* xml */ `\n            <path @selector=\"body\"/>\n        `;\n  }\n}\n\nvar InfoButton = joint.elementTools.Button.extend({\n    name: 'info-button',\n    options: {\n        focusOpacity: 0.5,\n        distance: 60,\n        action: function(evt) {\n            alert('View id: ' + this.id + '\\n' + 'Model id: ' + this.model.id);\n        },\n        markup: [{\n            tagName: 'circle',\n            selector: 'button',\n            attributes: {\n                'r': 7,\n                'fill': '#001DFF',\n                'cursor': 'pointer'\n            }\n        }, {\n            tagName: 'path',\n            selector: 'icon',\n            attributes: {\n                'd': 'M -2 4 2 4 M 0 3 0 0 M -2 -1 1 -1 M -1 -4 1 -4',\n                'fill': 'none',\n                'stroke': '#FFFFFF',\n                'stroke-width': 2,\n                'pointer-events': 'none'\n            }\n        }]\n    }\n});\n\n\n\nconst namespace = {\n  ...shapes,\n  Zone,\n  Pipe,\n  PipeView,\n  LiquidTank,\n  ConicTank,\n  Panel,\n  PanelView,\n  Pump,\n  PumpView,\n  ControlValve,\n  ControlValveView,\n  HandValve,\n  Join,\n  InfoButton\n};\n\nconst graph = new dia.Graph(\n  {},\n  {\n    cellNamespace: namespace\n  }\n);\n\nconst paper = new dia.Paper({\n  model: graph,\n  width: \"100%\",\n  height: \"100%\",\n  async: true,\n  frozen: true,\n  sorting: dia.Paper.sorting.APPROX,\n  background: { color: \"#F3F7F6\" },\n  interactive: {\n    linkMove: false,\n    stopDelegation: false\n  },\n  cellViewNamespace: namespace,\n  defaultAnchor: {\n    name: \"perpendicular\"\n  }\n});\n\npaperContainerEl.appendChild(paper.el);\n\n// Tanks\n\nconst tank1 = new LiquidTank({\n  position: { x: 50, y: 250 }\n});\nconst panel1 = new Panel({\n  position: { x: 70, y: 300 }\n});\n\n// When the tank level changes, update the panel level and color.\npanel1.listenTo(tank1, \"change:level\", (_, level) => {\n  const color =\n    level > 80\n      ? MAX_LIQUID_COLOR\n      : level < 20\n      ? MIN_LIQUID_COLOR\n      : LIQUID_COLOR;\n  panel1.set({ level, color });\n});\nvar infoButton = new InfoButton();\ntank1.addTo(graph);\npanel1.addTo(graph);\ntank1.embed(panel1);\n\n\n// Tank 2\n\nconst tank2 = new ConicTank({\n  position: { x: 820, y: 200 }\n});\n\ntank2.addTo(graph);\n\n// Pumps\n\nconst pump1 = new Pump({\n  position: { x: 460, y: 250 },\n  attrs: {\n    label: {\n      text: \"Pump 1\"\n    }\n  }\n});\n\npump1.addTo(graph);\npump1.power = 1;\n\nconst pump2 = new Pump({\n  position: { x: 460, y: 450 },\n  attrs: {\n    label: {\n      text: \"Pump 2\"\n    }\n  }\n});\n\npump2.addTo(graph);\npump2.power = 0;\n\n// CTRL Valves\n\nconst controlValve1 = new ControlValve({\n  position: { x: 300, y: 295 },\n  open: 1,\n  attrs: {\n    label: {\n      text: \"CTRL Valve 1\"\n    }\n  }\n});\n\ncontrolValve1.addTo(graph);\n\nconst controlValve2 = new ControlValve({\n  position: { x: 300, y: 495 },\n  open: 0.25,\n  attrs: {\n    label: {\n      text: \"CTRL Valve 2\"\n    }\n  }\n});\n\ncontrolValve2.addTo(graph);\n\n// Zones\n\nconst zone1 = new Zone({\n  position: { x: 50, y: 600 },\n  attrs: {\n    label: {\n      text: \"Zone 1\"\n    }\n  }\n});\n\nconst zone2 = new Zone({\n  position: { x: 865, y: 600 },\n  attrs: {\n    label: {\n      text: \"Zone 2\"\n    }\n  }\n});\n\ngraph.addCells([zone1, zone2]);\n\n// Hand Valves\n\nconst handValve1 = new HandValve({\n  position: { x: 875, y: 450 },\n  open: 1,\n  angle: 270,\n  attrs: {\n    label: {\n      text: \"Valve 1\"\n    }\n  }\n});\n\nhandValve1.addTo(graph);\n\nconst handValve2 = new HandValve({\n  position: { x: 650, y: 250 },\n  open: 1,\n  angle: 0,\n  attrs: {\n    label: {\n      text: \"Valve 2\"\n    }\n  }\n});\n\nhandValve2.addTo(graph);\n\nconst handValve3 = new HandValve({\n  position: { x: 650, y: 450 },\n  open: 1,\n  angle: 0,\n  attrs: {\n    label: {\n      text: \"Valve 3\"\n    }\n  }\n});\n\nhandValve3.addTo(graph);\n\n// Joins\n\nconst join1 = new Join({\n  position: { x: 772, y: 460 }\n});\n\njoin1.addTo(graph);\n\nconst join2 = new Join({\n  position: { x: 810, y: 605 }\n});\n\njoin2.addTo(graph);\n\n// Pipes\n\nconst tank1Pipe1 = new Pipe({\n  source: {\n    id: tank1.id,\n    anchor: { name: \"right\", args: { dy: -25 } },\n    connectionPoint: { name: \"anchor\" }\n  },\n  target: {\n    id: controlValve1.id,\n    port: \"left\",\n    anchor: { name: \"left\" }\n  }\n});\n\ntank1Pipe1.addTo(graph);\n\nconst tank1Pipe2 = new Pipe({\n  source: {\n    id: tank1.id,\n    anchor: { name: \"bottomRight\", args: { dy: -40 } },\n    connectionPoint: { name: \"anchor\" }\n  },\n  target: {\n    id: controlValve2.id,\n    port: \"left\",\n    anchor: { name: \"left\" },\n    connectionPoint: { name: \"anchor\" }\n  }\n});\n\ntank1Pipe2.addTo(graph);\n\nconst tank2Pipe1 = new Pipe({\n  source: {\n    id: tank2.id,\n    selector: \"bottom\",\n    anchor: { name: \"bottom\" },\n    connectionPoint: { name: \"anchor\" }\n  },\n  target: {\n    id: handValve1.id,\n    port: \"right\",\n    anchor: { name: \"right\", args: { rotate: true } },\n    connectionPoint: { name: \"anchor\" }\n  }\n});\n\ntank2Pipe1.addTo(graph);\n\nconst ctrlValve1Pipe1 = new Pipe({\n  source: { id: controlValve1.id, port: \"right\", anchor: { name: \"right\" } },\n  target: { id: pump1.id, port: \"left\", anchor: { name: \"left\" } }\n});\n\nctrlValve1Pipe1.addTo(graph);\n\nconst valve2Pipe1 = new Pipe({\n  source: {\n    id: handValve2.id,\n    port: \"right\",\n    anchor: { name: \"right\", args: { rotate: true } },\n    connectionPoint: { name: \"anchor\" }\n  },\n  target: {\n    id: join1.id,\n    anchor: { name: \"top\" },\n    connectionPoint: { name: \"anchor\" }\n  }\n});\n\nvalve2Pipe1.addTo(graph);\n\nconst valve1Pipe1 = new Pipe({\n  source: {\n    id: handValve1.id,\n    port: \"left\",\n    anchor: { name: \"left\", args: { rotate: true } },\n    connectionPoint: { name: \"anchor\" }\n  },\n  target: {\n    id: join2.id,\n    anchor: { name: \"top\" },\n    connectionPoint: { name: \"anchor\" }\n  }\n});\n\nvalve1Pipe1.addTo(graph);\n\nconst pump1Pipe1 = new Pipe({\n  source: {\n    id: pump1.id,\n    port: \"right\",\n    anchor: { name: \"right\", args: { rotate: true } },\n    connectionPoint: { name: \"anchor\" }\n  },\n  target: {\n    id: handValve2.id,\n    port: \"left\",\n    anchor: { name: \"left\", args: { rotate: true } },\n    connectionPoint: { name: \"anchor\" }\n  }\n});\n\npump1Pipe1.addTo(graph);\n\nconst valve3Pipe1 = new Pipe({\n  source: {\n    id: handValve3.id,\n    port: \"right\",\n    anchor: { name: \"right\", args: { rotate: true } },\n    connectionPoint: { name: \"anchor\" }\n  },\n  target: {\n    id: join1.id,\n    anchor: { name: \"left\" },\n    connectionPoint: { name: \"anchor\" }\n  }\n});\n\nvalve3Pipe1.addTo(graph);\n\nconst pump2Pipe1 = new Pipe({\n  source: {\n    id: pump2.id,\n    port: \"right\",\n    anchor: { name: \"right\", args: { rotate: true } },\n    connectionPoint: { name: \"anchor\" }\n  },\n  target: {\n    id: handValve3.id,\n    port: \"left\",\n    anchor: { name: \"left\", args: { rotate: true } },\n    connectionPoint: { name: \"anchor\" }\n  }\n});\n\npump2Pipe1.addTo(graph);\n\nconst ctrlValve2Pipe1 = new Pipe({\n  source: { id: controlValve2.id, port: \"right\", anchor: { name: \"right\" } },\n  target: {\n    id: pump2.id,\n    port: \"left\",\n    anchor: { name: \"left\", args: { rotate: true } },\n    connectionPoint: { name: \"anchor\" }\n  }\n});\n\nctrlValve2Pipe1.addTo(graph);\n\nconst zone1Pipe1 = new Pipe({\n  source: {\n    id: zone1.id,\n    port: \"left\",\n    anchor: { name: \"left\", args: { rotate: true, dx: 10 } },\n    connectionPoint: { name: \"anchor\" }\n  },\n  target: {\n    id: tank1.id,\n    anchor: { name: \"bottomLeft\", args: { dy: -30 } },\n    connectionPoint: { name: \"anchor\" }\n  }\n});\n\nzone1Pipe1.addTo(graph);\n\nconst join1Pipe1 = new Pipe({\n  source: {\n    id: join1.id,\n    anchor: { name: \"bottom\" },\n    connectionPoint: { name: \"anchor\" }\n  },\n  target: {\n    id: join2.id,\n    anchor: { name: \"left\" },\n    connectionPoint: { name: \"anchor\" }\n  }\n});\n\njoin1Pipe1.addTo(graph);\n\nconst join2Pipe1 = new Pipe({\n  source: {\n    id: join2.id,\n    anchor: { name: \"right\" },\n    connectionPoint: { name: \"anchor\" }\n  },\n  target: {\n    id: zone2.id,\n    anchor: { name: \"left\", args: { dx: 10 } },\n    connectionPoint: { name: \"anchor\" }\n  }\n});\n\njoin2Pipe1.addTo(graph);\n\n// Charts\n\nconst maxPoints = 10;\nconst tankChart = new shapes.chart.Plot({\n  position: { x: 50, y: 50 },\n  size: { width: 300, height: 150 },\n  series: [\n    {\n      name: \"level\",\n      interpolate: \"linear\",\n      showLegend: false,\n      fillPadding: { top: 10 },\n      data: Array.from({ length: maxPoints }).map((_, i) => ({\n        x: i,\n        y: START_LIQUID\n      }))\n    }\n  ],\n  axis: {\n    \"y-axis\": {\n      min: 0,\n      max: 100,\n      ticks: 10\n    },\n    \"x-axis\": {\n      tickFormat: function (t) {\n        const d = new Date(t * 1000);\n        return (\n          d.getMinutes().toString().padStart(2, \"0\") +\n          \":\" +\n          d.getSeconds().toString().padStart(2, \"0\")\n        );\n      }\n    }\n  },\n  padding: 0,\n  markings: [\n    {\n      name: \"max\",\n      start: { y: 80 }\n    },\n    {\n      name: \"min\",\n      end: { y: 20 }\n    }\n  ],\n  // Historically, the chart shapes are defined without camel-cased attributes\n  attrs: {\n    \".\": {\n      \"font-family\": \"sans-serif\"\n    },\n    \".level path\": {\n      stroke: \"#0075f2\",\n      \"stroke-width\": 1,\n      \"stroke-opacity\": \"0.8\",\n      fill: \"#0075f2\",\n      \"fill-opacity\": \"0.3\"\n    },\n    \".marking.max rect\": {\n      fill: MAX_LIQUID_COLOR,\n      height: 3\n    },\n    \".marking.min rect\": {\n      fill: MIN_LIQUID_COLOR,\n      height: 3\n    },\n    \".point circle\": {\n      fill: \"#0075f2\",\n      stroke: \"none\",\n      opacity: 1\n    },\n    \".y-axis > path, .x-axis > path\": {\n      stroke: \"#131e29\",\n      \"stroke-width\": 2\n    },\n    \".background rect\": {\n      fill: \"#999\",\n      \"fill-opacity\": \"0.1\"\n    }\n  }\n});\n\ntankChart.addTo(graph);\n\nconst tankChartLink = new shapes.standard.Link({\n  source: { id: tankChart.id },\n  target: { id: tank1.id },\n  attrs: {\n    line: {\n      strokeDasharray: \"5 5\",\n      targetMarker: null,\n      stroke: \"#aaa\"\n    }\n  }\n});\n\ntankChartLink.addTo(graph);\n\nconst gauge1 = new shapes.chart.Knob({\n  position: { x: 380, y: 100 },\n  size: { width: 120, height: 120 },\n  min: 0,\n  max: 10,\n  step: 0.1,\n  value: 1,\n  fill: PRESSURE_COLOR,\n  // Historically, the chart shapes are defined without camel-cased attributes\n  attrs: {\n    root: {\n      \"font-family\": \"sans-serif\"\n    }\n  },\n  serieDefaults: {\n    startAngle: 90,\n    label: \"Ⓟ bar\"\n  },\n  sliceDefaults: {\n    legendLabel: \"{value:.1f}\",\n    onClickEffect: { type: \"none\" }\n  }\n});\n\ngauge1.addTo(graph);\n\nconst gauge1Link = new shapes.standard.Link({\n  source: { id: gauge1.id, anchor: { name: \"bottom\" } },\n  target: { id: ctrlValve1Pipe1.id },\n  z: -1,\n  attrs: {\n    line: {\n      strokeDasharray: \"5 5\",\n      targetMarker: {\n        type: \"circle\",\n        r: 12,\n        fill: \"#eee\",\n        stroke: \"#666\",\n        \"stroke-width\": 2\n      },\n      stroke: \"#aaa\"\n    }\n  }\n});\n\ngauge1Link.addTo(graph);\n\nconst gauge2 = gauge1.clone();\nconst gauge2Link = gauge1Link.clone();\n\ngauge2.position(380, 600);\n\ngauge2Link.source({ id: gauge2.id, anchor: { name: \"bottom\" } });\ngauge2Link.target({ id: ctrlValve2Pipe1.id });\n\ngauge2.addTo(graph);\ngauge2Link.addTo(graph);\n\n// Controls\n// A custom highlighters using the foreignObject element to embed HTML form controls\n// The styling is done in CSS\n\nconst PumpControl = dia.HighlighterView.extend({\n  UPDATE_ATTRIBUTES: [\"power\"],\n  tagName: \"g\",\n  children: util.svg/* xml */ `\n        <foreignObject width=\"20\" height=\"20\">\n            <div class=\"jj-checkbox\" xmlns=\"http://www.w3.org/1999/xhtml\">\n                <input @selector=\"input\" class=\"jj-checkbox-input\" type=\"checkbox\" style=\"width: 14px; height: 14px; box-sizing: border-box; margin: 2px;\"/>\n            </div>\n        </foreignObject>\n    `,\n  events: {\n    \"change input\": \"onChange\"\n  },\n  attributes: {\n    transform: \"translate(5, 5)\"\n  },\n  highlight: function (cellView) {\n    this.renderChildren();\n    this.childNodes.input.checked = Boolean(cellView.model.power);\n  },\n  onChange: function (evt) {\n    this.cellView.model.power = evt.target.checked ? 1 : 0;\n  }\n});\n\nconst ToggleValveControl = dia.HighlighterView.extend({\n  UPDATE_ATTRIBUTES: [\"open\"],\n  children: util.svg/* xml */ `\n        <foreignObject width=\"100\" height=\"50\">\n            <div class=\"jj-switch\" xmlns=\"http://www.w3.org/1999/xhtml\">\n                <div @selector=\"label\" class=\"jj-switch-label\" style=\"\"></div>\n                <button @selector=\"buttonOn\" class=\"jj-switch-on\">open</button>\n                <button @selector=\"buttonOff\" class=\"jj-switch-off\">close</button>\n            </div>\n        </foreignObject>\n    `,\n  events: {\n    \"click button\": \"onButtonClick\"\n  },\n  highlight: function (cellView) {\n    this.renderChildren();\n    const { model } = cellView;\n    const { el, childNodes } = this;\n    const size = model.size();\n    const isOpen = model.get(\"open\");\n    el.setAttribute(\n      \"transform\",\n      `translate(${size.width / 2 - 50}, ${size.height + 10})`\n    );\n    childNodes.buttonOn.disabled = !isOpen;\n    childNodes.buttonOff.disabled = isOpen;\n    childNodes.label.textContent = model.attr(\"label/text\");\n  },\n  onButtonClick: function (evt) {\n    const { model } = this.cellView;\n    const isOpen = model.get(\"open\");\n    model.set(\"open\", !isOpen);\n  }\n});\n\nconst SliderValveControl = dia.HighlighterView.extend({\n  UPDATE_ATTRIBUTES: [\"open\"],\n  children: util.svg/* xml */ `\n        <foreignObject width=\"100\" height=\"60\">\n            <div class=\"jj-slider\" xmlns=\"http://www.w3.org/1999/xhtml\">\n                <div @selector=\"label\" class=\"jj-slider-label\" style=\"\">Valve 4</div>\n                <input @selector=\"slider\" class=\"jj-slider-input\" type=\"range\" min=\"0\" max=\"100\" step=\"25\" style=\"width:100%;\"/>\n                <output @selector=\"value\" class=\"jj-slider-output\"></output>\n            </div>\n        </foreignObject>\n    `,\n  events: {\n    \"input input\": \"onInput\"\n  },\n  highlight: function (cellView) {\n    const { name = \"\" } = this.options;\n    const { model } = cellView;\n    const size = model.size();\n    if (!this.childNodes) {\n      // Render the slider only once to allow the user to drag it.\n      this.renderChildren();\n      this.childNodes.slider.value = model.get(\"open\") * 100;\n    }\n    this.el.setAttribute(\n      \"transform\",\n      `translate(${size.width / 2 - 50}, ${size.height + 10})`\n    );\n    this.childNodes.label.textContent = name;\n    this.childNodes.value.textContent = this.getSliderTextValue(\n      model.get(\"open\")\n    );\n  },\n  getSliderTextValue: function (value = 0) {\n    if (value === 0) {\n      return \"Closed\";\n    }\n    if (value === 1) {\n      return \"Open\";\n    }\n    return `${value * 100}% open`;\n  },\n  onInput: function (evt) {\n    this.cellView.model.set(\"open\", Number(evt.target.value) / 100);\n  }\n});\n\n// Create all controls and add them to the graph\naddControls(paper);\n\n// Transform the paper so that the content fits the viewport\npaper.transformToFitContent({\n  useModelGeometry: true,\n  padding: { top: 80, bottom: 10, horizontal: 50 },\n  horizontalAlign: \"middle\",\n  verticalAlign: \"top\"\n});\n\n// Start rendering the content and highlighters\npaper.unfreeze();\n\n// Toolbar\n\nconst toolbar = new ui.Toolbar({\n  tools: [\n    {\n      type: \"label\",\n      name: \"title\",\n      text: \"SCADA: Piping & Instrumentation Diagram\"\n    },\n    {\n      type: \"separator\"\n    },\n    {\n      type: \"checkbox\",\n      name: \"controls\",\n      label: \"Controls\",\n      value: true\n    },\n    {\n      type: \"checkbox\",\n      name: \"instrumentation\",\n      label: \"Instrumentation\",\n      value: true\n    },\n    {\n      type: \"separator\"\n    },\n    {\n      type: \"label\",\n      text: \"Color\"\n    },\n    {\n      type: \"color-picker\",\n      name: \"color\",\n      value: getComputedStyle(document.documentElement).getPropertyValue(\n        \"--accent-color\"\n      )\n    }\n  ]\n});\n\ntoolbarContainerEl.appendChild(toolbar.el);\n\ntoolbar.render();\ntoolbar.on({\n  \"controls:change\": (value) => {\n    if (value) {\n      addControls(paper);\n    } else {\n      removeControls(paper);\n    }\n  },\n  \"instrumentation:change\": (value) => {\n    if (value) {\n      addCharts(paper);\n    } else {\n      removeCharts(paper);\n    }\n  },\n  \"color:input\": (value) => {\n    document.documentElement.style.setProperty(\"--accent-color\", value);\n  }\n});\n\nfunction addControls(paper) {\n  const graph = paper.model;\n  graph.getElements().forEach((cell) => {\n    switch (cell.get(\"type\")) {\n      case \"ControlValve\":\n        SliderValveControl.add(cell.findView(paper), \"root\", \"slider\", {\n          name: cell.attr(\"label/text\")\n        });\n        break;\n      case \"HandValve\":\n        ToggleValveControl.add(cell.findView(paper), \"root\", \"button\");\n        break;\n      case \"Pump\":\n        PumpControl.add(cell.findView(paper), \"root\", \"selection\");\n        break;\n    }\n  });\n}\n\nfunction removeControls(paper) {\n  SliderValveControl.removeAll(paper);\n  ToggleValveControl.removeAll(paper);\n  PumpControl.removeAll(paper);\n}\n\nfunction addCharts(paper) {\n  paper.options.viewport = null;\n}\n\nfunction removeCharts(paper) {\n  const chartTypes = [\"chart.Knob\", \"chart.Plot\", \"standard.Link\"];\n  paper.options.viewport = (view) => {\n    return !chartTypes.includes(view.model.get(\"type\"));\n  };\n}\n\n// Simulation\n// A dummy system for the purpose of this demo\n\ntank1.level = START_LIQUID;\n\nlet extraLiquid = 0;\n\nsetInterval(function () {\n  const tank1Level = tank1.level;\n  const liquidIn = g.random(0, 15);\n\n  let newLevel = tank1Level + liquidIn;\n  if (newLevel >= 100) {\n    extraLiquid += newLevel - 100;\n  } else {\n    extraLiquid = 0;\n  }\n\n  // Tank 1 Instrumentation\n  tankChart.addPoint(\n    { x: tankChart.lastPoint(\"level\").x + 1, y: tank1Level },\n    \"level\",\n    { maxLen: maxPoints }\n  );\n\n  // Tank 1 Pipes\n  const tank1Pipe1Flow = tank1Level > 70 ? 1 : 0;\n  const tank1Pipe2Flow = tank1Level > 0 ? 1 : 0;\n  tank1Pipe1.set(\"flow\", tank1Pipe1Flow);\n  tank1Pipe2.set(\"flow\", tank1Pipe2Flow);\n\n  // CTRL Valve 1\n  const ctrlValve1Open = controlValve1.get(\"open\");\n  const ctrlValve1Pipe1Flow = tank1Pipe1Flow * ctrlValve1Open;\n  ctrlValve1Pipe1.set(\"flow\", ctrlValve1Pipe1Flow);\n  // CTRL Valve 2\n  const ctrlValve2Open = controlValve2.get(\"open\");\n  const ctrlValve2Pipe1Flow = tank1Pipe2Flow * ctrlValve2Open;\n  ctrlValve2Pipe1.set(\"flow\", ctrlValve2Pipe1Flow);\n\n  // Pump 1\n  const pump1Power = pump1.power;\n  const pump1Pipe1Flow = ctrlValve1Pipe1Flow * (1 + 2 * pump1Power);\n  pump1Pipe1.set(\"flow\", pump1Pipe1Flow);\n\n  // Pump 2\n  const pump2Power = pump2.power;\n  const pump2Pipe1Flow = ctrlValve2Pipe1Flow * (1 + 2 * pump2Power);\n  pump2Pipe1.set(\"flow\", pump2Pipe1Flow);\n\n  // Hand Valve 2\n  const handValve2Open = Number(handValve2.get(\"open\"));\n  const handValve2Pipe1Flow = pump1Pipe1Flow * handValve2Open;\n  valve2Pipe1.set(\"flow\", handValve2Pipe1Flow);\n\n  // Hand Valve 3\n  const handValve3Open = Number(handValve3.get(\"open\"));\n  const handValve3Pipe1Flow = pump2Pipe1Flow * handValve3Open;\n  valve3Pipe1.set(\"flow\", handValve3Pipe1Flow);\n\n  // Join 1\n  const join1Pipe1Flow = handValve2Pipe1Flow + handValve3Pipe1Flow;\n  join1Pipe1.set(\"flow\", join1Pipe1Flow);\n\n  // Tank 2\n  const tank2Pipe1Flow = 0.5; // constant flow\n  tank2Pipe1.set(\"flow\", tank2Pipe1Flow);\n\n  // Hand Valve 1\n  const handValve1Open = Number(handValve1.get(\"open\"));\n  const handValve1Pipe1Flow = tank2Pipe1Flow * handValve1Open;\n  valve1Pipe1.set(\"flow\", handValve1Pipe1Flow);\n\n  // Join 2\n  const join2Pipe1Flow = join1Pipe1Flow + handValve1Pipe1Flow;\n  join2Pipe1.set(\"flow\", join2Pipe1Flow);\n\n  // Tank1\n  const liquidOut = join2Pipe1Flow * 4;\n  tank1.level = tank1Level + liquidIn - liquidOut;\n\n  // Gauge 1\n  let pressure1 = ctrlValve1Pipe1Flow * 10;\n  if (pressure1 > 0) {\n    pressure1 += Math.min(30, extraLiquid * Math.max(1.1 - handValve2Open));\n    if (handValve2Open === 0) {\n      pressure1 += Math.max(0, tank1Level - 70) * 0.3;\n    }\n  }\n  gauge1.transition(\"value\", pressure1 / 10);\n  gauge1.transition(\n    \"fill\",\n    pressure1 > 30 ? MAX_PRESSURE_COLOR : PRESSURE_COLOR,\n    { valueFunction: util.interpolate.hexColor, duration: 1000 }\n  );\n\n  // Gauge 2\n  let pressure2 = ctrlValve2Pipe1Flow * 10;\n  if (pressure2 > 0) {\n    pressure2 += Math.min(30, extraLiquid * Math.max(1.1 - handValve3Open));\n    if (handValve3Open === 0) {\n      pressure2 += tank1Level * 0.3;\n    }\n  }\n  gauge2.transition(\"value\", pressure2 / 10);\n  gauge2.transition(\n    \"fill\",\n    pressure2 > 30 ? MAX_PRESSURE_COLOR : PRESSURE_COLOR,\n    { valueFunction: util.interpolate.hexColor, duration: 1000 }\n  );\n}, 1000);\n}\n\nself.onDataUpdated = function() {\n   \n}\n\nself.onResize = function() {\n      \n}\n\nself.onDestroy = function() {\n}\n",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Template Main\"}"
    },
    "bundleAlias" : "joint_js",
    "createdTime" : 1699247239134,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "5c3f0fe0-7c62-11ee-bcfb-9d6138fe9e87"
    },
    "tenantId" : {
      "entityType" : "TENANT",
      "id" : "6a594940-e4c5-11ed-8f65-1f1c5e01f03a"
    }
  }, {
    "alias" : "watch",
    "name" : "watch",
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 10.5,
      "sizeY" : 6,
      "resources" : [ {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.4/jquery.js"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.js"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.4.1/backbone.js"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/jointjs/3.7.5/joint.js"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/jointjs/3.7.5/joint.css"
      } ],
      "templateHtml" : "<div id=\"myholder\"></div>",
      "templateCss" : "#container {\n    overflow: auto;\n}\n\n.tbDatasource-container {\n    margin: 5px;\n    padding: 8px;\n}\n\n.tbDatasource-title {\n    font-size: 1.200rem;\n    font-weight: 500;\n    padding-bottom: 10px;\n}\n\n.tbDatasource-table {\n    width: 100%;\n    box-shadow: 0 0 10px #ccc;\n    border-collapse: collapse;\n    white-space: nowrap;\n    font-size: 1.000rem;\n    color: #757575;\n}\n\n.tbDatasource-table td {\n    position: relative;\n    border-top: 1px solid rgba(0, 0, 0, 0.12);\n    border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n    padding: 0px 18px;\n    box-sizing: border-box;\n}",
      "controllerScript" : "self.onInit = function() {\n    var namespace = joint.shapes;\n                \n        var graph = new joint.dia.Graph({}, { cellNamespace: namespace });\n\n        var paper = new joint.dia.Paper({\n            el: document.getElementById('myholder'),\n            model: graph,\n            width: 600,\n            height: 300,\n            gridSize: 10,\n            cellViewNamespace: namespace,\n            background:{\n                color: 'rgba(0, 255, 0, 0.3)'\n            },\n            drawGrid: true,\n        });\n        // zoom in and out.\n        // paper.scale(0.5,0.5);  \n        // move the view.\n        // paper.translate(300,50);\n        \n        \n        \n    var link = new joint.shapes.standard.Link();\n    link.source(new g.Point(228.84550125020417, 100.76702664502545));\n    link.target(new g.Point(416.2834258874138, 72.03741369165368));\n    link.vertices([{ x: 300, y: 150 }]);\n    link.attr({\n        line: {\n            sourceMarker: {\n                'type': 'path',\n                'd': 'M 20 -10 0 0 20 10 Z'\n            },\n            targetMarker: {\n                'type': 'path',\n                'stroke': 'green',\n                'stroke-width': 2,\n                'fill': 'yellow',\n                'd': 'M 20 -10 0 0 20 10 Z'\n            },\n            \n        }\n    });\n    link.labels([{\n        attrs: {\n            text: {\n                text: 'Hello, World'\n            }\n        }\n    }]);\n    link.addTo(graph);\n\n    function hourHand(link) {\n        link.transition('source', ((10 + (9.36 / 60)) / 12), {\n            delay: 1000,\n            duration: 19000,\n            valueFunction: function(start, startTime) {\n                var timeCorrection = ((startTime * (2 * Math.PI)) - (Math.PI / 2));\n                var origin = new g.Point(300, 150);\n                var radius = 140 / 1.618;\n                return function(t) {\n                    return {\n                        x: origin.x + (radius * Math.cos((t * 2 * Math.PI) + timeCorrection)),\n                        y: origin.y + (radius * Math.sin((t * 2 * Math.PI) + timeCorrection))\n                    };\n                };\n            }\n        });\n    }\n\n    function minuteHand(link) {\n        link.transition('target', (9.36 / 60), {\n            delay: 1000,\n            duration: 19000,\n            timingFunction: function(time) {\n                return ((time * 12) - (Math.floor(time * 12)));\n            },\n            valueFunction: function(start, startTime) {\n                var timeCorrection = ((startTime * (2 * Math.PI)) - (Math.PI / 2));\n                var origin = new g.Point(300, 150);\n                var radius = 140;\n                return function(t) {\n                    return {\n                        x: origin.x + (radius * Math.cos((t * 2 * Math.PI) + timeCorrection)),\n                        y: origin.y + (radius * Math.sin((t * 2 * Math.PI) + timeCorrection))\n                    };\n                };\n            }\n        });\n    }\n\n    link.currentTransitions = 0;\n\n    hourHand(link);\n    minuteHand(link);\n\n    link.on('transition:start', function(link) {\n        link.currentTransitions += 1;\n    });\n\n    link.on('transition:end', function(link) {\n        link.currentTransitions -= 1;\n\n        if (link.currentTransitions === 0) {\n            hourHand(link);\n            minuteHand(link);\n        }\n    });\n    \n}\n\nself.onDataUpdated = function() {\n    \n}\n\nself.onResize = function() {\n    \n}\n\nself.onDestroy = function() {\n}\n",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"watch\"}"
    },
    "bundleAlias" : "joint_js",
    "createdTime" : 1698823035387,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "af1c1cb0-7886-11ee-b19f-9d6138fe9e87"
    },
    "tenantId" : {
      "entityType" : "TENANT",
      "id" : "6a594940-e4c5-11ed-8f65-1f1c5e01f03a"
    }
  } ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}